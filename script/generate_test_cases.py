#!/usr/bin/env python3

import os
import datetime
import logging
import textwrap

print("generate suite data")

overwrite = True

from azure.devops.connection import Connection
from msrest.authentication import BasicAuthentication
from azure.devops.v5_1.test.models import TestCaseResult,TestRun, TestSuite, TestPlan, WorkItemReference
from azure.devops.v5_1.build.models import Build
import pprint
import xml.etree.ElementTree as ET
from bs4 import BeautifulSoup

# Fill in with your personal access token and org URL
personal_access_token = os.getenv('SYSTEM_ACCESSTOKEN')
organization_url = 'https://dev.azure.com/Crosslynxusllc'
# Create a connection to the org
credentials = BasicAuthentication('', personal_access_token)
connection = Connection(base_url=organization_url, creds=credentials)

# Get a client (the "core" client provides access to projects, teams, etc)
core_client = connection.clients.get_core_client()

project = 'VGS_Automation_and_COE_Testing'

test_client = connection.clients.get_test_client()
work_client = connection.clients.get_work_item_tracking_client()
build_client = connection.clients.get_build_client()
test_plan_client = connection.clients_v5_1.get_test_plan_client()

logger = logging.getLogger(__file__)
work_log = {}
esc_dict = {
            "\"": "\\\"",
            "'": "\\\'",
            "\b": "\\b",
            "\t": "\\t",
            "\n": "\\n",
            "\f": "\\f",
            "\r": "\\r",
            "\\": "\\\\",
            }

def remove_non_ascii2(text):
    return ''.join([i if ord(i) < 128 else ' ' for i in text])

def fixpath(path):
    return path.replace('\\', '/')

def escape_string(string):
    return remove_non_ascii2(''.join(esc_dict.get(chr, chr) for chr in string))

def remove_non_ascii(text):
    return escape_string(text)

class GenWorkItem:
    def __init__(self, file_name, dir_parent, work_id, suite_id):
        self.work_id = work_id
        self.suites = {suite_id}
        self.file_name = file_name
        self.dir_parent = {dir_parent}

    def add_suite(self,dir_parent, suite_id):
        self.suites.add(suite_id)
        self.dir_parent.add(dir_parent)

    def flush(self):
        work = work_client.get_work_item(self.work_id)
        entry_id = self.work_id
        title = work.fields['System.Title']
        logger.info("Work item %s %s" % (entry_id, title))

        with open(self.file_name, "w") as f:
            if 'Microsoft.VSTS.TCM.Steps' in work.fields:
                steps = work.fields['Microsoft.VSTS.TCM.Steps']
                text,step_comments = xml_to_text(steps)
            else:
                text = "Steps are MISSING from test case"
                step_comments = ""

            suite_ids = ','.join([f'"{v}"' for v in self.suites])
            plans = "\n               : ".join([v for v in self.dir_parent])

            f.write(f"""
\"\"\"
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : {plans}
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/{entry_id}
===================================================================================================
Test Case      : {entry_id}
Description    : {title}
Area Path      : {fixpath(work.fields['System.AreaPath'])}
Iteration Path : {fixpath(work.fields['System.IterationPath'])}
System.History : {work.fields['System.History'] if 'System.History' in work.fields else 'None'}
Steps:
===================================================================================================
{text}
===================================================================================================


\"\"\"
import pytest

# AUTOGENERATED Test Case {entry_id}

@pytest.mark.skip(reason="TODO: unimplemented test case")
#@pytest.mark.ci_test
#@pytest.mark.regress_smoke
@pytest.mark.suite_id({suite_ids})
@pytest.mark.test_case("{entry_id}")
def test_case(vgs_meter, logger, di_version):
    logger.trace("Executing Test Case {entry_id} - {escape_string(title)}")


    # TODO: TEST NEEDS TRANSLATED
    # result=vgs_meter.command("some command on meter")
    assert False

{step_comments}

""")


def xml_to_text(xml_string):
    tree = ET.fromstring(xml_string)
    ret = ""
    steps = ""
    step_number = 1
    for child in tree:
        #print(child.tag, child.attrib)
        if 'type' in child.attrib:
            if (child.attrib['type'] == 'ValidateStep' or
                child.attrib['type'] == 'ActionStep'):

                for item in child.iter():
                    if item.tag == 'parameterizedString' and item.text:
                        ret = ret + "Step %s - \n" % (step_number)
                        steps += "    logger.trace('Step %s')\n" % step_number
                        soup = BeautifulSoup(item.text,features="lxml")
                        text = remove_non_ascii(soup.get_text())

                        ret += '\n'.join(textwrap.wrap(text, width=100)) + "\n\n"
                        step_number += 1

                    #print(item.tag, item.attrib)
        elif 'ref' in child.attrib:
            ref_id = child.attrib['ref']
            workref = work_client.get_work_item(ref_id)
            title = workref.fields['System.Title']
            ret += "Refer to: %s - %s\n\n" % (ref_id, title)
            if 'Microsoft.VSTS.TCM.Steps' in workref.fields:
                refsteps = workref.fields['Microsoft.VSTS.TCM.Steps']
                text,step_comments = xml_to_text(refsteps)
                ret += text
                steps += "    #Refer to: %s - %s\n" % (ref_id, title)
                steps += step_comments
                steps += "    #END REF"

        else:
            logger.warning("Unknown type: ", child.attrib)

    return ret, steps

def suite_iter(level, plan_id, suite_parent, dir_parent):
    for suite_entry in suite_parent:
        entry_id = suite_entry.id
        if suite_entry.suite_entry_type == "suite":
            suite = test_plan_client.get_suite_entries(project, entry_id)
            test_suite = test_plan_client.get_test_suite_by_id(project, plan_id, entry_id)
            name = test_suite.name
            dir_name = "%s_%s" % (entry_id, name)
            this_dir =  os.path.join(dir_parent, dir_name)
            yield entry_id, suite, this_dir
            yield from suite_iter(level+1, plan_id, suite, this_dir)

def enumerate_suites(level, plan_id, suite, dir_parent):
    suite_entries = test_plan_client.get_suite_entries(project, suite.id)
    dir_name = os.path.join(dir_parent, suite.name)
    os.makedirs(dir_name, exist_ok=True)
    logging.info("Suite %s", dir_name)

    for suite_entry in suite_entries:
        entry_id = suite_entry.id
        if suite_entry.suite_entry_type == "suite":
            suite = test_plan_client.get_test_suite_by_id(project, plan_id, entry_id)
            enumerate_suites(level+1, plan_id, suite, dir_name)
        else:
            # test point
            case_name = os.path.join(dir_name, "test_case_%s.py" % (entry_id))
            logging.info("Test point: %s", case_name)
            """
            case_dir = "tests/soupui_test/case%s/case%s" % (int(entry_id/10) % 10, entry_id % 10)
            logging.info("Creating %s", case_dir)
            real_file = os.path.join(case_dir, "test_case_%s.py" % (entry_id))
            os.makedirs(case_dir, exist_ok=True)
            rpath = os.path.relpath(real_file, link_name)
            try:
                os.symlink(rpath, link_name)
            except FileExistsError as e:
                pass
            if entry_id in work_log:
                #print("Duplicate entry in suite ", work_log[entry_id])
                work_log[entry_id].add_suite(dir_parent, suite_entry.suite_id)
                continue
            """
            if not os.path.exists(case_name) or overwrite:
                work_log[entry_id] = GenWorkItem(case_name, dir_parent, entry_id, suite_entry.suite_id)


def main(plan_id, start_suite):
    plan = test_plan_client.get_test_plan_by_id(project, plan_id)
    root_suite_id = plan.root_suite.id

    root_suite = test_plan_client.get_suite_entries(project, root_suite_id)

    name = plan.name
    start_dir = "%s" % (name)
    logger.info("Pre-processing work items")

#    if start_suite:
#        for entry_id, suite, dir_name in suite_iter(0, plan_id, root_suite, start_dir):
#            print("%s - %s" % (entry_id, dir_name))
#            if entry_id == start_suite:
#                break
    dir_name = "templates"
    os.makedirs(dir_name, exist_ok=True)

    suite = test_plan_client.get_test_suite_by_id(project, plan_id, start_suite)
    enumerate_suites(0, plan_id, suite, dir_name)

    logger.info("Generating test cases")
    for key, gen in work_log.items():
        gen.flush()

    logger.info("Processing complete.  Created %s test cases" %(len(work_log)))

import argparse

logging.basicConfig(level=logging.INFO)
parser = argparse.ArgumentParser()
parser.add_argument('--start_suite', type=int, default=None, required=True)
parser.add_argument('--plan_id', type=int, default=None, required=True)
args = parser.parse_args()

main(args.plan_id, args.start_suite)
