"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase1
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2047345
===================================================================================================
Test Case      : 2047345
Description    : BUG 2031484: SwitchMetrologySim.sh not generating dataserver.metsim.log
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 - 
Install the latest AppServices package.

Step 2 - 
Installation should be successful

Step 3 - 
Check the Dataserver daemon is successfully startedps | grep -i dataserver

Step 4 - 
Dataserver daemon should be running

Step 5 - 
Enable Metrology on the meter, /usr/bin/SwitchMetrologySim.sh -e

Step 6 - 
Command should be successful

Step 7 - 
ls -l /tmp/dataserver.metsim.log

Step 8 - 
Check this file got created under /tmp location


===================================================================================================


"""
import pytest
import time
from tests.test_meters.utils import install_agent_and_activate,DI_TEST_AGENT,is_process_running

# AUTOGENERATED Test Case 2047345

# @pytest.mark.skip(reason="https://dev.azure.com/itron/RnD/_workitems/edit/2940889")
@pytest.mark.regress_nightly
#@pytest.mark.regress_smoke
@pytest.mark.suite_id("2012056")
@pytest.mark.test_case("2047345")
@pytest.mark.parametrize("agent_info", [DI_TEST_AGENT])
def test_case(preinstalled_meter, logger,agent_info,di_version ):
    logger.trace("Executing Test Case 2047345 - BUG 2031484: SwitchMetrologySim.sh not generating dataserver.metsim.log")       
    logger.trace('Step 1')
    """AppServe is installed with preinstalled_meter fixture""" 
    install_agent_and_activate(preinstalled_meter, logger, agent_info)  
    logger.trace('Step 2')    
    fwver, asver = preinstalled_meter.version_info()
    assert asver == di_version
    logger.trace('Step 3')   
    logger.trace('Step 4') 
    assert is_process_running(preinstalled_meter,f"DataServer_Daemon"),'DataServer is not up and running'

    logger.trace('Step 5')
    initial_tmp_files = preinstalled_meter.ls("/tmp/dataserver.metsim.log -l")
    logger.info(initial_tmp_files)

    if not initial_tmp_files:
        preinstalled_meter.command("/usr/bin/SwitchMetrologySim.sh -d")
    try:
        SwitchmetrologySim=preinstalled_meter.command("/usr/bin/SwitchMetrologySim.sh -e")    
        logger.trace('Step 6')
        assert "SUCCESS" in SwitchmetrologySim
        logger.trace('Step 7')
        stop = time.time() + (5*60)
        while time.time()<=stop:
            directory = '/tmp'
            file= 'dataserver.metsim.log'
            status = file in preinstalled_meter.ls(directory)
            if file in preinstalled_meter.ls(directory):
                break
            time.sleep(10)
        logger.trace('Step 8')   
        assert status ,f"dataserver.metsim.log is not generating in {directory}"
    finally:
        preinstalled_meter.command("/usr/bin/SwitchMetrologySim.sh -d")