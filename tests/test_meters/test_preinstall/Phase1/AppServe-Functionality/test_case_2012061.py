"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase1
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2012061
===================================================================================================
Test Case      : 2012061
Description    : Verify container Manager is up and running after installation
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 - 
Install the given software

Step 2 - 
Meter should update with given software

Step 3 - 
Check container manager status in meter\nps | grep -i container

Step 4 - 
Container manager should be up and running# ps | grep -i contain\n  1794 containe 15632 S
ContainerManager --username=containerd_u --groupname=containerd_g\n


===================================================================================================


"""
import pytest

# AUTOGENERATED Test Case 2012061

# @pytest.mark.skip(reason="TODO: unimplemented test case")
@pytest.mark.regress_nightly
#@pytest.mark.regress_smoke
@pytest.mark.suite_id("2012056")
@pytest.mark.test_case("2012061")
def test_case(preinstalled_meter, logger, di_version):
    logger.trace("Executing Test Case 2012061 - Verify container Manager is up and running after installation")

    logger.trace('Step 1')
    """appserve is installed with preinstalled_meter fixture"""
    logger.trace('Step 2')
    stdout = preinstalled_meter.command('TransactionProcess --event="MUSE_V1;ReadLid;ILID_DATASERVER_APPSERV_FW_VERSION;"')
    appServe_version = stdout[0].split('=')
    assert appServe_version[1] == di_version,"Appserve is not installed"
    logger.trace('Step 3')
    stdout = preinstalled_meter.command(' ps | grep ContainerManager')
    output = [x for x in stdout if('ContainerManager' in x.split()[4])]
    logger.trace('Step 4')
    assert len(output)!=0,"Container Manager is not running"



