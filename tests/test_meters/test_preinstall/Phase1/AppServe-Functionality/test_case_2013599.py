"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase1
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2013599
===================================================================================================
Test Case      : 2013599
Description    : Verify killing Agent 10 times
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 - 
Install the Meter with given software

Step 2 - 
Meter should update wih new software

Step 3 - 
INstall Agents in Meter

Step 4 - 
Agents should install in meter

Step 5 - 
Kill the Agent 10 timeskill -9 $Agent-PID

Step 6 - 
Agent should not come up after 10th kill

Step 7 - 
restart the container Manager

dbus-send --system --dest=com.itron.museplatform.ContainerManager /com/itron/museplatform/ContainerManager com.itron.museplatform.ContainerManager.Refresh

(Stop all container may require before the refresh  - dbus-send --type=signal --system --dest=com.itron.museplatform.ContainerManager /com/itron/museplatform/ContainerManager com.itron.museplatform.ContainerManager.StopAllContainer )

Step 8 - 
Container Manager should refresh

Step 9 - 
Confirm Agent should restart again

Step 10 - 
Agent should restart ps | grep -i Agent -- Should show Agent PID (new)

===================================================================================================

"""
import pytest
import time
from tests.test_meters.utils import install_agent_and_activate,is_stand_alone_init,stop_container,refresh_container,HAN_AGENT,filter_ps


# AUTOGENERATED Test Case 2013599

# @pytest.mark.skip(reason="TODO: unimplemented test case")
# @pytest.mark.xfail(reason="test is broke randomly")
@pytest.mark.slow1020 # test takes 10 to 20 minutes
@pytest.mark.regress_nightly
 
#@pytest.mark.regress_smoke
@pytest.mark.suite_id("2012056")
@pytest.mark.test_case("2013599")
def test_case(preinstalled_meter, logger,di_version):
    logger.trace("Executing Test Case 2013599 - Verify killing Agent 10 times")

    logger.trace('Step 1')
    agent = HAN_AGENT
    """Latest appserve is installed with preinstalled_meter fixture"""
    logger.trace('Step 2')
    stdout = preinstalled_meter.command('TransactionProcess --event="MUSE_V1;ReadLid;ILID_DATASERVER_APPSERV_FW_VERSION;"')
    version = stdout[0].split('=')
    assert di_version == version[1]
    logger.trace('Step 3')
    install_agent_and_activate(preinstalled_meter,logger,agent)
    stop_container(preinstalled_meter)
    refresh_container(preinstalled_meter, logger, 20*60)
    logger.trace('Step 4')
    logger.trace('Step 5')
    try:
        for i in range(1,11):
            before_agent_pid = filter_ps(preinstalled_meter,f'{agent.name}_Daemon')
            assert before_agent_pid ,f"{agent.name} is not up and running"
            before_agent_pid = before_agent_pid[0][0]
            preinstalled_meter.command(f"kill -9 {before_agent_pid}")
            logger.info(f" {i}. {agent.name} is killed with pid {before_agent_pid}")

            time_out=time.time() + 5*60
            while time_out>time.time() and i<=9:
                after_agent_pid = filter_ps(preinstalled_meter,f'{agent.name}_Daemon')
                value = before_agent_pid != after_agent_pid[0][0] if after_agent_pid else False

                if value:
                    logger.info(f"{i}. {agent.name} is up and running after {i} times killed")
                    logger.info("-----------------------------------------------------------")
                    break

                time.sleep(10)
            assert value ,f"{agent.name} is not up and running {i}th killed" 

        time_out=time.time() + 5*60
        while time_out>time.time():
            value = filter_ps(preinstalled_meter,f'{agent.name}_Daemon')
            if not value:
                logger.info(f"{i}. {agent.name} is not up and running after {i} times killed")
                break
            time.sleep(10)

        assert not value ,f"{agent.name} is up and running 10th killed" 




    finally:
        logger.trace('Step 7')  
        stop_container(preinstalled_meter)
        logger.trace('Step 8')
        logger.trace('Step 9')
        logger.trace('Step 10')
        refresh_container(preinstalled_meter, logger, 20*60)
    



