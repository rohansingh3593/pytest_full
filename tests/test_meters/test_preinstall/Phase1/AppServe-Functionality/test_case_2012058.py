
"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase1
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2012058
===================================================================================================
Test Case      : 2012058
Description    : Verify DataVmonitor is restarting Agent when Agent kills in the meter
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 -
Check the agent pid running in the meter  ps | grep Agent

Step 2 -


Step 3 -
Kill the agent in the meterkill -9 <agent_pid>

Step 4 -


Step 5 -
check DataVmonitor is restarting Agent by checking in /mnt/pouch and /tmp syslogs immediately after
the agent is killed.

Step 6 -
Agent restart info should be available in SYS logs

# cd /mnt/pouch/LifeBoatLogs
# cdsEventLogDecoderV2 -f1 -i SYSLOG.txt | grep restart
"{2021/03/14 16:00:34 [15518692.287]}","None","Mar 14 16:00:34 DIInit: handle_restart: agent-daemon pid 41 STOPPED","ERROR","SYSLOG","","","10.2.428.2","","45","3039"


"{2021/03/14 16:00:40 [15518698.120]}","None","Mar 14 16:00:40 DIInit: agent_monitor_thread: restarting Agent 07020000","ERROR","SYSLOG","","","10.2.428.2","","45","3039"

# cd /tmp/logs/SYSLOG/INFORMATION
# cdsEventLogDecoderV2 -f1 -i SYSLOG.txt | grep restart
"{2021/03/14 16:00:34 [15518692.288]}","None","Mar 14 16:00:34 DIInit: agent_restart_is_restart_allowed: 1 10","INFORMATION","SYSLOG","","","10.2.428.2","","45","3039"


===================================================================================================


"""
import pytest
import time
from tests.test_meters.utils import install_agent_and_activate,refresh_container,stop_container,HAN_AGENT
from tests.test_meters.event_utils import wait_for_eventlog_entry_with_rotator, get_epoch
import os
import uuid

# AUTOGENERATED Test Case 2012058

def make_syslog_entries(meter, container_id, message):
    meter.command(f'lxc-attach -P /tmp/container -n {container_id} -- logger -p INFO "{message}"')
    meter.command(f'lxc-attach -P /tmp/container -n {container_id} -- logger -p ERROR "{message}"')

def poll_event_logs(meter, logger, container_id, message, start_time_info, start_time_error, info_moniker, error_moniker, timeout=10*60):
    """ This function will create system log messages (INFO and ERROR) while it is waiting for data from
        both of these log streams.

        @param meter            meter to use
        @param logger           logger used to report status
        @param container_id     container to emit syslog messages from
        @param message          message to send to syslog service
        @param start_time_info  start time to filter logs (don't look at entries before this time)
        @param start_time_error start time to filter logs
        @param info_moniker     string to look for in info syslog
        @param error_moniker    string to look for in error syslog

        asserts if it can't find the monikers (both needed)

        returns timestamp of found entries as a tuple (info_time, error_time)

    """

    found_message_error = None
    found_message_info = None
    make_syslog_entries(meter, container_id, message)
    start = time.time()
    timeout = time.time() + timeout
    while (not found_message_info or not found_message_error) and time.time() <= timeout:

        if not found_message_info:
            found_message_info, info_date = wait_for_eventlog_entry_with_rotator(meter, logger, start_time_info,
                '/tmp/logs/SYSLOG/INFORMATION/SYSLOG.txt', info_moniker, 2, do_assert=False)
        if not found_message_error:
            found_message_error, error_date = wait_for_eventlog_entry_with_rotator(meter, logger, start_time_error,
                '/mnt/pouch/LifeBoatLogs/SYSLOG.txt', error_moniker, 2, do_assert=False)

        if not found_message_error or not found_message_info:
            make_syslog_entries(meter, container_id, message)
            time.sleep(10)

    assert found_message_error and found_message_info, f"Didn't find date in event log after {time.time() - start} seconds"

    return info_date, error_date

@pytest.mark.regress_nightly
#@pytest.mark.regress_smoke
@pytest.mark.suite_id("2012056")
@pytest.mark.test_case("2012058")
def test_case(preinstalled_meter, logger):
    logger.trace("Executing Test Case 2012058 - Verify DataVmonitor is restarting Agent when Agent kills in the meter")
    agent_info = HAN_AGENT
    logger.trace('Step 1')

    try:

        install_agent_and_activate(preinstalled_meter,logger,agent_info)

        # find the the last date in the file
        start_message = f'start {os.path.basename(__file__)} {uuid.uuid1()}'
        end_message = f'end {os.path.basename(__file__)} {uuid.uuid1()}'

        start_time_info, start_time_error = poll_event_logs(preinstalled_meter, logger,
                                                          agent_info.container_id,
                                                          start_message,
                                                          get_epoch(),get_epoch(),
                                                          start_message, start_message)

        logger.trace('Step 2')
        agent = preinstalled_meter.command('ps | grep Agent')
        agent_pid_before = [x.split()[0] for x in agent if(f'{agent_info.name}_Daemon' in x.split()[4] and 'Z' not in x.split()[3])]
        logger.trace('Agent PID before kill : '+agent_pid_before[0])
        logger.trace('Step 3')
        preinstalled_meter.command('kill -9 '+agent_pid_before[0])
        logger.trace('Step 4')
        stop = time.time() + (5*60)
        while time.time()<=stop:
            agent = preinstalled_meter.command('ps | grep Agent')
            agent_pid_after = [x.split()[0] for x in agent if(f'{agent_info.name}_Daemon' in x.split()[4] and 'Z' not in x.split()[3])]
            if(len(agent_pid_after)==1 and (agent_pid_after != agent_pid_before)):
                break
            else:
                time.sleep(10)

        assert agent_pid_after != agent_pid_before, "Didn't find a new PID for the agent in 5 minutes"
        logger.trace('New Agent PID after killed : '+agent_pid_after[0])
        logger.trace('Step 5')
        logger.trace('Step 6')

        poll_event_logs(preinstalled_meter, logger, agent_info.container_id, end_message,
                        start_time_info, start_time_error,
                        info_moniker='agent_restart_is_restart_allowed',
                        error_moniker='restarting Agent',
                        )

    finally:
        stop_container(preinstalled_meter)
        refresh_container(preinstalled_meter,logger,20*60)
