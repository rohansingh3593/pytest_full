"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase1
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/1992817
===================================================================================================
Test Case      : 1992817
Description    : Verify the ContainerManager deamon is running after successful upgrade
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 - 
After the upgradation of AppServices package into the meter.  Check the CM deamon using the belwo
command\nps | grep -i container

Step 2 - 



===================================================================================================


"""
import pytest
import time
from tests.test_meters.utils import DI_TEST_AGENT,install_agent_and_activate

# AUTOGENERATED Test Case 1992817

# @pytest.mark.xfail(reason="test is broke due to precondition (requires agent)")
@pytest.mark.regress_nightly
@pytest.mark.slow1020 # test takes 10 to 20 minutes
#@pytest.mark.regress_smoke
@pytest.mark.suite_id("1990123")
@pytest.mark.test_case("1992817")
@pytest.mark.parametrize("agent_info", [DI_TEST_AGENT])
def test_case(preinstalled_meter,agent_info,logger,di_package_2k):
    logger.trace("Executing Test Case 1992817 - Verify the ContainerManager deamon is running after successful upgrade")

    logger.trace('Step 1')
    install_agent_and_activate(preinstalled_meter, logger, agent_info)
    stdout = preinstalled_meter.command('TransactionProcess --event="MUSE_V1;ReadLid;ILID_DATASERVER_APPSERV_FW_VERSION;"')
    pre_version = stdout[0].split('=')
    preinstalled_meter.install(file=di_package_2k)
    stdout = preinstalled_meter.command('TransactionProcess --event="MUSE_V1;ReadLid;ILID_DATASERVER_APPSERV_FW_VERSION;"')
    cur_version = stdout[0].split('=')
    assert pre_version[1] != cur_version[1],"Appserve not upgrade"
    logger.trace('Step 2')
    stop = time.time() + (2*60)
    while time.time()<=stop:
        stdout = preinstalled_meter.command('ps | grep -i container')
        output = [x for x in stdout if('Z' not in x.split()[3] and 'lxc-start' in x.split()[4])]   
        if(len(output)!=0):
            break
        else:
            time.sleep(10)       
    assert len(output)!=0,"timeout for condition check"