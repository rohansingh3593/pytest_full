
"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase1
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/1992822
===================================================================================================
Test Case      : 1992822
Description    : Verify there is no buzzer/alarm triggered after successful upgrade
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 - 
After the upgradation of AppServices package into the meter.  Check the database table named
log_eventrecords to see no new event created. Using following CLI command:\nsqlite3
/usr/share/itron/database/muse01.db \'select * from log_eventrecords;\'

Step 2 - 


Step 3 - 
Check the column named IsAlarm set to 0 for all the events created after upgrade(Note: If it is
\'1\' check with platform team)

Step 4 - 
Attached the sample file taken recently on AS 1.7.374.9, which shows the column name \"IsAlarm:\"
has value 0 across all entries.

Step 5 - 
And also using this below command\nImProvHelper.sh --ReadTable log_eventrecords

Step 6 - 



===================================================================================================


"""
import pytest
# AUTOGENERATED Test Case 1992822

# @pytest.mark.skip(reason="TODO: unimplemented test case")
@pytest.mark.regress_nightly
@pytest.mark.slow1020 # test takes 10 to 20 minutes
@pytest.mark.suite_id("1990123")
@pytest.mark.test_case("1992822")

def test_case(preinstalled_meter, logger, di_package_2k):
    logger.trace("Executing Test Case 1992822 - Verify there is no buzzer/alarm triggered after successful upgrade")

    logger.trace('Step 1')
    """AppServe installed with preinstalled_meter fixture"""

    logger.trace('Step 2')

    # last_record_id = preinstalled_meter.sql_query('delete from log_eventrecords')
    # sqlite3 /usr/share/itron/database/muse01.db "select max(TimeStampInMs) from log_eventrecords"
    # last_record_id = preinstalled_meter.sql_query('select max(id) from log_eventrecords')[0]
    # logger.info(last_record_id)

    last_TimeStampInMs = preinstalled_meter.sql_query( "select max(TimeStampInMs) from log_eventrecords")[0]
    logger.info(last_TimeStampInMs)


    logger.trace('Step 3')
    # preinstalled_meter.install(file=di_package_2k)

    logger.trace('Step 4')
    # new_event_records = preinstalled_meter.sql_query(f'select * from log_eventrecords where id > {last_record_id} and isAlarm=1')
    # # new_event_records = preinstalled_meter.sql_query(f'select * from log_eventrecords where isAlarm=0')

    new_event_records = preinstalled_meter.sql_query(f'select * from log_eventrecords where TimeStampInMs > {last_TimeStampInMs} and isAlarm=1 and eventid not in (524294, 524295, 65537, 65538, 65554)')


    # sqlite3 --header /usr/share/itron/database/muse01.db --header "select eventid,IsAlarm,IsAlarmSent from log_eventrecords where eventid not in (524294, 524295, 65537, 65538, 65554)"
    assert not new_event_records,"Alarm(s) triggered after upgrade."

    logger.trace('Step 5')
    preinstalled_meter.command('ImProvHelper.sh --ReadTable log_eventrecords')
