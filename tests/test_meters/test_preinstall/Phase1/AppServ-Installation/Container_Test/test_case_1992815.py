"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase1
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/1992815
===================================================================================================
Test Case      : 1992815
Description    : Verify the successful upgrade of ApplicationServices, only when the platform FW version lies between the min and max version.
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Refer to: 1997741 - AppServ Upgrade via ImProv

Step 1 - 
AppServe Upgrade via Improve.

Step 2 - 


Step 3 - 
After successful installation get the A7 Firmware Version using the below command
Helper-CmdList.sh -r ILID_SYSTEM_FW_VERSION | cut -d '=' -f 2

Step 4 - 
Platform FW version should be printed

Step 5 - 
Open the ReleaseManifesat.xml file and check the minHW and maxHW version.

Step 6 -
this file should contains the details of compatible FW version

Step 7 -
Compare the value taken from the step3 with value from step5

Step 8 -
The loaded FW version should lies between the range.


===================================================================================================


"""
import pytest
import os
import xml.etree.ElementTree as ET

# AUTOGENERATED Test Case 1992815

# @pytest.mark.skip(reason="TODO: unimplemented test case")
@pytest.mark.regress_nightly
@pytest.mark.regress_smoke
@pytest.mark.suite_id("1990123")
@pytest.mark.test_case("1992815")
def test_case(preinstalled_meter, logger, di_version,decrypted_di_package):
    logger.trace("Executing Test Case 1992815 - Verify the successful upgrade of ApplicationServices, only when the platform FW version lies between the min and max version.")

    logger.trace('Step 1')
    version=preinstalled_meter.version_info()[1]
    logger.trace('Step 2')
    assert version == di_version
    logger.trace('Step 3')
    current_fw_version = preinstalled_meter.command("Helper-CmdList.sh -r ILID_SYSTEM_FW_VERSION | cut -d '=' -f 2")
    current_fw_version = tuple(current_fw_version[0].split('.'))
    logger.trace('Step 4')
    current_fw_version = tuple(int(x) for x in current_fw_version)
    logger.trace('Step 5')
    tree = ET.parse(os.path.join(decrypted_di_package,"ReleaseManifest.xml"))
    root = tree.getroot()
    for item in root[0].findall('firmwareConstraints'):
        min_fw_version = tuple(item[0].attrib['version'].split('.'))
        max_fw_version = tuple(item[1].attrib['version'].split('.'))
    logger.trace('Step 6')
    min_fw_version = tuple(int(x) for x in min_fw_version)
    max_fw_version = tuple(int(x) for x in max_fw_version)
    logger.trace('Step 7')
    logger.trace('Step 8')
    if (current_fw_version >= min_fw_version and current_fw_version <= max_fw_version):
        assert True
    else:
        assert False,"platform FW version is not lies between the min and max version "



