
"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase1/AppServ-Installation
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/1993246
===================================================================================================
Test Case      : 1993246
Description    : Verify the correctness of messages logged in the log file
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 -
Do a stop and Refresh the container using dbus command.

Step 2 -
Verify the logged messages are proper in it's message body
cd  /tmp/logs/ContainerManager/INFORMATION

step3 -

eg : cdsEventLogDecoderV2 -f1 -i ContainerManager.txt | grep -i  Start

"{2023/01/07 23:59:38 [72825179.018]}","None","Started the container with name 50593792.","INFORMATION","ContainerManager","","","10.5.660.1 (Best Guess)","MUSE","50","31052"


===================================================================================================


"""
import pytest
import time
from tests.test_meters.utils import Third_Party_PubSub_AGENT,install_multiple_agents_and_activate, wait_for_agents,Active_Containers,HAN_AGENT,stop_container
from tests.test_meters.event_utils import get_meter_system_time, wait_for_eventlog_entry,wait_for_eventlog_entry_with_rotator
# AUTOGENERATED Test Case 1993246

#@pytest.mark.skip(reason="get_meter_time shouldn't be used for getting the current time")
@pytest.mark.regress_nightly
@pytest.mark.regress_smoke
@pytest.mark.suite_id("1993280")
@pytest.mark.test_case("1993246")
def test_case(preinstalled_meter, logger):
    logger.trace("Executing Test Case 1993246 - Verify the correctness of messages logged in the log file ")
    logger.trace('Step 1')
    # preinstalled_meter.command(f'rm /tmp/logs/ContainerManager/INFORMATION/ContainerManager.txt')
    test_start = get_meter_system_time(preinstalled_meter)
    logger.info("Start: %s", test_start)
    agent_list = [HAN_AGENT,Third_Party_PubSub_AGENT]
    install_multiple_agents_and_activate(preinstalled_meter, logger, agent_list)
    try:
        # Stop the Container
        stop_container(preinstalled_meter)

    finally:
        # Start the container
        preinstalled_meter.command("dbus-send --type=signal --system --dest=com.itron.museplatform.ContainerManager /com/itron/museplatform/ContainerManager com.itron.museplatform.ContainerManager.Refresh")
        stop = time.time() + (5*60)
        while time.time()<=stop:
            output=  all([agent.container_id in Active_Containers(preinstalled_meter) for agent in agent_list])
            if output :
                break
            time.sleep(10)
        assert output , "All container is not Started"

    for agent in agent_list:
        assert agent.container_id in Active_Containers(preinstalled_meter),f"Container {agent.container_id} is not start after the Container Start command"

    logger.trace('Step 2')
    moniker = f'Started the container with name 50593792'
    file_name = '/tmp/logs/ContainerManager/INFORMATION/ContainerManager.txt'

    logger.trace('Step 3')
    found = wait_for_eventlog_entry(preinstalled_meter, logger, test_start,file_name,moniker, 5*60,do_assert=False)
    if not found:
        found = wait_for_eventlog_entry_with_rotator(preinstalled_meter, logger, test_start,file_name,moniker, 5*60,do_assert=False)

    assert found, "start message not found"

    wait_for_agents(preinstalled_meter,logger,agent_list,20*60)