"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase1/AppServ-Installation
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/1993239
===================================================================================================
Test Case      : 1993239
Description    : Verify event log is created in /tmp and all container events are getting logged
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 - 
Ensure lxc is created based on the Agent installation.



Step 2 - 
Verify that the logs are seen under /tmp/logs/ContainerManager/DEBUG (also /INFORMATION) for
container-related logs.1. mkdir /tmp/container_logs\n2. cp /tmp/logs/ContainerManager/*/*
/tmp/container_logs\n3. cdsEventLogDecoderV2 -f1 -i /tmp/container_logs >
/tmp/container_logs.txt\n4. cat /tmp/container_logs.txt | grep 50593792\n

Step 3 - 
Log entries should be seen for all the containers


===================================================================================================


"""
import pytest
import time
from tests.test_meters.utils import install_agent_and_activate,is_process_running,DI_TEST_AGENT,refresh_container,Active_Containers
from tests.test_meters.event_utils import wait_for_eventlog_entry,get_meter_system_time
from tests.test_meters.rohan_utils import Container_stop

# AUTOGENERATED Test Case 1993239

#@pytest.mark.skip(reason="get_meter_time shouldn't be used for getting the current time")
@pytest.mark.regress_nightly
@pytest.mark.regress_smoke
@pytest.mark.suite_id("1993280")
@pytest.mark.test_case("1993239")
def test_case(preinstalled_meter, logger):
    logger.trace("Executing Test Case 1993239 - Verify event log is created in /tmp and all container events are getting logged")
    agent = DI_TEST_AGENT
    install_agent_and_activate(preinstalled_meter,logger,agent)
    start_time = get_meter_system_time(preinstalled_meter)
    logger.trace('Step 1')
    Container_id=preinstalled_meter.ls("/tmp/container")
    Container_id=[x for x in Container_id if x.isnumeric()]
    assert Container_id,"Containers is not created"
    assert is_process_running(preinstalled_meter,"lxc-start"),"lxc-container is not created"

    logger.trace('Step 2')
    file_name = '/tmp/logs/ContainerManager/INFORMATION/ContainerManager.txt'

    # Stop the Container
    Container_stop(preinstalled_meter,agent.container_id)

    # Start the container
    refresh_container(preinstalled_meter,logger,20*60)
    assert agent.container_id in Active_Containers(preinstalled_meter),f"Container {agent.container_id} is not start after the Container Start command"

    moniker = agent.container_id
    found=wait_for_eventlog_entry(preinstalled_meter,logger,start_time,file_name,moniker)

    logger.trace('Step 3')
    assert found,"Log entries is not available for all the containers"

