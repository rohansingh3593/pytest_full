"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase1/AppServ-Installation
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/1993228
===================================================================================================
Test Case      : 1993228
Description    : CMSwitchDIInit
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 - 
SwitchDIInits.sh -d - To disable standaloneDIInit

Step 2 - 
Again switching back to default Init should stop the running agent 

# sqlite3 --header /usr/share/itron/database/muse01.db "select * from CONTAINEROVERLAY"
GroupId|ContainerUID|OverlayUID|LoadIndex
1|50593792|50659329|300

50659329 is ItronDIInit

Step 3 - 
Verify that the switching of default Init to the StandAloneDIInit and vice-versa 
SwitchDIInits.sh -s -  To enable standaloneDIInit

Step 4 - 
Container switching from default to StandAloneDIInit should happen and the agent should run after switching to standalone container. 
 
# sqlite3 --header /usr/share/itron/database/muse01.db "select * from CONTAINEROVERLAY"
GroupId|ContainerUID|OverlayUID|LoadIndex
1|50593792|50659333|300

50659333 is standaloneDIinit


===================================================================================================


"""
import pytest
import time
from tests.test_meters.utils import install_agent_and_activate,is_process_running,wait_for_agents,enter_standalone,HAN_AGENT,DIINITOverlayUID,StandAloneOverlayUID

# AUTOGENERATED Test Case 1993228

# @pytest.mark.skip(reason="TODO: AssertionError: StandAloneDIInit disable")
@pytest.mark.regress_nightly
#@pytest.mark.regress_smoke
@pytest.mark.suite_id("1993280")
@pytest.mark.test_case("1993228")
def test_case(preinstalled_meter, logger):
    logger.trace("Executing Test Case 1993228 - CMSwitchDIInit")
    try:
        
        install_agent_and_activate(preinstalled_meter,logger,HAN_AGENT)
        logger.trace('Step 1')
        preinstalled_meter.command('/usr/bin/SwitchDIInits.sh -d')
        logger.trace('Step 2')
        overlay_uid = preinstalled_meter.sql_query(f"select OverlayUID from CONTAINEROVERLAY where OverlayUID = {DIINITOverlayUID}")
        assert DIINITOverlayUID == int(overlay_uid[0])
        stop = time.time() + (90)
        while time.time()<=stop:
            if not is_process_running(preinstalled_meter,f'{HAN_AGENT.name}_Daemon'):            
                break
            time.sleep(10)
        assert not is_process_running(preinstalled_meter,f'{HAN_AGENT.name}_Daemon'),f'{HAN_AGENT.name} agent is still running'
        logger.trace('Step 3')
        preinstalled_meter.command('/usr/bin/SwitchDIInits.sh -s')
        logger.trace('Step 4')
        overlay_uid = preinstalled_meter.sql_query(f"select OverlayUID from CONTAINEROVERLAY where OverlayUID = {StandAloneOverlayUID}")
        assert StandAloneOverlayUID == int(overlay_uid[0])
        wait_for_agents(preinstalled_meter, logger, [HAN_AGENT], 20*60)
        assert is_process_running(preinstalled_meter,f'{HAN_AGENT.name}_Daemon'),f'{HAN_AGENT.name} agent is not running'
    finally:
        enter_standalone(preinstalled_meter,logger,10*60)
    