"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase1/AppServ-Installation
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/1993254
===================================================================================================
Test Case      : 1993254
Description    : Verify when “ILID_CONTAINERS_STOP_ON_MANAGER_EXIT” is set true and the container manager is killed using (SIGTERM) then all the containers should also be stopped
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 - 
Set the value of  ILID_CONTAINERS_STOP_ON_MANAGER_EXIT to true.

Step 2 - 
Setting of value to \'true\' should be successful

Step 3 - 
Kill the CMD daemon using kill -9 <pid> of CMD

Step 4 - 
Killing of CMD daemon should be successful

Step 5 - 
Check when the CMD is killed , the running containers should also get stopped

Step 6 - 
Containers should get stopped after killing the CMD

===================================================================================================


"""
import pytest
import time
from tests.test_meters.utils import refresh_container,Active_Containers,read_lid,write_lid,get_installed_agents,HAN_AGENT,wait_for_agents,install_agent_and_activate,is_process_running,filter_ps,stop_container

# AUTOGENERATED Test Case 1993254

# @pytest.mark.skip(reason="https://dev.azure.com/itron/RnD/_workitems/edit/2940766")
@pytest.mark.regress_nightly
@pytest.mark.regress_smoke
@pytest.mark.suite_id("1993280")
@pytest.mark.test_case("1993254")
def test_case(preinstalled_meter, logger):
    logger.trace("Executing Test Case 1993254 - Verify when  ILID_CONTAINERS_STOP_ON_MANAGER_EXIT  is set true and the container manager is killed using (SIGTERM) then all the containers should also be stopped")

    installed_agents = get_installed_agents(preinstalled_meter,logger)
    if installed_agents:
        wait_for_agents(preinstalled_meter, logger, installed_agents, 20*60)
    else:
        install_agent_and_activate(preinstalled_meter, logger, HAN_AGENT)

    ilid = 'ILID_CONTAINERS_STOP_ON_MANAGER_EXIT'
    default_lid_value = read_lid(preinstalled_meter,logger,ilid)
    logger.info(default_lid_value)


    try:

        logger.trace('Step 1')
        value = True
        write_lid(preinstalled_meter,logger,ilid,value)

        logger.trace('Step 2')
        assert read_lid(preinstalled_meter,logger,ilid) == value,'lid value is not successful set'


        before_pid = filter_ps(preinstalled_meter,'ContainerManager')
        assert before_pid ,f"ContainerManager is not up and running"
        before_pid = before_pid[0][0]
        logger.info(f'Container Manager PID before kill :{before_pid}')

        logger.trace('Step 3')

        cmd = f"kill -9 {before_pid}"
        time_out=time.time() + 10
        while time_out>time.time():
            code,_ = preinstalled_meter.command_with_code(cmd)
            if code ==0 :
                logger.info(f'Container Manager is killed')
                break
            time.sleep(2)


        logger.trace('Step 4')
        assert code == 0,'Container Manager is not killed'

        time_out=time.time() + 5*60
        while time_out>time.time():
            value1 = not filter_ps(preinstalled_meter,f'ContainerManager')
            value2 = not Active_Containers(preinstalled_meter)            
            status = value1 and value2
            if status:
                break
            time.sleep(10)

        logger.trace('Step 5')
        assert value2 ,"containers is still running"


        logger.trace('Step 6')
        assert value1 ,"ContainerManager is still running"

    finally:

        write_lid(preinstalled_meter,logger,ilid,default_lid_value)        
        
        # Stop the Container
        stop_container(preinstalled_meter)
        # Start the container
        refresh_container(preinstalled_meter,logger,20*60)
        
