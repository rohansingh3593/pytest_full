"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase1/AppServ-Installation
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/1993252
===================================================================================================
Test Case      : 1993252
Description    : Security:Verify CMD should be able to add and remove files to tmp and directories under that 
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 - 
Verify that upon creating containers with the associated overlays , a file gets created under
/tmp/container/<container_id>/dbuscontainer.d/ for the container by CMD

Step 2 - 
Should be able to see <container_id>-<overlay_id>.conf file


===================================================================================================


"""
import time
import pytest
from tests.test_meters.utils import Third_Party_PubSub_AGENT,install_agent_and_activate,Active_Containers
# AUTOGENERATED Test Case 1993252

# @pytest.mark.skip(reason="PRBLOCKER")
@pytest.mark.regress_nightly
@pytest.mark.regress_smoke
@pytest.mark.suite_id("1993280")
@pytest.mark.test_case("1993252")
def test_case(preinstalled_meter, logger):
    logger.trace("Executing Test Case 1993252 - Security:Verify CMD should be able to add and remove files to tmp and directories under that ")
    logger.trace('Step 1')
    agent = Third_Party_PubSub_AGENT
    install_agent_and_activate(preinstalled_meter, logger, agent)
    agent_installed_list = preinstalled_meter.sql_query('select AgentName from agentinformation')
    assert agent.name in agent_installed_list,f'{agent.name} is not installed'

    time_out=time.time() + 5*60
    while time_out>time.time():
        status = agent.container_id in Active_Containers(preinstalled_meter)
        if status:
            break
        time.sleep(10)

    assert status,f'Container {agent.container_id} is not running'
    
    logger.trace('Step 2')
    file_Guid=preinstalled_meter.ls(f"/tmp/container/{agent.container_id}/dbuscontainer.d/")
    logger.info(file_Guid)
    file_Guid=[i.replace('.conf','').split('-')[1] for i in file_Guid]
    logger.info(file_Guid)
    GUID_list=preinstalled_meter.sql_query(f'select overlayUID from containeroverlay where ContainerUID = "{agent.container_id}"') 
    assert all(id in GUID_list for id in file_Guid),"Containers is not with the associated overlays"