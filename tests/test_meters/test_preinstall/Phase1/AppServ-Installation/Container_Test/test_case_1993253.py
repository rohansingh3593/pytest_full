"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase1/AppServ-Installation
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/1993253
===================================================================================================
Test Case      : 1993253
Description    : Verify that container is not run when it is not mapped to any overlayâ€™s or it should not be allowed to run even when it is mapped to overlay which does not exist
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 - 
Make an entry in the overlaysetup table in the muse01.db .

#sqlite3 /usr/share/itron/database/muse01.db "insert into OVERLAYSETUP (GroupId, UID, OverlayVersion, OverlayPath, IsDeletable, Source) values (1, 25,1, '/usr/share/itron/container-overlays/MockAgent.tar.bz2', 0, 0);"

Step 2 - 
Insertion of values to containersetup table should be successful.

Step 3 - 
Now map the overlay to the container which does not exist. Mapping of non-existing overlay can be done by making entry in the containeroverlay table.

#sqlite3 /usr/share/itron/database/muse01.db "insert into CONTAINEROVERLAY (GroupId, ContainerUID, OverlayUID, LoadIndex) values (1, 50593792,25, 15);"

Step 4 - 
Try to run the container using DBus stop and Refresh 

# dbus-send --type=signal --system --dest=com.itron.museplatform.ContainerManager /com/itron/museplatform/ContainerManager com.itron.museplatform.ContainerManager.StopAllContainer
 
#dbus-send --type=signal --system --dest=com.itron.museplatform.ContainerManager /com/itron/museplatform/ContainerManager com.itron.museplatform.ContainerManager.Refresh

Step 5 - 
Container should not run when there is no overlays attached to it. 
Check the container logs.
# cdsEventLogDecoderV2 -f1 -i /mnt/pouch/LifeBoatLogs/ContainerManager.txt

"{2022/12/23 12:25:56 [45562385.263]}","None","Unable to start container 50593792. Reason: Overlay does not exist: /usr/share/itron/container-overlays/MockAgent.tar.bz2","ERROR","ContainerManager","","","10.5.764.2 (Best Guess)","MUSE","36","20415"


===================================================================================================


"""
import pytest
import time
from tests.test_meters.utils import Active_Containers,install_agent_and_activate,HAN_AGENT,stop_container,refresh_container
from tests.test_meters.event_utils import get_meter_system_time, wait_for_eventlog_entry
from tests.test_meters.rohan_utils import Dataserver_refresh


# AUTOGENERATED Test Case 1993253
@pytest.mark.skip(reason="Timeout is not correct")
@pytest.mark.regress_nightly
@pytest.mark.regress_smoke
@pytest.mark.suite_id("1993280")
@pytest.mark.test_case("1993253")
def test_case(preinstalled_meter, logger):
    logger.trace("Executing Test Case 1993253 - Verify that container is not run when it is not mapped to any overlay s or it should not be allowed to run even when it is mapped to overlay which does not exist")


    test_start = get_meter_system_time(preinstalled_meter)
    logger.info("Start: %s", test_start)
    agent = HAN_AGENT
    install_agent_and_activate(preinstalled_meter, logger, agent)
    values = ['1', '25','1', '/usr/share/itron/container-overlays/MockAgent.tar.bz2', '0', '0']

    try:
        logger.trace('Step 1')
        preinstalled_meter.sql_query('insert into OVERLAYSETUP (GroupId, UID, OverlayVersion, OverlayPath, IsDeletable, Source) values (1, 25,1, "/usr/share/itron/container-overlays/MockAgent.tar.bz2", 0, 0)')
        logger.trace('Step 2')
        stdout = preinstalled_meter.sql_query("select * from OVERLAYSETUP where UID=25")
        assert stdout[-1].split("|") == values,'Insertion of values to containersetup table is unsuccessful'
        logger.trace('Step 3')
        preinstalled_meter.sql_query("insert into CONTAINEROVERLAY (GroupId, ContainerUID, OverlayUID, LoadIndex) values (1, 50593792,25, 15)")
        logger.trace('Step 4')
        try:
            stop_container(preinstalled_meter)
        finally:
            preinstalled_meter.command('dbus-send --type=signal --system --dest=com.itron.museplatform.ContainerManager /com/itron/museplatform/ContainerManager com.itron.museplatform.ContainerManager.Refresh')
            stop = time.time() + (5*60)
            while time.time()<=stop:
                output = not '50593792' in Active_Containers(preinstalled_meter)
                if output:
                    break
                time.sleep(10)
            assert output, "Container 50593792 is still running"

        # Checking --> ContainerManager.txt File is available in the Folder.
        path="/mnt/pouch/LifeBoatLogs"
        log_time=time.time() + stop
        repeat=0
        while log_time>time.time():
            status = 'ContainerManager.txt' in preinstalled_meter.ls(path)
            if status:
                break
            else:
                logger.info(f'ContainerManager.txt is not available in {path}')
                repeat+=1
            
            if repeat%5==0:
                #  refresh Dataserver after the 50 sec if file is not found
                Dataserver_refresh(preinstalled_meter)
                repeat=0
            time.sleep(10)

        assert status,f'ContainerManager.txt is not available in {path}'

        logger.trace('Step 5')
        moniker = 'Reason: Overlay does not exist:'
        found = wait_for_eventlog_entry(preinstalled_meter, logger, test_start,
            '/mnt/pouch/LifeBoatLogs/ContainerManager.txt',
            moniker, 5*60)
        assert found, "message not found"

        moniker = f"Unable to start container {agent.container_id}"
        found = wait_for_eventlog_entry(preinstalled_meter, logger, test_start,
            '/mnt/pouch/LifeBoatLogs/ContainerManager.txt',
            moniker, 5*60)
        assert found, "message not found"
        
    finally:
        preinstalled_meter.sql_query("delete from OVERLAYSETUP where UID=25")
        preinstalled_meter.sql_query("delete from CONTAINEROVERLAY where OverlayUID=25")
        refresh_container(preinstalled_meter,logger,20*60)



