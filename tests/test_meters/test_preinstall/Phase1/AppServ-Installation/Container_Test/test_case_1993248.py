"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase1/AppServ-Installation
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/1993248
===================================================================================================
Test Case      : 1993248
Description    : Verify that MCD starts CMD 
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 - 
Verify that the CMD daemon is started by MCD daemon after the installation of any agent on an
AppService. Check the pid of CMD is running with the below command:# ps | grep -i ContainerManager\n

Step 2 - 
After successful installation , MCD should start the CMD. # ps | grep -i ContainerManager\n10978 containe
16188 S    ContainerManager --username=containerd_u --groupname=containerd_g

Step 3 - 
After killing CMD using SIG KILL , MCD should start CMD#pkill -PWR ContainerManager Check the
process running again using #ps | grep -i ContainerManager

Step 4 - 
CMD should start after sometime of manual killing.


===================================================================================================


"""
import pytest
from tests.test_meters.utils import install_agent_and_activate,refresh_container,P2P_AGENT,filter_ps,stop_container
import time

# AUTOGENERATED Test Case 1993248

# @pytest.mark.skip(reason="TODO: unimplemented test case")
@pytest.mark.regress_nightly
#@pytest.mark.regress_smoke
@pytest.mark.suite_id("1993280")
@pytest.mark.test_case("1993248")
def test_case(preinstalled_meter, logger):
    logger.trace("Executing Test Case 1993248 - Verify that MCD starts CMD ")
    logger.trace('Step 1')
    install_agent_and_activate(preinstalled_meter,logger,P2P_AGENT)
    cmd_pid_before = filter_ps(preinstalled_meter,'ContainerManager')
    logger.trace('Step 2')
    logger.trace("CMD PID before kill : "+cmd_pid_before[0][0])
    assert cmd_pid_before[0][0],"Container Manager is not running with PID"
    logger.trace('Step 3')

    preinstalled_meter.command('pkill -PWR ContainerManager')
    stop = time.time() + (5*60)
    
    while time.time()<=stop:
        cmd_pid_after = filter_ps(preinstalled_meter,'ContainerManager')
        value = cmd_pid_before[0][0] != cmd_pid_after[0][0] if cmd_pid_after else False
        if value :
            break
        time.sleep(10)
    assert value,"Timeout error waiting for condition"
    logger.trace('Step 4')
    logger.trace("CMD PID after kill : "+cmd_pid_after[0][0])
    assert int(cmd_pid_after[0][0]) > 0,"Container Manager is not running with PID after kill"

