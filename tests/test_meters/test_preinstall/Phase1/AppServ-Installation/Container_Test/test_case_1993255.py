"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase1/AppServ-Installation
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/1993255
===================================================================================================
Test Case      : 1993255
Description    : Negative:Run StopOneContainer giving an invalid container ID 
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 - 
Verify that StopOneContainer with invalid container UID should not stop the running container or
kill the CMD daemon

Step 2 - 
Should not stop the valid container which is running


===================================================================================================


"""
import pytest
import time
from tests.test_meters.utils import install_agent_and_activate,DI_TEST_AGENT,get_installed_agents,Active_Containers

# AUTOGENERATED Test Case 1993255

# @pytest.mark.skip(reason="https://dev.azure.com/itron/RnD/_workitems/edit/2940809")
@pytest.mark.regress_nightly
@pytest.mark.regress_smoke
@pytest.mark.suite_id("1993280")
@pytest.mark.test_case("1993255")
def test_case(preinstalled_meter, logger):
    logger.trace("Executing Test Case 1993255 - Negative:Run StopOneContainer giving an invalid container ID ")

    logger.trace('Step 1')
    agent = DI_TEST_AGENT
    invalid_container_id = "50593790abc"
    install_agent_and_activate(preinstalled_meter, logger, agent)

    agents_list = get_installed_agents(preinstalled_meter,logger)
    container_list = [agent.container_id for agent in agents_list]

    containers = list(dict.fromkeys(container_list))

    time_out=time.time() + 5*60
    while time_out>time.time():
        check = Active_Containers(preinstalled_meter)
        value = all(cid in check for cid in containers)
        if value:
            logger.info("All container is up")
            break
        time.sleep(10)
    assert value,'All container is not up'




    logger.trace('Step 2')
    before_container = Active_Containers(preinstalled_meter)

    #container Id is Invalid so the Error is collected and checked
    cmd =f"dbus-send --print-reply --system --dest=com.itron.museplatform.ContainerManager /com/itron/museplatform/ContainerManager com.itron.museplatform.ContainerManager.StopOneContainer string:{invalid_container_id}"
    error_checklist = ['DBus.Error.Failed',f'Cannot parse:[{invalid_container_id}] at ContainerManagerApplication.cpp']

    time_out=time.time() + 20
    while time_out>time.time():
        code,_,error= preinstalled_meter.command_all(cmd)
        value = all([err in  error[0] for err in error_checklist]) if error else False
        status = code ==1 and value
        if status :
            logger.info(f'Command is executed with DBus.Error')
            break
        time.sleep(2)

    assert status,'Command is not executed'

    after_container = Active_Containers(preinstalled_meter)
    assert after_container == before_container, "Command is effecting the Running Container"