
"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase1
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2004763
===================================================================================================
Test Case      : 2004763
Description    : Verify LXC container limits.
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 - 
Check the memory limits of each container from /sys/fs/cgroupls /sys/fs/cgroup/memory/lxc/50593792/#
cat  memory.limit_in_bytes\n# cat memory.max_usage_in_bytes\n# cat memory.usage_in_bytes

Step 2 - 
Verify the container s limits . make sure memory.limit is great than memory usageeg : # cat
memory.limit_in_bytes\n3608576\n# cat memory.max_usage_in_bytes\n1458176\n# cat
memory.usage_in_bytes\n1044480\n\n

===================================================================================================


"""
import pytest
import time
from tests.test_meters.utils import is_process_running,filter_ps,install_multiple_agents_and_activate,Third_Party_PubSub_AGENT,DI_TEST_AGENT,refresh_container
from tests.test_meters.rohan_utils import absolute_command

# AUTOGENERATED Test Case 2004763

# @pytest.mark.skip(reason="TODO: unimplemented test case")
@pytest.mark.regress_nightly
@pytest.mark.regress_smoke
@pytest.mark.suite_id("2002265")
@pytest.mark.test_case("2004763")
def test_case(preinstalled_meter, logger):
    logger.trace("Executing Test Case 2004763 - Verify LXC container limits.")
    logger.trace('Step 1')
    agent_list = [DI_TEST_AGENT,Third_Party_PubSub_AGENT]
    install_multiple_agents_and_activate(preinstalled_meter, logger, agent_list)
    Container_id=preinstalled_meter.ls("/tmp/container")
    Container_id=[x for x in Container_id if x.isnumeric()]

    time_out=time.time() + 5*60
    while time_out>time.time():
        check = []
        for i in Container_id:
            max_usage=absolute_command(preinstalled_meter,f"cat /sys/fs/cgroup/memory/lxc/{i}/memory.max_usage_in_bytes")[0]
            usage=absolute_command(preinstalled_meter,f"cat /sys/fs/cgroup/memory/lxc/{i}/memory.usage_in_bytes")[0]
            a = int(max_usage)>=int(usage)
            check.append(a)
        if all(check):
            break
        time.sleep(10)
        
    logger.trace('Step 2')
    assert check,"Container memory limit is not greater than memory usage"
        




    