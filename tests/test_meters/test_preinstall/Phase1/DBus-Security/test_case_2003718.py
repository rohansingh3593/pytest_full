"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase1
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2003718
===================================================================================================
Test Case      : 2003718
Description    : Verify that Container Manager does notify all system processes and daemons through the system Dbus service that the LXC Container is stopped
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 - 
Stop the container using below command: dbus-send --type=signal --system
--dest=com.itron.museplatform.ContainerManager /com/itron/museplatform/ContainerManager
com.itron.museplatform.ContainerManager.StopAllC\nontainer\n

Step 2 - 
All running Containers should be stopped

Step 3 - 
Check the below log : cdsEventLogDecoderV2 -f1 -c -i
/tmp/logs/ContainerManager/INFORMATION/ContainerManager.txt

Step 4 - 
ContainerManager shall include the ID and path of the LXC Container Dbus service of the LXC
Container into the notification message.\n\"{2022/06/23 06:34:49
[59169208.881]}\",\"None\",\"TargetLxcContainerInterface.cpp at [234](pid:1868/thr:1868): Stopped
the container with name 50593792.\",\"INFORMATION\",\"ContainerManager\",\"\",\"\",\"10.5.543.1
(Best Guess)\",\"MUSE\",\"43\",\"1868\"\n\"{2022/06/23 06:34:49
[59169208.907]}\",\"None\",\"GetContainerPath: Container ID 50593792 Path:unix:path=/tmp/container/5
0593792/container_bus_socket\",\"INFORMATION\",\"ContainerManager\",\"\",\"\",\"10.5.543.1 (Best
Guess)\",\"MUSE\",\"43\",\"1868\"\n\"{2022/06/23 06:34:49
[59169208.927]}\",\"None\",\"ContainerManagerApplication.cpp at [596](pid:1868/thr:1868):
SendContainerInfoSignal
StopContainerComplete\",\"INFORMATION\",\"ContainerManager\",\"\",\"\",\"10.5.543.1 (Best
Guess)\",\"MUSE\",\"43\",\"1868\"\n




===================================================================================================


"""
import pytest
from tests.test_meters.utils import install_agent_and_activate,is_process_running,HAN_AGENT,stop_container,refresh_container
from tests.test_meters.event_utils import get_meter_system_time, wait_for_eventlog_entry,wait_for_eventlog_entry_with_rotator

import time

# AUTOGENERATED Test Case 2003718

#@pytest.mark.skip(reason="get_meter_time shouldn't be used for getting the current time")
@pytest.mark.slow1020 # test takes 10 to 20 minutes
@pytest.mark.regress_nightly
@pytest.mark.regress_smoke
@pytest.mark.suite_id("2002265")
@pytest.mark.test_case("2003718")
def test_case(preinstalled_meter, logger):
    logger.trace("Executing Test Case 2003718 - Verify that Container Manager does notify all system processes and daemons through the system Dbus service that the LXC Container is stopped")
    
    agent = HAN_AGENT
    install_agent_and_activate(preinstalled_meter,logger,agent)

    test_start = get_meter_system_time(preinstalled_meter)
    logger.info("Start: %s", test_start)


    # checking ContainerManager.txt is present in the directory
    text_file="ContainerManager.txt"
    directory=f"/tmp/logs/ContainerManager/INFORMATION"
    dir_list=preinstalled_meter.ls(directory)
    assert text_file in dir_list ,f"{text_file} is not present in {directory} Directory"

    try:

        logger.trace('Step 1')
        preinstalled_meter.command("dbus-send --system --dest=com.itron.museplatform.ContainerManager /com/itron/museplatform/ContainerManager com.itron.museplatform.ContainerManager.StopAllContainer")
        stop = time.time() + 5*60
        while time.time()<=stop:
            output = not is_process_running(preinstalled_meter,"lxc-start")
            if output:
                break
            time.sleep(10)

        logger.trace('Step 2')

        assert output,"Containers is still running"

        logger.trace('Step 3')
        moniker = f'Stopped the container with name 50593792'
        file_name = '/tmp/logs/ContainerManager/INFORMATION/ContainerManager.txt'


        logger.trace('Step 4')
        # checking messaege in ContainerManager.txt and  ContainerManager.txt.*gz file
        found = wait_for_eventlog_entry(preinstalled_meter, logger, test_start,file_name,moniker, 5*60, do_assert=False)
        if not found:
            found = wait_for_eventlog_entry_with_rotator(preinstalled_meter, logger, test_start,file_name,moniker, 5*60,do_assert=False)

        assert found, "start message not found"

    finally:
        stop_container(preinstalled_meter)
        refresh_container(preinstalled_meter,logger,20*60)

