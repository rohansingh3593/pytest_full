"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase1
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2004765
===================================================================================================
Test Case      : 2004765
Description    : Verify if the flash limits are properly handled.
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 - 
Ensure an agent is installed & running using below command:
PS|grep Agent

Step 2 - 
Running agents will be listed

Step 3 -
Set a flash configuration to a specific capacity:

sqlite3 --header /usr/share/itron/database/muse01.db "update containersetup set TempFilesystemSizeBytes=100000"


Step 4 -

Step 5 - 
Verify the set value:
sqlite3 --header /usr/share/itron/database/muse01.db "select * from containersetup"


Step 6 -
GroupId|UID|DesiredState|ContainerStartDelayMS|TempFilesystemSizeBytes|PriorityLevel|IgnoreResourceUsage|FriendlyName|DbusConnectionType
1|50593792|1|0|100000|20|0|Itron|1

Step 7 -
reboot the meter

Step 8 -

Step 9 -
After reboot verify flash configuration capacity:
 df /tmp/container/50593792/

 Step 10 -
 Filesystem           1024-blocks    Used Available Use% Mounted on
tmpfs                      100(100*1024~=100000)        36        64  36% /tmp/container/50593792

Step 11 -
reset the flash configuration to default value & reboot the meter to apply changes:
 sqlite3 --header /usr/share/itron/database/muse01.db "update containersetup set TempFilesystemSizeBytes=800000"



===================================================================================================


"""
import pytest
import numpy
import math
from tests.test_meters.utils import install_agent,HAN_AGENT,install_agent_and_activate

# AUTOGENERATED Test Case 2004765

# @pytest.mark.skip(reason="TODO: unimplemented test case")
@pytest.mark.regress_nightly
@pytest.mark.slow1020 # test takes 10 to 20 minutes
@pytest.mark.containermgr # container manager test
#@pytest.mark.regress_smoke
@pytest.mark.suite_id("2002265")
@pytest.mark.test_case("2004765")
@pytest.mark.parametrize("agent_info", [HAN_AGENT])
def test_case(preinstalled_meter, logger, agent_info):
    logger.trace("Executing Test Case 2004765 - Verify if the flash limits are properly handled.")

    logger.trace('Step 1')
    logger.trace('Step 2')
    install_agent_and_activate(preinstalled_meter,logger,agent_info,force=True)
    try:
        default_TempFilesystemSizeBytes =preinstalled_meter.sql_query("select TempFilesystemSizeBytes from containersetup")
        logger.trace(default_TempFilesystemSizeBytes)
        logger.trace('Step 3')
        preinstalled_meter.sql_query("update containersetup set TempFilesystemSizeBytes=100000")
        logger.trace('Step 4')
        logger.trace('Step 5')
        TempFilesystemSizeBytes = preinstalled_meter.sql_query("select TempFilesystemSizeBytes from containersetup")
        logger.trace('Step 6')
        assert '100000' in TempFilesystemSizeBytes
        logger.trace('Step 7')
        preinstalled_meter.reboot_meter()
        logger.trace('Step 8')
        logger.trace('Step 9')
        df_output = preinstalled_meter.command("df /tmp/container/50593792/")
        size = int(df_output[1].split()[1])
        tol_size = size*1024
        abs_tol = (numpy.mod(tol_size,100000))
        logger.trace('Step 10')
        assert math.isclose(tol_size, 100000, abs_tol = abs_tol)

    finally:
        logger.trace('Step 11')
        preinstalled_meter.sql_query(f"update containersetup set TempFilesystemSizeBytes={default_TempFilesystemSizeBytes[0]}")
        preinstalled_meter.reboot_meter()