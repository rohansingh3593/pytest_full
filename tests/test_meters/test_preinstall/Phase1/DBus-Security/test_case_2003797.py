
"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase1
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2003797
===================================================================================================
Test Case      : 2003797
Description    : Verify if all the container and overlay configuration related tables are available
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 - 
sqlite3 --header /usr/share/itron/database/muse01.db \"select * from ContainerOverlay;\" \nsqlite3
--header /usr/share/itron/database/muse01.db \"select * from OverlaySetup;\" \nsqlite3 --header
/usr/share/itron/database/muse01.db \"select * from ContainerSetup;\" \nsqlite3 --header
/usr/share/itron/database/muse01.db \"select * from OverlayConfiguration;\"

Step 2 - 
All the tables should be available.


===================================================================================================


"""
import pytest
from tests.test_meters.utils import install_agent_and_activate,DI_TEST_AGENT

# AUTOGENERATED Test Case 2003797

# @pytest.mark.skip(reason="TODO: unimplemented test case")
@pytest.mark.regress_nightly
#@pytest.mark.regress_smoke
@pytest.mark.suite_id("2002265")
@pytest.mark.test_case("2003797")
def test_case(preinstalled_meter, logger):
    logger.trace("Executing Test Case 2003797 - Verify if all the container and overlay configuration related tables are available")

    install_agent_and_activate(preinstalled_meter,logger,DI_TEST_AGENT)

    logger.trace('Step 1')
    tables=["ContainerOverlay", "OverlaySetup", "ContainerSetup", "OverlayConfiguration"]
    length = lambda a : True if(len(preinstalled_meter.sql_query(f"select * from {a}"))>0) else False
    logger.trace(length)
    logger.trace('Step 2')
    for i in tables:
        assert length(i) , f"{i} tables is not available"