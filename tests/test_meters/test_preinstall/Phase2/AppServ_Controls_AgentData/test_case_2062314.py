"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase2
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2062314
===================================================================================================
Test Case      : 2062314
Description    : Verify that upon the send request AppServ shall check from the corresponding DI Policy file what type of permission the requesting AgentID has to the said resource for the assigned FeatureID in the request
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 -
Ensure the permission is available in DIPolicy File,sqlite3 --header
/usr/share/itron/database/muse01.db \"select * from DIPolicyFile\"<Permission
name=\"Data:Subscription:Metrology:Partial\"/>\n<Permission name=\"Network:Upstream\"/>\n

Step 2 -

Step 3 -
Update the config file (attached) to enable Data and Events

Step 4 -
Ensure  AgentData and AgentEvents table has entries. sqlite3 --header
/usr/share/itron/database/muse01.db \"select * from AgentData\" sqlite3 --header
/usr/share/itron/database/muse01.db \"select * from AgentEvent\"

Step 5 -
Agent data and events table should be getting entries


# ===================================================================================================

    """

import pytest
import time
from tests.test_meters.utils import install_agent_and_activate, DI_TEST_AGENT
from tests.test_meters.rohan_utils import Config_push,agent_Config_collect,file_content_change
# AUTOGENERATED Test Case 2062308

@pytest.mark.skip(reason="TODO: unimplemented test case")
@pytest.mark.regress_nightly
# @pytest.mark.regress_smoke
@pytest.mark.suite_id("2062305")
@pytest.mark.test_case("2062314")
def test_case(preinstalled_meter ,logger,workdir):
    logger.trace("Executing Test Case 2062314 - Verify that upon the send request AppServ shall check from the corresponding DI Policy file what type of permission the requesting AgentID has to the said resource for the assigned FeatureID in the request")
    logger.trace('Step 1')
    agent = DI_TEST_AGENT
    install_agent_and_activate(preinstalled_meter,logger,agent)
    featureid = 50593776

    # Getting the Agent ID form the Agent Information Table
    query=f'select AgentUID from agentinformation where AgentName = "{agent.name}";'
    agent_id=preinstalled_meter.sql_query(query)[0]

    events_initial_max_id =preinstalled_meter.sql_query(f"select max(ID) from AgentEvents")
    data_initial_max_id =preinstalled_meter.sql_query(f"select max(ID) from Agentdata")
    query=f"select PolicyFile from DIPolicyFile where agentid ={agent_id}"
    agent_Policy_file=preinstalled_meter.sql_query(query)
    logger.trace('Step 2')
    permissions=['<Permission name="Data:Subscription:Metrology:Partial"/>','<Permission name="Network:Upstream"/>']

    for pr in permissions:
        assert pr in agent_Policy_file,f'{pr} are not available in the {agent.name} policy file '

    old_lid='parameter name="EventActive" value="0"'
    new_lid='parameter name="EventActive" value="1"'
    old_Event_Frequency='parameter name="EventFrequency" value="00:05:00"'
    new_Event_Frequency='parameter name="EventFrequency" value="00:00:15"'
    old_Active_Alarm = 'parameter name="AlarmActive" value="0"'
    new_Active_Alarm = 'parameter name="AlarmActive" value="1"'
    old_Alarm_Frequency='parameter name="AlarmFrequency" value="00:05:00"'
    new_Alarm_Frequency='parameter name="AlarmFrequency" value="00:00:15"'
    old_Periodic_Active='parameter name="PeriodicActive" value="0"'
    new_Periodic_Active='parameter name="PeriodicActive" value="1"'
    old_Periodic_Frequency='parameter name="PeriodicFrequency" value="00:05:00"'
    New_Periodic_Frequency='parameter name="PeriodicFrequency" value="00:00:15"'
    old_Periodic_StartTime='parameter name="PeriodicStartTime" value="06:00"'
    new_Periodic_StartTime='parameter name="PeriodicStartTime" value="00:01"'
    old_Flash_IntegrityActive='parameter name="FlashIntegrityActive" value="0"'
    new_Flash_IntegrityActive='parameter name="FlashIntegrityActive" value="1"'
    old_Periodic_EndTime='parameter name="PeriodicEndTime" value="21:00"'
    new_Periodic_EndTime='parameter name="PeriodicEndTime" value="23:59"'


    try:

        # Get configuration file from the featureConfiguration table
        file = agent_Config_collect(preinstalled_meter,agent,featureid,base_dir=workdir,force=True)


        logger.trace('Step 3')
        # Update the configuration file
        file_content_change(preinstalled_meter,file,old_lid,new_lid)
        file_content_change(preinstalled_meter,file,old_Event_Frequency,new_Event_Frequency)
        file_content_change(preinstalled_meter,file,old_Active_Alarm,new_Active_Alarm)
        file_content_change(preinstalled_meter,file,old_Alarm_Frequency,new_Alarm_Frequency)
        file_content_change(preinstalled_meter,file,old_Periodic_Active,new_Periodic_Active)
        file_content_change(preinstalled_meter,file,old_Periodic_Frequency,New_Periodic_Frequency)
        file_content_change(preinstalled_meter,file,old_Periodic_StartTime,new_Periodic_StartTime)
        file_content_change(preinstalled_meter,file,old_Flash_IntegrityActive,new_Flash_IntegrityActive)
        file_content_change(preinstalled_meter,file,old_Periodic_EndTime,new_Periodic_EndTime)

        # Push configuration file to the featureConfiguration table
        Config_push(preinstalled_meter,featureid)


        
        logger.trace('Step 4')

        stop = time.time() + (5*60)
        c = 0
        while time.time()<=stop:
            if events_initial_max_id[0] != '':
                AgentEvents_value=preinstalled_meter.sql_query(f"select Data from AgentEvents where agentid ={agent_id} and featureid={featureid} and data LIKE \"92#%\" and ID > {events_initial_max_id[0]}")
            else:
                AgentEvents_value=preinstalled_meter.sql_query(f"select Data from AgentEvents where agentid ={agent_id} and featureid={featureid} and data LIKE \"92#%\"")
            if data_initial_max_id[0] != '':
                Agentdata_value=preinstalled_meter.sql_query(f"select Data from Agentdata where agentid ={agent_id} and featureid={featureid} and data LIKE \"92#%\" and ID > {data_initial_max_id[0]}")
            else:
                Agentdata_value=preinstalled_meter.sql_query(f"select Data from Agentdata where agentid ={agent_id} and featureid={featureid} and data LIKE \"92#%\"")
            status = AgentEvents_value and Agentdata_value
            if status:
                break
            time.sleep(5)
        assert status,'Agent data and events table is not getting entries'



    finally:

        # Update the Data file at the FeatureConfiguration table at Initial State
        agent_Config_collect(preinstalled_meter,agent,featureid,base_dir=workdir,force=True)
        Config_push(preinstalled_meter,featureid)

    