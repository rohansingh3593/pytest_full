"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase2
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2066958
===================================================================================================
Test Case      : 2066958
Description    : Verify the behavior ApplicationService when the ApplicationService  is upgraded from one version to another 
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 - 
Ensure DataServer is running with AppServ Version eg : 1.7.400.0

Step 2 - 
# ps | grep -i datas\n22054 dserver_ 18484 R    /usr/bin/02020001/DataServer_Daemon
--username=dserver_u --groupname=dserver_g\n

Step 3 - 
Install DITest Agent and ensure it is functional

Step 4 - 
# ps | grep -i agent\n22535 containe  7232 S    /usr/bin/0302ff80/DITestAgent_Daemon\n

Step 5 - 
Upgrade the AppServices with New Version eg : 1.7.401.0 and Ensure DataServer and Agent are running

Step 6 - 
# ps | grep -i datas\n22054 dserver_ 18484 R    /usr/bin/02020001/DataServer_Daemon
--username=dserver_u --groupname=dserver_g# ps | grep -i agent\n22535 containe  7232 S
/usr/bin/0302ff80/DITestAgent_Daemon


===================================================================================================


"""
import pytest,time
from tests.test_meters.utils import install_agent_and_activate ,DI_TEST_AGENT,filter_ps,wait_for_agents
from tests.test_meters.rohan_utils import absolute_command

# AUTOGENERATED Test Case 2066958

# @pytest.mark.skip(reason="TODO: unimplemented test case")
@pytest.mark.regress_nightly
@pytest.mark.regress_smoke
@pytest.mark.suite_id("2062305")
@pytest.mark.test_case("2066958")
 
@pytest.mark.parametrize("agent_info", [DI_TEST_AGENT])
def test_case(preinstalled_meter, logger, di_version,agent_info,di_package_2k):
    logger.trace("Executing Test Case 2066958 - Verify the behavior ApplicationService when the ApplicationService  is upgraded from one version to another ")
    logger.trace('Step 1')
    absolute_command(preinstalled_meter,'ps | grep -i datas')
    ret=filter_ps(preinstalled_meter, "DataServer_Daemon")
    stdout = absolute_command(preinstalled_meter,'TransactionProcess --event="MUSE_V1;ReadLid;ILID_DATASERVER_APPSERV_FW_VERSION;"')
    previous_version = stdout[0].split('=')
    logger.trace('Step 2')
    assert 'DataServer_Daemon' in ret[0][4]
    logger.trace('Step 3')
    install_agent_and_activate(preinstalled_meter,logger,agent_info)
    """checking agent is up or not"""
    wait_for_agents(preinstalled_meter, logger, [DI_TEST_AGENT], 20*60)
    logger.trace('Step 4')
    logger.trace('Step 5')
    preinstalled_meter.install(file=di_package_2k)
    fwver, cur_asver = preinstalled_meter.version_info()
    assert previous_version[1] != cur_asver,"Appserve is not upgraded properly"
    logger.trace('Step 6')
    stop=time.time()+3*60
    while time.time()<=stop:
        stdout = absolute_command(preinstalled_meter,'ps | grep -i datas')
        datas_output = [x for x in stdout if('/usr/bin/' in x.split()[4] and 'DataServer_Daemon' in x.split()[4])]
        if(len(datas_output)!=0):
            break
        time.sleep(10)
    assert len(datas_output) !=0,'datas is not up' 
    wait_for_agents(preinstalled_meter, logger, [DI_TEST_AGENT], 20*60)

