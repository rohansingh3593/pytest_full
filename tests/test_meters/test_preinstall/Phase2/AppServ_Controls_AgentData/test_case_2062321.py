"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase2
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2062321cd
===================================================================================================
Test Case      : 2062321
Description    : Verify the behavior of the AppServ, considering that the requesting AgentID has permission to send the FeatureID data to Upstream.
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 -
Ensure the permissions enabled from DITestAgent policy file (attached):

Step 2 -
<Permission name=\"Data:Subscription:Metrology:Partial\"/>\n<Permission name=\"Network:Upstream\"/>

Step 3 -
update the config file (attached) \n

Step 4 -
# sqlite3 --header /usr/share/itron/database/muse01.db \"select * from AgentFeatureDataCounter\"\n

Step 5 -
AgentId|FeatureId|DailyUpstreamDataSent|P2PBroadcastDataSentPlc|P2PBroadcastDataSentRf|P2PUnicastDat
aSentRf|DailyAlarmMessagesSent|P2PBroadcastStaticDataSentPlc|P2PBroadcastStaticDataSentRf|P2PUnicast
StaticDataSentRf|P2PBroadcastIBDailyDataSentCounterPlc|P2PBroadcastIBDailyDataSentCounterRf|P2PUnica
stDailyDataSentCounterRf|P2PBroadcastIB1hrDataSentCounterPlc|P2PBroadcastIB1hrDataSentCounterRf|P2PU
nicast1hrDataSentCounterRf|TimeStamp\n50528128|50593776|2291|0|0|0|22|0|0|0|0|0|0|0|0|0|1664922933

===================================================================================================


"""
import pytest
import time
from tests.test_meters.utils import install_agent_and_activate, refresh_container, DI_TEST_AGENT,Active_Containers
from tests.test_meters.rohan_utils import Config_push,agent_Config_collect,file_content_change,Container_stop,Dataserver_refresh


# AUTOGENERATED Test Case 2062321

# @pytest.mark.skip(reason="TODO: Assertion Error - Timeout for condition check ")
@pytest.mark.regress_nightly
@pytest.mark.regress_smoke
@pytest.mark.suite_id("2062305")
@pytest.mark.test_case("2062321")
def test_case(preinstalled_meter, logger, workdir):
    logger.trace("Executing Test Case 2062321 - Verify the behavior of the AppServ, considering that the requesting AgentID has permission to send the FeatureID data to Upstream.")
    agent = DI_TEST_AGENT
    featureId = '50593776'
    install_agent_and_activate(preinstalled_meter,logger,agent)

    logger.trace('Step 1')

    # Getting the Agent ID form the Agent Information Table
    query=f'select AgentUID from agentinformation where AgentName = "{agent.name}";'
    agent_id=preinstalled_meter.sql_query(query)[0]

    cmd = f"select PolicyFile from DIPolicyFile where agentid={agent_id}"
    Di_policy_file = ' '.join(preinstalled_meter.sql_query(cmd))
    lids=['<Permission name="Data:Subscription:Metrology:Partial"/>','<Permission name="Network:Upstream"/>']

    logger.trace('Step 2')
    assert all(item in Di_policy_file for item in lids),'all Permission is present in the agent policy file'

    logger.trace('Step 3')
    query = f"select DailyUpstreamDataSent from AgentFeatureDataCounter where agentid={agent_id} and FeatureId={featureId}"
    DailyUpstreamDataSent_before = preinstalled_meter.sql_query(query)
    if not DailyUpstreamDataSent_before:
        DailyUpstreamDataSent_before = ['0']

    try:

        # Get configuration file from the featureConfiguration table
        file = agent_Config_collect(preinstalled_meter,agent,featureId,base_dir=workdir)

        # Update the configuration file
        file_content_change(preinstalled_meter,file,'<parameter name="AlarmActive" value="0"/>','<parameter name="AlarmActive" value="1"/>')
        file_content_change(preinstalled_meter,file,'<parameter name="AlarmFrequency" value="00:05:00"/>','<parameter name="AlarmFrequency" value="00:00:05"/>')



        # Push configuration file to the featureConfiguration table
        Config_push(preinstalled_meter,featureId)
        logger.trace('Step 4')
        stop = time.time() + (5*60)
        while time.time()<=stop:
            query = f"select DailyUpstreamDataSent from AgentFeatureDataCounter where agentid={agent_id} and FeatureId={featureId}"
            DailyUpstreamDataSent_after = preinstalled_meter.sql_query(query)
            logger.info('DailyUpstreamDataSent_before is %s and DailyUpstreamDataSent_after is %s', DailyUpstreamDataSent_before, DailyUpstreamDataSent_after)
            status = DailyUpstreamDataSent_after and  int(DailyUpstreamDataSent_before[0]) < int(DailyUpstreamDataSent_after[0])
            if status:
                break
            time.sleep(10)
        logger.trace('Step 5')
        assert status, "Timeout for condition check"

    finally:

        # Update the Data file at the FeatureConfiguration table at Initial State
        agent_Config_collect(preinstalled_meter,agent,featureId,base_dir=workdir,force=True)
        Config_push(preinstalled_meter,featureId)
