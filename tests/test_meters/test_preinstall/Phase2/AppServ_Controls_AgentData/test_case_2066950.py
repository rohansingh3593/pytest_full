"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase2
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2066950
===================================================================================================
Test Case      : 2066950
Description    : Verify the behavior of the ApplicationService when requesting AgentID does not have permission to the said resource
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 -
Remove the permission from the Policy table
<Permission name="Data:Subscription:Metrology:Partial"/>
 restart DataServer and SwitchDIIint.sh

Note  : Any Agent can be used

Step 2 -
ApplicationService shall add an entry with the AgentID and violation type to DI policyViolationStatistics  table (constraint 4), and response to the requesting DI Agent application with a descriptive error code (65539)
50528128|0|1680697318|4|Data:Subscription:Metrology|1|0




===================================================================================================


"""
import pytest,time
from tests.test_meters.utils import install_agent_and_activate, refresh_container, DI_TEST_AGENT,Active_Containers
from tests.test_meters.rohan_utils import Config_push,agent_Config_collect,file_content_change,Container_stop,Dataserver_refresh,All_Agent_Table_Refresh,is_log_file_available,agent_policy_collect,policy_file_push,absolute_command

# AUTOGENERATED Test Case 2066950

# @pytest.mark.skip(reason="TODO: unimplemented test case")
@pytest.mark.regress_nightly
@pytest.mark.regress_smoke
@pytest.mark.suite_id("2062305")
@pytest.mark.test_case("2066950")
def test_case(preinstalled_meter, logger, workdir):
    logger.trace("Executing Test Case 2066950 - Verify the behavior of the ApplicationService when requesting AgentID does not have permission to the said resource")


    agent = DI_TEST_AGENT
    install_agent_and_activate(preinstalled_meter,logger,DI_TEST_AGENT)
    Feature_id = '50593776'

    # Getting the Agent ID form the Agent Information Table
    query=f'select AgentUID from agentinformation where AgentName = "{agent.name}";'
    agent_id=preinstalled_meter.sql_query(query)[0]

    logger.trace('Step 1')
    old_word = f'<Permission name="Data:Subscription:Metrology:Partial"/>'
    try:
       # Get the policy file
        file = agent_policy_collect(preinstalled_meter,agent,base_dir=workdir)

        # Adding the some lids in the agent policy file table.
        file_content_change(preinstalled_meter,file,old_word)


       # Update the policy file
        policy_file_push(preinstalled_meter,agent)

        # Get configuration file from the featureConfiguration table
        file = agent_Config_collect(preinstalled_meter,agent,Feature_id,base_dir=workdir)

        # Update the configuration file
        file_content_change(preinstalled_meter,file,'<parameter name="EventActive" value="0"/>','<parameter name="EventActive" value="1"/>')
        file_content_change(preinstalled_meter,file,'<parameter name="EventFrequency" value="00:05:00"/>','<parameter name="EventFrequency" value="00:00:05"/>')
        file_content_change(preinstalled_meter,file,'<parameter name="AlarmActive" value="0"/>','<parameter name="AlarmActive" value="1"/>')
        file_content_change(preinstalled_meter,file,'<parameter name="AlarmFrequency" value="00:05:00"/>','<parameter name="AlarmFrequency" value="00:00:05"/>')
        file_content_change(preinstalled_meter,file,'<parameter name="PeriodicActive" value="0"/>','<parameter name="PeriodicActive" value="1"/>')
        file_content_change(preinstalled_meter,file,'<parameter name="PeriodicStartTime" value="06:00"/>','<parameter name="PeriodicStartTime" value="01:00"/>')

        # Push configuration file to the featureConfiguration table
        Config_push(preinstalled_meter,Feature_id)

        is_log_file_available(preinstalled_meter,agent)

        query = f"select ViolationParameter from PolicyViolationStatistics where agentid = {agent_id} and ConstraintID = 4 order by timestamp desc limit 1"
        permission_violation = 'Data:Subscription:Metrology'


        time_out=time.time() + 5*60
        c = 0
        value1 =False
        value2 =False

        while time_out>time.time():
            if not value1:
                ViolationParameter = preinstalled_meter.sql_query(query)
                value1 = ViolationParameter and ViolationParameter[0] == permission_violation

            if not value2:
                logger.info('checking for 65539 error code')
                cmd = f'cat /tmp/container/50593792/rootfs/tmp/agent/0302ff80/0302ff80_log'
                stdout = absolute_command(preinstalled_meter,cmd)
                error_code = ' '.join(stdout)
                value2 = '65539' in error_code

            if value1 and value2 :
                break
            else:
                c+=1
            if c==5:
                # it will refresh all agent table 25 sec if not found
                All_Agent_Table_Refresh(preinstalled_meter,agent)
                c=0
            time.sleep(5)

        assert value1,"There is no violation register in policyviolationstatistics with constraint id 4"

        logger.trace('Step 2')
        assert value2, "Error code is not find in the log file"

    finally:
        # Update the policy file at the DIPolicyFile table at initial State
        agent_policy_collect(preinstalled_meter,agent,base_dir=workdir,force=True)
        policy_file_push(preinstalled_meter,agent)

        # Update the Data file at the FeatureConfiguration table at Initial State
        agent_Config_collect(preinstalled_meter,agent,Feature_id,base_dir=workdir,force=True)
        Config_push(preinstalled_meter,Feature_id)