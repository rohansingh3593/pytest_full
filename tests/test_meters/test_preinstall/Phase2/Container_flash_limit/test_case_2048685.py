"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase2
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2048685
===================================================================================================
Test Case      : 2048685
Description    : Verify 'container_flash_limit' attribute added to AgentDirectorContext data with HW4.2
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 - 
Verify \'container_flash_limit\' attribute added to AgentDirectorContext data #cd
/proc/driver/itron-nvm/#cat emmc

Step 2 - 
1

Step 3 - 
Verify container  flash emmc limit TransactionProcess
--event=\"MUSE_V1;ReadLid;ILID_CONTAINER_MAX_FLASH_EMMC_LIMIT_KB;\"

Step 4 - 
1.5 MB

Step 5 - 
Verify container maximum flash limit TransactionProcess
--event=\"MUSE_V1;ReadLid;ILID_CONTAINER_MAX_FLASH_LIMIT_KB;\"

Step 6 - 
~40 MB


===================================================================================================


"""
import pytest
from tests.test_meters.rohan_utils import absolute_command

# AUTOGENERATED Test Case 2048685

# @pytest.mark.skip(reason="TODO: unimplemented test case")
@pytest.mark.regress_nightly
# @pytest.mark.regress_smoke
@pytest.mark.suite_id("2048656")
@pytest.mark.test_case("2048685")
def test_case(preinstalled_meter, logger):
    logger.trace("Executing Test Case 2048685 - Verify \'container_flash_limit\' attribute added to AgentDirectorContext data with HW4.2")

    logger.trace('Step 1')
    stdout = absolute_command(preinstalled_meter,'cd /proc/driver/itron-nvm/;cat emmc')
    logger.trace('Step 2')
    assert '1' in stdout
    logger.trace('Step 3')
    stdout = absolute_command(preinstalled_meter,'TransactionProcess --event="MUSE_V1;ReadLid;ILID_CONTAINER_MAX_FLASH_EMMC_LIMIT_KB;"')
    logger.trace('Step 4')
    assert '1500000' in stdout[0], 'Size not matched'
    logger.trace('Step 5')
    stdout = absolute_command(preinstalled_meter,'TransactionProcess --event="MUSE_V1;ReadLid;ILID_CONTAINER_MAX_FLASH_LIMIT_KB;"')
    logger.trace('Step 6')
    assert '40000' in stdout[0], 'Size not matched'


    
    
    
    
    
    








