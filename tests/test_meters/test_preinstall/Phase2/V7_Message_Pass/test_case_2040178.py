
"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase2
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2040178
===================================================================================================
Test Case      : 2040178
Description    : Check the there were active v7 subscription on Database
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 - 
Login to the database mode using sqlite3 -header /usr/share/itron/database/muse01.db

Step 2 - 
User can able to login to sqlite mode# sqlite3 -header /usr/share/itron/database/muse01.db\nSQLite
version 3.20.1 2017-08-24 16:21:36\nEnter \".help\" for usage hints.\nsqlite>

Step 3 - 
Check the AgentRegistration information from the database select * from AgentRegistration;

Step 4 - 
Agent which has capable of retreive v7 meterology data should be present  select * from
AgentRegistration;\nId|Name|Description|Permissions|State\n50528130|V7Agent|V7 Test
Agent|0|0\n50528132|MetrologyDataAgent|Metrology Data Agent|0|0\n

Step 5 - 
Get the V7 retreving feature and its id from the Manifest file (ref : attached)

Step 6 - 
Manifest file has feature id of all the features that this agent possess

Step 7 - 
Check the FeatureConfiguration information of this featureselect * from FeatureConfiguration where
FeatureId =\'result from step3\'eg : select * from FeatureConfiguration where FeatureId
=\'50593789\';

Step 8 - 
# unzip V7Agent_0.3.9.2609897068_TS.zip\nArchive:  V7Agent_0.3.9.2609897068_TS.zip\nreplace
ReleaseManifest.xml? [y]es, [n]o, [A]ll, [N]one, [r]ename: ^C\n# unzip -o
V7Agent_0.3.9.2609897068_TS.zip | grep ReleaseManifest.xml\n  inflating: ReleaseManifest.xml\n
inflating: ReleaseManifest.xml.sig\n# cat ReleaseManifest.xml | grep
feature\n\t\t\t<features>\n\t\t\t\t<feature name=\"V7\"
feature=\"50593789\">\n\t\t\t\t</feature>\n\t\t\t\t<feature name=\"GenericFeature\"
feature=\"50536322\">\n\t\t\t\t</feature>\n\t\t\t\t<feature name=\"CommandExecution\"
feature=\"50540418\">\n\t\t\t\t</feature>\n\t\t\t\t<feature name=\"MetrologyInfo\"
feature=\"50544514\">\n\t\t\t\t</feature>\n\t\t\t\t<feature name=\"ConfigFeature\"
feature=\"50548610\">\n\t\t\t\t</feature>\n\t\t\t</features>\n# \n


===================================================================================================


"""
import pytest
from tests.test_meters.utils import V7_AGENT,install_agent_and_activate
from tests.test_meters.rohan_utils import agent_file,absolute_command
import re
import time

# AUTOGENERATED Test Case 2040178

# @pytest.mark.skip(reason="TODO: unimplemented test case")
@pytest.mark.regress_nightly
# @pytest.mark.regress_smoke
@pytest.mark.suite_id("2040169")
@pytest.mark.test_case("2040178")
def test_case(preinstalled_meter, logger, workdir ):
    logger.trace("Executing Test Case 2040178 - Check the there were active v7 subscription on Database")


    logger.trace('Step 1')
    cmd = 'sqlite3 --version'
    std_out = absolute_command(preinstalled_meter,cmd)
    logger.info(std_out)

    logger.trace('Step 2')
    logger.trace('Step 3')

    agent=V7_AGENT
    install_agent_and_activate(preinstalled_meter,logger,agent)

    logger.trace('Step 4')
    time_out=time.time() + 5*60
    query = 'select name from AgentRegistration'
    while time_out>time.time() :
        reg_list = preinstalled_meter.sql_query(query)
        status = agent.name in reg_list
        if status :
            break
        time.sleep(10)
    assert status , f"{agent.name} is not register in the AgentRegistration table"

    try :
        logger.trace('Step 5')
        file = agent_file(preinstalled_meter,agent,'ReleaseManifest.xml',base_dir=workdir,meter_dir='/root')

        logger.trace('Step 6')
        manifest_file_content = "\n".join(absolute_command(preinstalled_meter,f"cat {file} | grep -i feature | grep -v MetrologyInfo| grep -v ConfigFeature"))  
        agent_feature_id = re.findall(r'feature="(\d+)"',manifest_file_content)
        logger.info(agent_feature_id)
        logger.info('FeatureId from Agent Manifest file : %s',agent_feature_id)

    finally:
        absolute_command(preinstalled_meter,f"rm {file}")

    logger.trace('Step 7')

    query = f'select FeatureId from FeatureConfiguration'
    result = preinstalled_meter.sql_query(query)
    logger.info('FeatureId from FeatureConfiguration : %s',result)

    logger.trace('Step 8')
    assert all([fid in result for fid in agent_feature_id ]),'All agent Feature id is not available in the feature configuration table'





