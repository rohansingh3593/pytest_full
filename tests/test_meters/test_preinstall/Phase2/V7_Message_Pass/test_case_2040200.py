
"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase2
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2040200
===================================================================================================
Test Case      : 2040200
Description    : DataServerMetrologyPlugin shall be trigger on a periodic event 1/s if there is an active subscription
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : Completing Pull Request 159508 and the associated work items.
Steps:
===================================================================================================
Step 1 - 
Precondition:1. AppServices should be installed already2. DataServer daemon should be up and
running3. V7-Agent should be installed and running on the container and it also subscribed to the v7
feature

Step 2 - 
All 3 Preconditions were satisfied

Step 3 - 
Check this ILID_DATASERVER_V7_MESSAGE_POLL_PERIOD is configured as 1/s using the below command\n
TransactionProcess --event=\"MUSE_V1;ReadLid;ILID_DATASERVER_V7_MESSAGE_POLL_PERIOD_SECS;\"

Step 4 - 
return value 1

Step 5 - 
Check the poll period of message queue by retreiving Data.runningCounter using v7-toolv7-tool 3
(ran this twice)(ignore step)

Step 6 - 
Compare the sampleRecord.Data.runningCounter from both the outputs to understand the polling time

Step 7 - 
Or Check the Cout log from the installed v7agentexample:tail -F
/tmp/container/50593792/rootfs/tmp/agent/0302ff82/0302ff82_log

Step 8 - 


Step 9 - 


Step 10 - 



===================================================================================================


"""
import pytest
from tests.test_meters.utils import read_lid,is_process_running,V7_AGENT,install_agent_and_activate,Active_Containers
from tests.test_meters.rohan_utils import is_log_file_available,All_Agent_Table_Refresh,Dataserver_refresh
import time

# AUTOGENERATED Test Case 2040200

@pytest.mark.skip(reason="TODO: unimplemented test case")
@pytest.mark.regress_nightly
# @pytest.mark.regress_smoke
@pytest.mark.suite_id("2040169")
@pytest.mark.test_case("2040200")
def test_case(preinstalled_meter, logger, di_version):
    logger.trace("Executing Test Case 2040200 - DataServerMetrologyPlugin shall be trigger on a periodic event 1/s if there is an active subscription")

    logger.trace('Step 1')
    agent=V7_AGENT
    install_agent_and_activate(preinstalled_meter,logger,agent)
    agent_list=preinstalled_meter.sql_query("select AgentName from agentinformation")

    logger.trace('Step 2')
    assert di_version == preinstalled_meter.version_info()[1], "AppSerices package Installation should be successful"
    assert is_process_running(preinstalled_meter,f"DataServer_Daemon"),"ContainerManager is still allowed to start if there are no overlays mapped to the container "
    assert agent.name in agent_list,f"{agent.name} is not  be installed"
    assert agent.container_id in Active_Containers(preinstalled_meter),f"{agent.container_id} Container is not running"


    logger.trace('Step 3')
    lid='ILID_DATASERVER_V7_MESSAGE_POLL_PERIOD_SECS'
    value=read_lid(preinstalled_meter,logger,lid)

    logger.trace('Step 4')
    assert value==1,f"{lid} is not return a value 1"

    #  Ignore step
    logger.trace('Step 5')
    logger.trace('Step 6')

    logger.trace('Step 7')
    logger.trace('Step 8')
    log_file = is_log_file_available(preinstalled_meter,agent)
    messages = ['First Message','Second Message','Third Message']
    c=0
    msg_count=0
    stop = time.time() + (5*60)
    while time.time()<=stop:
        code,logs = preinstalled_meter.command_with_code(f'cat {log_file}')
        logger.info("v7 logs %s",logs)
        logs = " ".join(logs)
        message = all(message in logs for message in messages)
        if message and code == 0:
            msg_count+=1
        else:
            c+=1
        if c%5==0:
            # it will refresh the dataserver after 25 sec if not found
            # Restart the DataServer
            Dataserver_refresh(preinstalled_meter)                
        if c==19:
            # it will refresh all agent table 95 min if not found
            All_Agent_Table_Refresh(preinstalled_meter,agent)                
            c=0
        if msg_count >3:
            break
        logger.info("sleep for 10sec")
        time.sleep(5)
    assert message, "Timeout for condition check"
