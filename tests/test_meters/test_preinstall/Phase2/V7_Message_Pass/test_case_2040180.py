
"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase2
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2040180
===================================================================================================
Test Case      : 2040180
Description    : DataServerMetrologyPlugin shall able to read upto 900 V7 Messages from message queue using V7-Agent
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : Completing Pull Request 159508 and the associated work items.
Steps:
===================================================================================================
Step 1 - 
Install the AppServices package on a Gen5Riva Meter

Step 2 - 
Installation should be succesful

Step 3 - 
Check the DataServer daemon has started functionalps | grep -i dataserver

Step 4 - 
Valid dataserver process should be running

Step 5 - 
Change the LID from defautl value of 900 to 10 using the following command TransactionProcess
--event=\"MUSE_V1;WriteLid;ILID_DATASERVER_V7_MESSAGE_READ_LIMIT;10\"

Step 6 - 
Changes should be reflecting on the LID after monit restart DataServer

Step 7 - 
Install the agent which capable of fetching the V7 metrology data

Step 8 - 
Agent installation should be successful

Step 9 - 
Validate the V7 meterology samples using the installed agent

Step 10 - 
Agent shall able to fetch recent 10 metrology data

Step 11 - 
Repeat the step 5 with more number of samples

Step 12 - 
Agent still able to fetch ten new samples only

Step 13 - 
Modify the ILID_DATASERVER_V7_MESSAGE_READ_LIMIT to different value

Step 14 - 


Step 15 - 
Repeat the steps 5 and 6 to validate the samples are as per the LID configuration

Step 16 - 



===================================================================================================


"""
import pytest
from tests.test_meters.utils import is_process_running,V7_AGENT,install_agent_and_activate,refresh_container,Active_Containers,write_lid
from tests.test_meters.rohan_utils import Container_stop,Dataserver_refresh,is_log_file_available,All_Agent_Table_Refresh,absolute_command
import re
import time

# AUTOGENERATED Test Case 2040180

@pytest.mark.skip(reason="v7-logs are not proper, random tc fail")
@pytest.mark.regress_nightly
# @pytest.mark.regress_smoke
@pytest.mark.suite_id("2040169")
@pytest.mark.test_case("2040180")
def test_case(preinstalled_meter, logger, di_version):
    logger.trace("Executing Test Case 2040180 - DataServerMetrologyPlugin shall able to read upto 900 V7 Messages from message queue using V7-Agent")



    logger.trace('Step 1')
    logger.trace('Step 2')
    assert di_version == preinstalled_meter.version_info()[1], "AppSerices package is not successfully Installed"
    logger.trace('Step 3')
    logger.trace('Step 4')    
    assert is_process_running(preinstalled_meter,f"DataServer_Daemon"),"DataServer is not up and running"

    try:

        logger.trace('Step 5')
        read_LID = "ILID_DATASERVER_V7_MESSAGE_READ_LIMIT"
        poll_period_LID = "ILID_DATASERVER_V7_MESSAGE_POLL_PERIOD_SECS"

        read_LID_value = 10
        poll_period_LID_value = 5
        write_lid(preinstalled_meter,logger,read_LID,read_LID_value)
        write_lid(preinstalled_meter,logger,poll_period_LID,poll_period_LID_value)


        logger.trace('Step 6')

        # Start the DataServer
        Dataserver_refresh(preinstalled_meter)

        logger.trace('Step 7')

        agent=V7_AGENT
        install_agent_and_activate(preinstalled_meter,logger,agent)

        
        agent_list=preinstalled_meter.sql_query("select AgentName from agentinformation")
        assert agent.name in agent_list,f"{agent.name} is not  be installed"
        
        logger.trace('Step 9')
        logger.trace('Step 10')
        v7_log_file=is_log_file_available(preinstalled_meter,V7_AGENT)
        meter_time_stamp=int(absolute_command(preinstalled_meter,r"date +%s")[0])
        logger.info('starting time timestamp of Meter : %s',meter_time_stamp)
        
        v7_cmd=f'cat {v7_log_file} '
        logger.info(v7_cmd)
        Message = ['First Message','Second Message','Third Message']
        stop=time.time() + 5*60
        c=0
        while stop>time.time():
            all_data = " ".join(absolute_command(preinstalled_meter,v7_cmd))
            compare_timestamp=re.findall(r"Timestamp:(\d+)",all_data)
            if compare_timestamp:
                logger.info("Available Timestamp : %s",compare_timestamp[-1])
                logger.info('starting time timestamp of Meter : %s',meter_time_stamp)


            value1 = int(compare_timestamp[-1]) >= meter_time_stamp if compare_timestamp else False
            value2 = all([msg in all_data for msg in Message])
            compare_message=re.findall(r"ArraySize:(\d+)",all_data)

            if compare_message:
                logger.info("Available Message : %s",compare_message[-1])

            value3 = int(compare_message[-1]) ==10 if compare_message else False

            status = value1 and value2 and value3

            if status:
                break
            else:
                c+=1
            if c%5==0:
                # it will refresh the dataserver after 25 sec if not found
                # Restart the DataServer
                Dataserver_refresh(preinstalled_meter)                
            if c==19:
                # it will refresh all agent table 95 min if not found
                All_Agent_Table_Refresh(preinstalled_meter,agent)                
                c=0
            time.sleep(5)



        assert value1 ,f"Current timestamp is not available"
        assert value2,"Agent log message is not printing the v7 data"
        assert value3,'10 individual messages is not available in each set'

        #################################################################################################
        
        logger.trace('Step 11')
        logger.trace('Step 12')
        read_LID_value = 15
        poll_period_LID_value = 5
        logger.trace('Step 13')


        write_lid(preinstalled_meter,logger,read_LID,read_LID_value)
        write_lid(preinstalled_meter,logger,poll_period_LID,poll_period_LID_value)



        # Start the DataServer
        Dataserver_refresh(preinstalled_meter)

        # Stop the Container
        Container_stop(preinstalled_meter,agent.container_id)
        # Start the container
        refresh_container(preinstalled_meter,logger,20*60)
        assert agent.container_id in Active_Containers(preinstalled_meter),f"Container {agent.container_id} is not start after the Container Start command"

        logger.trace('Step 14')
        logger.trace('Step 15')
        logger.trace('Step 16')
        v7_log_file=is_log_file_available(preinstalled_meter,V7_AGENT)

        meter_time_stamp=int(absolute_command(preinstalled_meter,r"date +%s")[0])
        logger.info('starting time timestamp of Meter : %s',meter_time_stamp)
        
        v7_cmd=f'cat {v7_log_file} '
        logger.info(v7_cmd)
        Message = ['First Message','Second Message','Third Message']
        stop=time.time() + 5*60
        c=0
        while stop>time.time():
            all_data = " ".join(absolute_command(preinstalled_meter,v7_cmd))
            compare_timestamp=re.findall(r"Timestamp:(\d+)",all_data)
            if compare_timestamp:
                logger.info("Available Timestamp : %s",compare_timestamp[-1])
                logger.info('starting time timestamp of Meter : %s',meter_time_stamp)


            value1 = int(compare_timestamp[-1]) >= meter_time_stamp if compare_timestamp else False
            value2 = all([msg in all_data for msg in Message])
            compare_message=re.findall(r"ArraySize:(\d+)",all_data)

            if compare_message:
                logger.info("Available Message : %s",compare_message[-1])

            value3 = int(compare_message[-1]) ==15 if compare_message else False

            status = value1 and value2 and value3

            if status:
                break
            else:
                c+=1
            if c%5==0:
                # it will refresh the dataserver after 25 sec if not found
                # Restart the DataServer
                Dataserver_refresh(preinstalled_meter)                
            if c==19:
                # it will refresh all agent table 95 min if not found
                All_Agent_Table_Refresh(preinstalled_meter,agent)                
                c=0
            time.sleep(5)



        assert value1 ,f"Current timestamp is not available"
        assert value2,"Agent log message is not printing the v7 data"
 
        assert value3,'10 individual messages is not available in each set'


    finally:
        default_poll_period_lid_value = 1
        default_read_lid_value = 900
        write_lid(preinstalled_meter,logger,poll_period_LID,default_poll_period_lid_value)
        write_lid(preinstalled_meter,logger,read_LID,default_read_lid_value)
        

        # Start the DataServer
        Dataserver_refresh(preinstalled_meter)

        # Stop the Container
        Container_stop(preinstalled_meter,agent.container_id)
        # Start the container
        refresh_container(preinstalled_meter,logger,20*60)
        assert agent.container_id in Active_Containers(preinstalled_meter),f"Container {agent.container_id} is not start after the Container Start command"



        v7_log_file=is_log_file_available(preinstalled_meter,V7_AGENT)

        meter_time_stamp=int(absolute_command(preinstalled_meter,r"date +%s")[0])
        logger.info('starting time timestamp of Meter : %s',meter_time_stamp)
        v7_cmd=f'cat {v7_log_file} '
        logger.info(v7_cmd)
        Message = ['First Message','Second Message','Third Message']
        stop=time.time() + 5*60
        c=0
        while stop>time.time():
            all_data = " ".join(absolute_command(preinstalled_meter,v7_cmd))
            compare_timestamp=re.findall(r"Timestamp:(\d+)",all_data)
            if compare_timestamp:
                logger.info("Available Timestamp : %s",compare_timestamp[-1])
                logger.info('starting time timestamp of Meter : %s',meter_time_stamp)


            value1 = int(compare_timestamp[-1]) >= meter_time_stamp if compare_timestamp else False
            value2 = all([msg in all_data for msg in Message])
            compare_message=re.findall(r"ArraySize:(\d+)",all_data)

            if compare_message:
                logger.info("Available Message : %s",compare_message[-1])

            value3 = int(compare_message[-1]) ==3 if compare_message else False

            status = value1 and value2 and value3

            if status:
                break
            else:
                c+=1
            if c%5==0:
                # it will refresh the dataserver after 25 sec if not found
                # Restart the DataServer
                Dataserver_refresh(preinstalled_meter)                
            if c==19:
                # it will refresh all agent table 95 min if not found
                All_Agent_Table_Refresh(preinstalled_meter,agent)                
                c=0
            time.sleep(5)


        assert status,'V7 agent is not Revert back into inital condition '
