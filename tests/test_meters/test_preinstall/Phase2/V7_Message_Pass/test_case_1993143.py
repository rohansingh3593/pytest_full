
"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase2
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/1993143
===================================================================================================
Test Case      : 1993143
Description    : Check the subscribtion and permission were unaltered & agent can continues to receive v7 message after powercycle
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 - 
Precondition:Appservices installedv7agent installedactive subscription to v7messagesagent much have
permission on policy file

Step 2 - 


Step 3 - 
Check the /tmp/agent/<agentid>/<agentid>_log

Step 4 - 


Step 5 - 
Power cycle the meter

Step 6 - 


Step 7 - 
Repeat step 2 after the meter is back online

Step 8 - 



===================================================================================================


"""
import pytest
import time
from tests.test_meters.utils import is_process_running,V7_AGENT,install_agent_and_activate,Active_Containers,wait_for_agents
from tests.test_meters.rohan_utils import is_log_file_available,All_Agent_Table_Refresh,Dataserver_refresh
# AUTOGENERATED Test Case 1993143

@pytest.mark.skip(reason="TODO: unimplemented test case")
@pytest.mark.regress_nightly
# @pytest.mark.regress_smoke
@pytest.mark.suite_id("2040169")
@pytest.mark.test_case("1993143")
def test_case(preinstalled_meter, logger, di_version):
    logger.trace("Executing Test Case 1993143 - Check the subscribtion and permission were unaltered & agent can continues to receive v7 message after powercycle")

    logger.trace('Step 1')
    agent=V7_AGENT
    install_agent_and_activate(preinstalled_meter,logger,agent)
    agent_list=preinstalled_meter.sql_query("select AgentName from agentinformation")

    logger.trace('Step 2')
    assert di_version == preinstalled_meter.version_info()[1], "AppSerices package is not successfully Installed"
    assert is_process_running(preinstalled_meter,f"DataServer_Daemon"),"DataServer is not up and running"
    assert agent.name in agent_list,f"{agent.name} is not  be installed"
    assert agent.container_id in Active_Containers(preinstalled_meter),f"{agent.container_id} Container is not running"
    
    logger.trace('Step 3')
    log_file = is_log_file_available(preinstalled_meter,agent)
    messages = ['First Message','Second Message','Third Message']
    stop = time.time() + (2*60)
    while time.time()<=stop:
        code,logs = preinstalled_meter.command_with_code(f'cat {log_file}')
        logger.info("v7 logs %s",logs)
        logs = " ".join(logs)
        message = all(message in logs for message in messages)
        if message and code == 0:
            break
        logger.info("sleep for 10sec")
        time.sleep(10)
    assert message, "Timeout for condition check"

    logger.trace('Step 4')
    logger.trace('Step 5')
    preinstalled_meter.reboot_meter()

    logger.trace('Step 6')
    logger.trace('Step 7')

    wait_for_agents(preinstalled_meter,logger,[agent],20*60)
    agent_list=preinstalled_meter.sql_query("select AgentName from agentinformation")

    assert di_version == preinstalled_meter.version_info()[1], "AppSerices package is not successfully Installed"
    assert is_process_running(preinstalled_meter,f"DataServer_Daemon"),"DataServer is not up and running"
    assert agent.name in agent_list,f"{agent.name} is not  be installed"
    assert agent.container_id in Active_Containers(preinstalled_meter),f"{agent.container_id} Container is not running"


    is_log_file_available(preinstalled_meter,agent)
    c=0
    msg_count=0
    stop = time.time() + (2*60)
    while time.time()<=stop:
        code,logs = preinstalled_meter.command_with_code(f'cat {log_file}')
        logger.info("v7 logs %s",logs)
        logs = " ".join(logs)
        message = all(message in logs for message in messages)
        if message and code == 0:
            msg_count+=1
        else:
            c+=1
        if c%5==0:
            # it will refresh the dataserver after 25 sec if not found
            # Restart the DataServer
            Dataserver_refresh(preinstalled_meter)                
        if c==19:
            # it will refresh all agent table 95 min if not found
            All_Agent_Table_Refresh(preinstalled_meter,agent)                
            c=0
        if msg_count >3:
            break
        logger.info("sleep for 10sec")
        time.sleep(5)
    assert message, "Timeout for condition check"

    logger.trace('Step 8')