
"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase2
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2040199
===================================================================================================
Test Case      : 2040199
Description    : DataServerMetrologyPlugin shall be trigger on every start of DataServer daemon if there is an active subscription
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : Completing Pull Request 159508 and the associated work items.
Steps:
===================================================================================================
Step 1 - 
Precondition:1. AppServices should be installed already2. DataServer daemon should be up and
running3. V7-Agent should be installed and running on the container and it also subscribed to the v7
feature

Step 2 - 
All 3 Preconditions were satisfied

Step 3 - 
Issue the following command to stop the Dataservermonit stop DataServer

Step 4 - 
DataServer process should be stopped

Step 5 - 
Issue the following command to start the Dataservermonit start DataServer

Step 6 - 
DataServer process should be started

Step 7 - 
Restart the container or agent

Step 8 - 


Step 9 - 
Valdate the DataServerd, Container Managerd and agent were initaited after restarting the Dataserver

Step 10 - 
All the DS related process has to be reinitiated.

Step 11 - 
Check the meterology data read were initiated/triggered as soon as DataServer restarts

Step 12 - 
Number of samples should be collected from the message Queue


===================================================================================================


"""
import pytest
from tests.test_meters.utils import is_process_running,V7_AGENT,install_agent_and_activate,refresh_container,Active_Containers
from tests.test_meters.rohan_utils import Container_stop,Dataserver_refresh,is_log_file_available,All_Agent_Table_Refresh,absolute_command
import re
import time

# AUTOGENERATED Test Case 2040199

@pytest.mark.skip(reason="V7 logs are not seen on Meters")
@pytest.mark.regress_nightly
# @pytest.mark.regress_smoke
@pytest.mark.suite_id("2040169")
@pytest.mark.test_case("2040199")
def test_case(preinstalled_meter, logger, di_version):
    logger.trace("Executing Test Case 2040199 - DataServerMetrologyPlugin shall be trigger on every start of DataServer daemon if there is an active subscription")


    logger.trace('Step 1')
    agent=V7_AGENT
    install_agent_and_activate(preinstalled_meter,logger,agent)

    logger.trace('Step 2')

    assert di_version == preinstalled_meter.version_info()[1], "AppSerices package is not successfully Installed"
    assert is_process_running(preinstalled_meter,f"DataServer_Daemon"),"DataServer is not up and running"

    agent_list=preinstalled_meter.sql_query("select AgentName from agentinformation")
    assert agent.name in agent_list,f"{agent.name} is not  be installed"
    refresh_container(preinstalled_meter,logger,20*60)
    assert agent.container_id in Active_Containers(preinstalled_meter),f"{agent.container_id} Container is not running"

    logger.trace('Step 3')
    logger.trace('Step 4')
    messages = ['First Message','Second Message','Third Message']
    log_file = is_log_file_available(preinstalled_meter,agent)
    count = 0
    stop = time.time() + (5*60)
    while time.time()<=stop:
        code,logs = preinstalled_meter.command_with_code(f'cat {log_file}')
        logger.info("v7 logs %s",logs)
        logs = " ".join(logs)
        message = all(message in logs for message in messages)
        if message and code == 0:
            count+=1
        if count >3:
            break
        logger.info("sleep for 10sec")
        time.sleep(5)
    assert message, "Timeout for condition check"

    # Stop the DataServer
    Dataserver_refresh(preinstalled_meter,process="stop")
    logger.trace('Step 5')
    logger.trace('Step 6')

    # Start the DataServer
    Dataserver_refresh(preinstalled_meter,process="start")
    logger.trace('Step 7')
    # Stop the Container
    Container_stop(preinstalled_meter,agent.container_id)
    logger.trace('Step 8')
    logger.trace('Step 9')
    # Start the container
    refresh_container(preinstalled_meter,logger,20*60)
    assert agent.container_id in Active_Containers(preinstalled_meter),f"Container {agent.container_id} is not start after the Container Start command"
    
    logger.trace('Step 10')
    assert is_process_running(preinstalled_meter,f"DataServer_Daemon"),"DataServer is not running"
    assert is_process_running(preinstalled_meter,f'{agent.name}_Daemon') ,f"{agent.name} is not start"
    assert is_process_running(preinstalled_meter,"ContainerManager"),"Container Manager is not Running"

    logger.trace('Step 11')
    log_file=is_log_file_available(preinstalled_meter,agent)
    meter_time_stamp=int(absolute_command(preinstalled_meter,r"date +%s")[0])
    logger.info('Current timestamp of Meter : %s',meter_time_stamp)

    time_taken=time.time() + 5*60
    c=0
    while time.time()<=time_taken:
        compare_cmd=f'cat {log_file} '
        all_data = " ".join(absolute_command(preinstalled_meter,compare_cmd))
        compare_timestamp=re.findall(r"Timestamp:(\d+)",all_data)
        if compare_timestamp:
            logger.info("Available Timestamp : %s",compare_timestamp[-1])
            logger.info('starting time timestamp of Meter : %s',meter_time_stamp)


        compare_message=re.findall(r"ArraySize:(\d+)",all_data)

        if compare_message:
            logger.info("Available Message : %s",compare_message[-1])
            
        value1 = int(compare_timestamp[-1]) > meter_time_stamp if compare_timestamp else False
        value2 = int(compare_message[-1]) ==3 if compare_timestamp else False
        status = value1 and value2
        if status:
            break
        else:
            c+=1
        if c%5==0:
            # it will refresh the dataserver after 25 sec if not found
            # Restart the DataServer
            Dataserver_refresh(preinstalled_meter)                
        if c==19:
            # it will refresh all agent table 95 min if not found
            All_Agent_Table_Refresh(preinstalled_meter,agent)                
            c=0
        time.sleep(5)



    logger.trace('Step 12')
    assert  status,"samples is not collected from the message Queue"



