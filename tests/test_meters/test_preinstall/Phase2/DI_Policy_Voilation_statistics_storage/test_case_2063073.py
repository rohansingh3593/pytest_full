
"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase2
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2063073
===================================================================================================
Test Case      : 2063073
Description    : Refresh container with dbus command and Verify the DI PolicyViolationStatistics table exists
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 - 
Refresh Container Manager with dbus command and verify the DI PolicyViolationStatistics  Table

Step 2 - 
DI PolicyViolationStatistics  Table should exist after container refresh


===================================================================================================


"""
import pytest
from tests.test_meters.utils import install_agent_and_activate,METROLOGY_DATA_AGENT,refresh_container
from tests.test_meters.rohan_utils import Container_stop

import time
# AUTOGENERATED Test Case 2063073

# @pytest.mark.skip(reason="TODO: unimplemented test case")
@pytest.mark.regress_nightly
# @pytest.mark.regress_smoke
# @pytest.mark.crosslynx_test
@pytest.mark.suite_id("2060761")
@pytest.mark.test_case("2063073")
def test_case(preinstalled_meter, logger):
    logger.trace("Executing Test Case 2063073 - Refresh container with dbus command and Verify the DI PolicyViolationStatistics table exists")
    
    logger.trace('Step 1')
    agent=METROLOGY_DATA_AGENT
    install_agent_and_activate(preinstalled_meter, logger,agent)
    before_PolicyViolationStatistics_table=preinstalled_meter.get_table("PolicyViolationStatistics")
        
    # Stop the Contianer
    Container_stop(preinstalled_meter,agent.container_id)
    # Start the Contianer
    refresh_container(preinstalled_meter,logger,20*60)
    logger.trace('Step 2')
    for parameter in before_PolicyViolationStatistics_table:
        query = f"select ViolationCount from PolicyViolationStatistics where AgentId = \"{parameter['AgentId']}\" and FeatureID = \"{parameter['FeatureID']}\" and ConstraintID = \"{parameter['ConstraintID']}\" and ViolationParameter = \"{parameter['ViolationParameter']}\""
        # logger.info(query)
        after_ViolationCount=preinstalled_meter.sql_query(query)
        assert after_ViolationCount and (int(after_ViolationCount[0]) >= int(parameter['ViolationCount'])) ,"DI Policy Violation Statistics Table is not exist after container refresh"


