
"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase2
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2064759
===================================================================================================
Test Case      : 2064759
Description    : Verify Agent requested permission which are not enforeced in Policy file and the Policy Violation is recorded in PolicyViolationStatistics table 
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 - 
Verify Agent requested permission which are not enforeced in Policy file and the Policy Violation is
recorded in PolicyViolationStatistics table

Step 2 - 
    AgentId     FeatureID (Optional)    ConstraintID 4    ViolationParameter  \"Unauthorized API\"
ViolationCount

===================================================================================================


"""
import pytest
from tests.test_meters.utils import METROLOGY_DATA_AGENT,install_agent_and_activate,refresh_container,Active_Containers
from tests.test_meters.rohan_utils import absolute_command,file_content_change,Container_stop,Dataserver_refresh,All_Agent_Table_Refresh,is_log_file_available,agent_policy_collect,policy_file_push
import time
# AUTOGENERATED Test Case 2064759

# @pytest.mark.skip(reason="TODO: unimplemented test case")
@pytest.mark.regress_nightly
# @pytest.mark.regress_smoke
@pytest.mark.suite_id("2060761")
@pytest.mark.test_case("2064759")

def test_case(preinstalled_meter, logger, workdir):
    logger.trace("Executing Test Case 2064759 - Verify Agent requested permission which are not enforeced in Policy file and the Policy Violation is recorded in PolicyViolationStatistics table ")


    test_case_start_time_stamp=int(absolute_command(preinstalled_meter,r"date +%s")[0])
    logger.info('starting time timestamp of Meter : %s',test_case_start_time_stamp)

    logger.trace('Step 1')
    agent=METROLOGY_DATA_AGENT
    install_agent_and_activate(preinstalled_meter,logger,agent)

    # Getting the Agent ID form the Agent Information Table
    query=f'select AgentUID from agentinformation where AgentName = "{agent.name}";'
    agent_id=preinstalled_meter.sql_query(query)[0]

    query = f"select max(timestamp) from PolicyViolationStatistics where agentid = {agent_id}"
    initial_max_timestap = preinstalled_meter.sql_query(query)

    word='<Permission name="Data:Subscription:Metrology"/>'

    try:
        # Geting the PolicyFile.
        file = agent_policy_collect(preinstalled_meter,agent,base_dir=workdir)

        # comment it out the permission
        file_content_change(preinstalled_meter,file,word)

        # Update the policy file
        policy_file_push(preinstalled_meter,agent)

        # Restart the DataServer
        Dataserver_refresh(preinstalled_meter)

        # Stop the Container
        Container_stop(preinstalled_meter,agent.container_id)

        # Start the container
        refresh_container(preinstalled_meter,logger,20*60)
        assert agent.container_id in Active_Containers(preinstalled_meter),f"Container {agent.container_id} is not start after the Container Start command"

        is_log_file_available(preinstalled_meter,agent)

        if initial_max_timestap[0] != '':
            query = f'select ViolationParameter from PolicyViolationStatistics where agentid = {agent_id} and timestamp > {initial_max_timestap[0]} and ConstraintID = 4 order by timestamp desc limit 1'
        else:
            query = f'select ViolationParameter from PolicyViolationStatistics where agentid = {agent_id} and ConstraintID = 4 order by timestamp desc limit 1'

        permission_violation = 'Data:Subscription:Metrology'


        logger.trace('Step 2')

        time_out=time.time() + 2*60
        c = 0
        while time_out>time.time():
            ViolationParameter = preinstalled_meter.sql_query(query)
            value = ViolationParameter and ViolationParameter[0] == permission_violation
            if value :
                break 
            else:
                c+=1
            if c==5:
                # it will refresh all agent table 25 sec if not found
                All_Agent_Table_Refresh(preinstalled_meter,agent)                
                c=0
            time.sleep(5)

        assert value,"There is no violation register in policyviolationstatistics with constraint id 4"
    
    finally:
        
        # Update the policy file at the DIPolicyFile table at initial State
        agent_policy_collect(preinstalled_meter,agent,base_dir=workdir,force=True)
        policy_file_push(preinstalled_meter,agent)


        # Restart the DataServer
        Dataserver_refresh(preinstalled_meter)

        # Stop the Container
        Container_stop(preinstalled_meter,agent.container_id)
        # Start the container
        refresh_container(preinstalled_meter,logger,20*60)
        assert agent.container_id in Active_Containers(preinstalled_meter),f"Container {agent.container_id} is not start after the Container Start command"


        # checking agent log file is available
        log_file=is_log_file_available(preinstalled_meter,agent)