
"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase2
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2444458
===================================================================================================
Test Case      : 2444458
Description    : Ensure no violation for permission enabled LIDS
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 - 
Install A7, AppServ, Agent

Step 2 - 
All should be successful

Step 3 - 
Ensure the permission is enabled in the policy file

Step 4 - 
<Permission name=\"Data:Subscription:Metrology\"/>\n<Permission
name=\"Network:Upstream\"/>\n<Permission name=\"Data:Identity\"/>\n

Step 5 - 
Make sure the LIDS being subscribed (for Metrology LIDS) and the Identity LIDS are available (should
not be commented)

Step 6 - 
eg :<Metrology>\n<LIDS>\n<LID description=\"ILID_INS_VOLTS_A\"
value=\"18153520\"/>\n</LIDS>\n</Metrology>\n<Identity>\n<LIDS>\n<LID
description=\"ILID_SYSTEM_FW_VERSION\" value=\"1083965465\"/>\n<LID
description=\"ILID_DATASERVER_APPSERV_FW_VERSION\" value=\"44761103\"/>\n<LID
description=\"ILID_BASE_METER_FORM\" value=\"18153550\"/>\n<LID
description=\"ILID_BASE_SERVICE_TYPE\" value=\"18153549\"/>\n<LID
description=\"ILID_BASE_METER_CLASS\" value=\"18153547\"/>

Step 7 - 
Ensure no policy violations seen for any of the Metrology / Identity LIDS

Step 8 - 
PolicyViolationStatistics table should not be populating any violations for these LIDS


===================================================================================================


"""
import pytest
from tests.test_meters.utils import METROLOGY_DATA_AGENT,install_agent_and_activate,Active_Containers,is_process_running
from tests.test_meters.rohan_utils import absolute_command
import re 

# AUTOGENERATED Test Case 2444458

# @pytest.mark.skip(reason="TODO: unimplemented test case")
@pytest.mark.regress_nightly
# @pytest.mark.regress_smoke
@pytest.mark.suite_id("2060761")
@pytest.mark.test_case("2444458")
def test_case(preinstalled_meter, logger, di_version):
    logger.trace("Executing Test Case 2444458 - Ensure no violation for permission enabled LIDS")

    test_case_start_time_stamp=int(absolute_command(preinstalled_meter,r"date +%s")[0])
    logger.info('starting time timestamp of Meter : %s',test_case_start_time_stamp)

    logger.trace('Step 1')
    agent=METROLOGY_DATA_AGENT
    install_agent_and_activate(preinstalled_meter,logger,agent)
    agent_list=preinstalled_meter.sql_query("select AgentName from agentinformation")

    logger.trace('Step 2')
    assert di_version == preinstalled_meter.version_info()[1], "AppSerices package is not successfully Installed"
    assert is_process_running(preinstalled_meter,f"DataServer_Daemon"),"DataServer is not up and running"
    assert agent.name in agent_list,f"{agent.name} is not  be installed"
    assert agent.container_id in Active_Containers(preinstalled_meter),f"{agent.container_id} Container is not running"

    logger.trace('Step 3')


    # Getting the Agent ID form the Agent Information Table
    query=f'select AgentUID from agentinformation where AgentName = "{agent.name}";'
    agent_id=preinstalled_meter.sql_query(query)[0]

    # Getting the METROLOGY DATA AGENT valid data from Dipolicy file table
    query=f'select PolicyFile from DIPolicyFile where AgentId = {agent_id}'
    Policy_file_content="\n".join(preinstalled_meter.sql_query(query))

    Permission1 = '<Permission name="Data:Subscription:Metrology"/>'
    Permission2 = '<Permission name="Network:Upstream"/>'
    Permission3 = '<Permission name="Data:Identity"/>'

    logger.trace('Step 4')
    assert Permission1 in Policy_file_content,'Subscription Permission is not available'
    assert Permission2 in Policy_file_content,'Network Permission is not available'
    assert Permission3 in Policy_file_content,'Data Permission is not available'

    logger.trace('Step 5')
    logger.trace('Step 6')

    # Available lids in the policy file table
    All_policy_lids=re.findall(r'value="(\d+)"',Policy_file_content)
    logger.info('Available lids in the policy file table are %s',All_policy_lids)


    PolicyViolationStatistics_table = preinstalled_meter.get_table('PolicyViolationStatistics')
    check_table = [content for content in PolicyViolationStatistics_table if int(content['TimeStamp']) > test_case_start_time_stamp and content['AgentId'] == agent_id]
    
    logger.trace('Step 7')
    logger.trace('Step 8')
    for lids in All_policy_lids:
        assert not any([lids == content['ViolationParameter'] for content in check_table])