
"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase2
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2060955
===================================================================================================
Test Case      : 2060955
Description    : Modify the DI policy file by adding access to few more metrology LID and check the behaviour
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 -
Modify the agent policy file by adding few more metrology LID permissions.Ex: Install
MeterologyDataAgent and add the below LID to the existing Metrlogy lids<Metrology><LIDS><LID
description=\"ILID_INS_THDV_A\" value=\"18153975\"/>Prerequisite : Have partial permission to the
Metrology<Permission name=\"Data:Subscription:Metrology:Partial\"/>

Step 2 -


Step 3 -
 Add the same lid to the config file also

Step 4 -


Step 5 -
Replace the policy file and restart the container

Step 6 -


Step 7 -
Check the access to the new lids from the agent log file

Step 8 -
The agent log should show the data of the newly added metrology LIDS


===================================================================================================


"""

import pytest
from tests.test_meters.utils import METROLOGY_DATA_AGENT,install_agent_and_activate,refresh_container,Active_Containers
from tests.test_meters.rohan_utils import Config_push,agent_Config_collect,file_content_change,Container_stop,Dataserver_refresh,All_Agent_Table_Refresh,is_log_file_available,agent_policy_collect,policy_file_push,absolute_command
import re
import time
# AUTOGENERATED Test Case 2060955


# @pytest.mark.skip(reason="TODO: unimplemented test case")
@pytest.mark.slow1020
@pytest.mark.regress_nightly
@pytest.mark.regress_smoke
@pytest.mark.suite_id("2060920")
@pytest.mark.test_case("2060955")
def test_case(preinstalled_meter, logger, workdir):
    logger.trace("Executing Test Case 2060955 - Modify the DI policy file by adding access to few more metrology LID and check the behaviour")


    logger.trace('Step 1')
    agent = METROLOGY_DATA_AGENT
    install_agent_and_activate(preinstalled_meter,logger,agent)

    # Getting the Agent ID form the Agent Information Table
    query=f'select AgentUID from agentinformation where AgentName = "{agent.name}";'
    agent_id=preinstalled_meter.sql_query(query)[0]

    # Getting the feature ID form the Policy file of agent package
    value=agent.name.replace("Agent","")
    query=f"select PolicyFile from DIPolicyFile where AgentId = \"{agent_id}\""
    check=fr'<Feature ID="(\d+)" description="{value}Feature" subscribable="none" visibility="private">'
    Policy_file_content="\n".join(preinstalled_meter.sql_query(query))
    Feature_id=re.findall(check,Policy_file_content)[0]


    old_lid='value="18153520#18153515"'
    new_lid='value="18153520#18153515#18153975"'
    word1='<LID description="ILID_INS_VOLTS_A" value="18153520"/>'
    replaced_word1='<LID description="ILID_INS_VOLTS_A" value="18153520"/><LID description="ILID_INS_THDV_A" value="18153975"/>'
    word2='<Permission name="Data:Subscription:Metrology"/>'
    replaced_word2='<Permission name="Data:Subscription:Metrology:Partial"/>'


    try:
        logger.trace('Step 2')
       # Get the policy file
        file = agent_policy_collect(preinstalled_meter,agent,base_dir=workdir)

        # Adding the some lids in the agent policy file table.
        file_content_change(preinstalled_meter,file,word1,replaced_word1)

        # Adding the permission for the lids in the agent policy file table.
        file_content_change(preinstalled_meter,file,word2,replaced_word2)

       # Update the policy file
        policy_file_push(preinstalled_meter,agent)

        # Get configuration file from the featureConfiguration table
        file = agent_Config_collect(preinstalled_meter,METROLOGY_DATA_AGENT,Feature_id,base_dir=workdir)


        logger.trace('Step 3')
        # Update the configuration file
        file_content_change(preinstalled_meter,file,old_lid,new_lid)


        # Push configuration file to the featureConfiguration table
        Config_push(preinstalled_meter,Feature_id)

        logger.trace('Step 6')
        # It will check Agent log file is available
        log_file=is_log_file_available(preinstalled_meter,agent)

        logger.trace('Step 7')

        meter_time_stamp=int(absolute_command(preinstalled_meter,r"date +%s")[0])
        logger.info('starting time timestamp of Meter : %s',meter_time_stamp)

        logger.trace('Step 8')
        # It will check the default lid  and Added lids has a access.
        default_lid = ["18153520","18153515","18153640"]
        added_lid = ["18153975"]
        time_out9=time.time() + 5*60
        c=0
        while time_out9>time.time():
            check = "\n".join(absolute_command(preinstalled_meter,f'cat {log_file}')[-20:])
            value1 = all([f'LID_VALUE({lid})' in check for lid in default_lid])
            value2 = all([f'LID_VALUE({lid})' in check for lid in added_lid])
            compare_timestamp=re.findall(r"\n(\d+)\n",check)
            logger.info("Available Timestamp for the Message : %s",", ".join(compare_timestamp[-3:]))
            value3 = int(compare_timestamp[-1]) > meter_time_stamp if compare_timestamp else False
            status = value1 and value2 and value3
            if status:
                break
            else:
                c+=1
            if c%5==0:
                # it will refresh the dataserver after 25 sec if not found
                # Restart the DataServer
                Dataserver_refresh(preinstalled_meter)
            if c==19:
                # it will refresh all agent table 95 sec if not found
                All_Agent_Table_Refresh(preinstalled_meter,agent)
                c=0
            time.sleep(5)
        assert status ,f"lid 18153975 doesn't have access after"

    finally:

        # Update the policy file at the DIPolicyFile table at initial State
        agent_policy_collect(preinstalled_meter,agent,base_dir=workdir,force=True)
        policy_file_push(preinstalled_meter,agent)

        # Update the Data file at the FeatureConfiguration table at Initial State
        agent_Config_collect(preinstalled_meter,METROLOGY_DATA_AGENT,Feature_id,base_dir=workdir,force=True)
        Config_push(preinstalled_meter,Feature_id)

        # It will check Agent log file is available
        log_file=is_log_file_available(preinstalled_meter,agent)

        meter_time_stamp=int(absolute_command(preinstalled_meter,r"date +%s")[0])
        logger.info('starting time timestamp of Meter : %s',meter_time_stamp)

        # It will check the Added lid is removed from the lids.
        # It will check the Default lid is available.
        default_lid=["18153520","18153515","18153640"]
        added_lid = ["18153975"]
        c=0
        stop = time.time() + 5*60
        while time.time()<=stop:
            check = "\n".join(absolute_command(preinstalled_meter,f'cat {log_file}')[-20:])
            value1 = all([f'LID_VALUE({lid})' in check for lid in default_lid])
            value2 = any([f'LID_VALUE({lid})' in check for lid in added_lid])
            compare_timestamp=re.findall(r"\n(\d+)\n",check)
            logger.info("Available Timestamp for the Message : %s",", ".join(compare_timestamp[-3:]))
            value3 = int(compare_timestamp[-1]) > meter_time_stamp if compare_timestamp else False
            status = value1 and not value2 and value3
            if status:
                break
            else:
                c+=1
            if c%5==0:
                # it will refresh the dataserver after 25 sec if not found
                # Restart the DataServer
                Dataserver_refresh(preinstalled_meter)
            if c==19:
                # it will refresh all agent table 95 sec if not found
                All_Agent_Table_Refresh(preinstalled_meter,agent)
                c=0
            time.sleep(5)
        assert status ,f"lid 18153975 still have access"
