
"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase2
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2071682
===================================================================================================
Test Case      : 2071682
Description    : Verify the permission to Publish in DI Policy File for ItronPubSub Agent
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 - 
Ensure the publish permission is available in the agent policy file.

Step 2 - 
The policyfile of the Itron PubSub agent should have the following permission in <Permissions> tag
:<Permission name=\"Data:Publish\"/>


===================================================================================================


"""
import pytest
from tests.test_meters.utils import install_agent_and_activate, P2P_AGENT, install_agent_and_activate

# AUTOGENERATED Test Case 2071682

#@pytest.mark.skip(reason="TODO: unimplemented test case")
@pytest.mark.regress_nightly
#@pytest.mark.regress_smoke
@pytest.mark.suite_id("2063316")
@pytest.mark.test_case("2071682")
@pytest.mark.parametrize("agent_info", [P2P_AGENT])
def test_case(preinstalled_meter, logger, agent_info):
    logger.trace("Executing Test Case 2071682 - Verify the permission to Publish in DI Policy File for ItronPubSub Agent")
    try:
        logger.trace('Step 1')
        install_agent_and_activate(preinstalled_meter,logger,agent_info)
        cmd=preinstalled_meter.sql_query(f'select PolicyFile from DIPolicyFile where agentid =50528119')
        logger.trace('Step 2')
        count =0
        for i in cmd :
            if '<Permission name="Data:Identity:Partial"/>' in i:
                count= count+1
        assert count != 0
    except Exception as e:
        logger.error("%s",e)
    


