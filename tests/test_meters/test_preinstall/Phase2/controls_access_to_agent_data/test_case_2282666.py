"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase2
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2282666
===================================================================================================
Test Case      : 2282666
Description    : Verify if the requesting AgentID  has no permission for any feature ID's  then it should log a violation in Policy Digest table -ItronPubSubAgent2
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 - 
Remove the permission for any featureid the agent policyfile .Example: ..Comment out the permission
as follows :<!--<Feature description=\"PubSubFeature\" ID=\"50593756\"/>-->

Step 2 - 


Step 3 - 
Replace the policy file onto the meter.  Restart the agent

Step 4 - 
Agent should be restarted with the modified policy file.

Step 5 - 
Subscribe to the feature whose permission is removed .

Step 6 - 


Step 7 - 
Push the config onto the meter and check the agent log.#
tail -F /tmp/container/50593792/rootfs/tmp/agent/0302ff78/0302ff78_log

Step 8 - 


The subscription access should be denied

Step 9 - 
Check the PolicyViolationStatistics table.#
sqlite3 -header /usr/share/itron/database/muse01.db "select * from PolicyViolationStatistics;"

Step 10 - 
Violation with constraint id 15  should be recorded for the respective featureid


===================================================================================================


"""
import pytest,time
from tests.test_meters.utils import install_agent_and_activate ,ITRONPUBSUBAGENT2,refresh_container
from tests.test_meters.rohan_utils import Config_push,agent_Config_collect,file_content_change,Active_Containers,Container_stop,Dataserver_refresh,agent_policy_collect,policy_file_push,absolute_command
# AUTOGENERATED Test Case 2282666

# @pytest.mark.skip(reason="TODO: Config File don't have Line")d
@pytest.mark.regress_nightly
# @pytest.mark.regress_smoke
@pytest.mark.suite_id("2063316")
@pytest.mark.test_case("2282666")
@pytest.mark.parametrize("agent_info", [ITRONPUBSUBAGENT2])
# @pytest.mark.parametrize('execution_number', range(10))
def test_case(preinstalled_meter, logger,agent_info, workdir):
    logger.trace("Executing Test Case 2282666 - Verify if the requesting AgentID  has no permission for any feature ID\'s  then it should log a violation in Policy Digest table -ItronPubSubAgent2")
    
    logger.trace('Step 1')
    install_agent_and_activate(preinstalled_meter,logger,agent_info)   
    
    test_case_start_time_stamp=int(absolute_command(preinstalled_meter,r"date +%s")[0])
    logger.info('starting time timestamp of Meter : %s',test_case_start_time_stamp)

    agent = ITRONPUBSUBAGENT2
    Feature_id = "50593757"

    # Getting the Agent ID form the Agent Information Table
    query=f'select AgentUID from agentinformation where AgentName = "{agent.name}"'
    Agent_id=preinstalled_meter.sql_query(query)[0]

    try:

        # Get the policy file
        file = agent_policy_collect(preinstalled_meter,agent,base_dir=workdir)
        # Adding the permission for the lids in the agent policy file table.
        file_content_change(preinstalled_meter,file,'<Feature description="PubSubFeature" ID="50593757"/>','<!-- <Feature description="PubSubFeature" ID="50593757"/> -->')
        # Update the policy file
        policy_file_push(preinstalled_meter,agent)
        
        logger.trace('step 2')
        # Get configuration file from the featureConfiguration table
        file = agent_Config_collect(preinstalled_meter,agent,Feature_id,base_dir=workdir)

        # Update the configuration file
        file_content_change(preinstalled_meter,file,'value="1#0#0#0#Itron#0#0#0#0#255#255#50593757#1#0"','value="1#10#10#100#Itron2#1#0#0#0#255#255#50593757#1#0"')
        file_content_change(preinstalled_meter,file,'value="0#0#50593757#1"','value="1#0#50593757#1"')

        # Push configuration file to the featureConfiguration table
        Config_push(preinstalled_meter,Feature_id)

        # Restart the DataServer
        Dataserver_refresh(preinstalled_meter)

        # Stop the Container
        Container_stop(preinstalled_meter,agent.container_id)
        # Start the container
        refresh_container(preinstalled_meter,logger,20*60)

        logger.trace('Step 4')
        logger.trace('Step 5')
        """Subscribe to the feature whose permission is removed """
        stop = time.time() + (5*60)
        while time.time()<=stop:
            log_data = absolute_command(preinstalled_meter,"cat /tmp/container/50593792/rootfs/tmp/agent/0302ff78/0302ff78_log")
            log_data = " ".join(log_data)
            status = '65568' in log_data
            if status:
                break
            time.sleep(10)
        assert status, "The subscription is not denied"
        
        logger.trace('Step 6')
        """The subscription access should be denied"""
        stop = time.time() + (5*60)
        while time.time()<=stop:
            query=f"select ConstraintID from PolicyViolationStatistics where AgentId = {Agent_id} and TimeStamp > {test_case_start_time_stamp}"
            ConstraintID = preinstalled_meter.sql_query(query)
            status = ConstraintID and ('15' in ConstraintID)            
            if status:
                break
            time.sleep(10)

        assert status,"There is no violation register in policyviolationstatistics with constraint id 4 "
        
    finally:
        # Update the policy file at the DIPolicyFile table at initial State
        agent_policy_collect(preinstalled_meter,agent,base_dir=workdir,force=True)
        policy_file_push(preinstalled_meter,agent)

        # Update the Data file at the FeatureConfiguration table at Initial State
        agent_Config_collect(preinstalled_meter,ITRONPUBSUBAGENT2,Feature_id,base_dir=workdir,force=True)
        Config_push(preinstalled_meter,Feature_id)        

        # Restart the DataServer
        Dataserver_refresh(preinstalled_meter)

        # Stop the Container
        Container_stop(preinstalled_meter,agent.container_id)
        # Start the container
        refresh_container(preinstalled_meter,logger,20*60)
        assert agent.container_id in Active_Containers(preinstalled_meter),f"Container {agent.container_id} is not start after the Container Start command"
        
