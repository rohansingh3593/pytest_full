"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase2
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2282667
===================================================================================================
Test Case      : 2282667
Description    : Verify If the requesting AgentID has permission and access to the list of feature ID's , ApplicationServices proceeds with the request normally and registers the requested subscription ItronPubSub Agent2
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 - 
Install ItronPubsubagent 2

Step 2 - 
Agent successfully installed.

Step 3 - 
Check if the requesting featureID has permission in the policyfile.example:<FeatureData>\n<Feature
description=\"PubSubFeature\" ID=\"587464693\"/>\n<Feature description=\"PubSubFeature\"
ID=\"587464692\"/>\n<Feature description=\"PubSubFeature\" ID=\"587464695\"/>\n<Feature
description=\"PubSubFeature\" ID=\"587464696\"/>\n<Feature description=\"PubSubFeature\"
ID=\"50593757\"/>\n<Feature description=\"PubSubFeature\" ID=\"50593756\"/>\n<Feature
description=\"PON_PRN\" ID=\"540016640\"/>\n</FeatureData>

Step 4 - 
The featureIDs should have permissions.

Step 5 - 
Request for the feature Id\'s which are in Policy File by adding them to the config of the agent as
follows:<parameter name=\"Subscribe\" value=\"3#140737488355394#540016640#1#50593756#1> Push the
config on to the meter. Restart agent.Check the agent log:#tail -F
/tmp/container/50593792/rootfs/tmp/agent/0302ff78/0302ff78_log

Step 6 - 
Subscription request for feature id\'s should be successful.Agent log should print the info of the
featureId subscribed


===================================================================================================


"""
import pytest,time
from tests.test_meters.utils import install_multiple_agents_and_activate, refresh_container, ITRONPUBSUBAGENT2,P2P_AGENT, Active_Containers
from tests.test_meters.rohan_utils import absolute_command, Config_push,agent_Config_collect,file_content_change,Container_stop,Dataserver_refresh
# AUTOGENERATED Test Case 2282667

# @pytest.mark.skip(reason="TODO: unimplemented test case")
@pytest.mark.regress_nightly
#@pytest.mark.regress_smoke
@pytest.mark.suite_id("2063316")
@pytest.mark.test_case("2282667")
# @pytest.mark.crosslynx_test
def test_case(preinstalled_meter, logger, workdir):
    logger.trace("Executing Test Case 2282667 - Verify If the requesting AgentID has permission and access to the list of feature ID\'s , ApplicationServices proceeds with the request normally and registers the requested subscription ItronPubSub Agent2")
    logger.trace('Step 1')
    agents = [P2P_AGENT,ITRONPUBSUBAGENT2]
    install_multiple_agents_and_activate(preinstalled_meter,logger,agents)
    
    logger.trace('Step 2')
    policy_file=preinstalled_meter.sql_query(f"select * from DIPolicyFile where agentid =50528119")
    lids=['<Feature description="PubSubFeature" ID="50593757"/>','<Feature description="PubSubFeature" ID="50593756"/>']
    lids_data =  all(item in policy_file for item in lids)
    assert lids_data ==True, "The featureIDs not have permissions."
    Feature_id1 = 50593757
    Feature_id2 = 50593756
    try:
        logger.trace('Step 3')
        # Get configuration file from the featureConfiguration table
        file = agent_Config_collect(preinstalled_meter,ITRONPUBSUBAGENT2,Feature_id1,base_dir=workdir)
        
        old_publish1='parameter name="Publish" value="1#0#0#0#Itron#0#0#0#0#255#255#50593757#1#0"'
        new_publish1='parameter name="Publish" value="1#10#20#100#Itron-localpublish#1#0#0#0#255#255#50593757#1#0"'

        # Update the configuration file
        file_content_change(preinstalled_meter,file,old_publish1,new_publish1)
        Config_push(preinstalled_meter,Feature_id1)


        # Get configuration file from the featureConfiguration table
        file = agent_Config_collect(preinstalled_meter,P2P_AGENT,Feature_id2,base_dir=workdir)
        
        old_publish='parameter name="Publish" value="1#0#0#0#Itron#0#0#0#0#255#255#50593756#1#0"'
        new_publish='parameter name="Publish" value="1#10#10#100#Itron#1#0#0#0#255#255#50593756#1#0"'
        old_Subscribe='parameter name="Subscribe" value="0#0#50593756#1"'
        new_Subscribe='parameter name="Subscribe" value="3#0#50593756#1#50593757#1"'

        # Update the configuration file
        file_content_change(preinstalled_meter,file,old_publish,new_publish)
        file_content_change(preinstalled_meter,file,old_Subscribe,new_Subscribe)
        
        # Push configuration file to the featureConfiguration table
        Config_push(preinstalled_meter,Feature_id2)

        # Restart the DataServer
        Dataserver_refresh(preinstalled_meter)

        # Stop the Container
        Container_stop(preinstalled_meter,P2P_AGENT.container_id)
        # Start the container
        refresh_container(preinstalled_meter,logger,20*60)

        logger.trace('Step 4')
        stop = time.time() + (5*60)
        while time.time()<=stop:
            stat = absolute_command(preinstalled_meter,'cat /tmp/container/50593792/rootfs/tmp/agent/0302ff77/0302ff77_log')
            output = ('').join(stat)
            logger.info("Got, %s",output)
            if( 'Got,' in output):
                break
            time.sleep(10)
        assert 'Got,' in output, "timeout for condition check"

        stop = time.time() + (5*60)
        while time.time()<=stop:
            stat1 = absolute_command(preinstalled_meter,'cat /tmp/container/50593792/rootfs/tmp/agent/0302ff78/0302ff78_log')
            output1 = ('').join(stat1)
            logger.info("Got, %s",output1)
            if( 'Got,' not in output1):
                break
            time.sleep(10)
        assert 'Got,' not in output1, "timeout for condition check"

    finally:
        # Update the Data file at the FeatureConfiguration table at Initial State
        agent_Config_collect(preinstalled_meter,ITRONPUBSUBAGENT2,Feature_id1,base_dir=workdir,force=True)
        Config_push(preinstalled_meter,Feature_id1)  

        # Update the Data file at the FeatureConfiguration table at Initial State
        agent_Config_collect(preinstalled_meter,P2P_AGENT,Feature_id2,base_dir=workdir,force=True)
        Config_push(preinstalled_meter,Feature_id2)        

        # Restart the DataServer
        Dataserver_refresh(preinstalled_meter)

        # Stop the Container
        Container_stop(preinstalled_meter,P2P_AGENT.container_id)
        Container_stop(preinstalled_meter,ITRONPUBSUBAGENT2.container_id)
        # Start the container
        refresh_container(preinstalled_meter,logger,20*60)
        assert P2P_AGENT.container_id in Active_Containers(preinstalled_meter),f"Container {P2P_AGENT.container_id} is not start after the Container Start command"
        assert ITRONPUBSUBAGENT2.container_id in Active_Containers(preinstalled_meter),f"Container {ITRONPUBSUBAGENT2.container_id} is not start after the Container Start command"
        