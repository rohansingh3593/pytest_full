"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase2
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2282665
===================================================================================================
Test Case      : 2282665
Description    : Verify that if the requesting AgentID does not have permission to the Agent data, It shall send an descriptive error code to the requesting Agent for Itron PubSub2
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 - 
Repeat  TEST CASE 2064794 with ItronPubSubAgent2


===================================================================================================


"""
import pytest,time
from tests.test_meters.utils import install_agent_and_activate ,ITRONPUBSUBAGENT2,refresh_container
from tests.test_meters.rohan_utils import Config_push,agent_Config_collect,file_content_change,Container_stop,Active_Containers,Dataserver_refresh,agent_policy_collect,absolute_command,policy_file_push

# AUTOGENERATED Test Case 2282665

@pytest.mark.regress_nightly
#@pytest.mark.regress_smoke
@pytest.mark.suite_id("2063316")
@pytest.mark.test_case("2282665")
@pytest.mark.parametrize("agent_info", [ITRONPUBSUBAGENT2])
def test_case(preinstalled_meter, logger, agent_info, workdir):
    logger.trace("Executing Test Case 2282665 - Verify that if the requesting AgentID does not have permission to the Agent data, It shall send an descriptive error code to the requesting Agent for Itron PubSub2")
    logger.trace('step 1')
    install_agent_and_activate(preinstalled_meter,logger,agent_info)
    
    agent=ITRONPUBSUBAGENT2
    Feature_id="50593757"
    try:
        logger.trace('step 2')
        # Get the policy file
        file = agent_policy_collect(preinstalled_meter,agent,base_dir=workdir,force=True)
        # Adding the permission for the lids in the agent policy file table.
        file_content_change(preinstalled_meter,file,'<Permission name="Data:Subscription:Agent"/>','<!-- <Permission name="Data:Subscription:Agent"/> -->')
       # Update the policy file
        policy_file_push(preinstalled_meter,agent)
        
        
        # Get configuration file from the featureConfiguration table
        file = agent_Config_collect(preinstalled_meter,ITRONPUBSUBAGENT2,Feature_id,base_dir=workdir)

        # Update the configuration file
        file_content_change(preinstalled_meter,file,'value="1#0#0#0#Itron#0#0#0#0#255#255#50593757#1#0"','value="1#10#10#100#Itron2#1#0#0#0#255#255#50593757#1#0"')
        file_content_change(preinstalled_meter,file,'value="0#0#50593757#1"','value="1#0#50593757#1"')

        # Push configuration file to the featureConfiguration table
        Config_push(preinstalled_meter,Feature_id)

        # Restart the DataServer
        Dataserver_refresh(preinstalled_meter)

        # Stop the Container
        Container_stop(preinstalled_meter,agent.container_id)
        # Start the container
        refresh_container(preinstalled_meter,logger,20*60)
        assert agent.container_id in Active_Containers(preinstalled_meter),f"Container {agent.container_id} is not start after the Container Start command"
        
        logger.trace('step 3')
        logs=[]
        stop = time.time() + (2*60)
        while time.time()<=stop:
            log_data = absolute_command(preinstalled_meter,"cat /tmp/container/50593792/rootfs/tmp/agent/0302ff78/0302ff78_log")
            if len(log_data) ==0:
                continue
            else:
                for i in log_data:
                    if('65568' in i):
                        logs.append('65568')
                        break
                    
            time.sleep(10)
        assert '65568' in logs, "timeout for condition check"

    finally:
        # Update the policy file at the DIPolicyFile table at initial State
        agent_policy_collect(preinstalled_meter,agent,base_dir=workdir,force=True)
        policy_file_push(preinstalled_meter,agent)

        # Update the Data file at the FeatureConfiguration table at Initial State
        agent_Config_collect(preinstalled_meter,ITRONPUBSUBAGENT2,Feature_id,base_dir=workdir,force=True)
        Config_push(preinstalled_meter,Feature_id)        

        # Restart the DataServer
        Dataserver_refresh(preinstalled_meter)

        # Stop the Container
        Container_stop(preinstalled_meter,agent.container_id)
        # Start the container
        refresh_container(preinstalled_meter,logger,20*60)
        assert agent.container_id in Active_Containers(preinstalled_meter),f"Container {agent.container_id} is not start after the Container Start command"
        

