
"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase2
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2064790
===================================================================================================
Test Case      : 2064790
Description    : Verify if requestingAgentID has full permission then application services check the access to the list of feature ID's for ItronPubSub Agent
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 -
Ensure  the feature IDs have permission access.Check in the <FeatureData> tag<Feature description="PubSubFeature" ID="50593756"/> and  in
<Permission> -->  <Permission name=\"Data:Subscription:Agent\"/>   of the DI Policy file of the
agent

Step 2 -
 The featues should have permission

Step 3 -
Subscribe for the featureId present in the policy file and push the config on to the meter.Check the
agent log
tail -F /tmp/container/50593792/rootfs/tmp/agent/0302ff77/0302ff77_log
Step 4 -
Add,1674277730229426621,50593756,,1674277730229270941_1_1_50593756_1_1_0_0_Itron Expiry:100 DRN:128849018881
Pub,1674277730234631741,0
 DIDS: SubCbk. Received msg from: 0
DIDS: SubCbk. Received data vector of size: 1

Got,1674277730243632581,50593756Publish Status : Success [system:0]
,1,1674277730229270941_1_1_50593756_1_1_0_0_Itron

Step 5 -
 Change the permission to Partial
  <Permission name="Data:Subscription:Agent:Partial"/>
  step 6 -
  Agent should not receive the subscription message
===================================================================================================


"""
import pytest
from tests.test_meters.utils import install_agent_and_activate,refresh_container,Active_Containers,P2P_AGENT
from tests.test_meters.rohan_utils import Config_push,agent_Config_collect,file_content_change,Container_stop,Dataserver_refresh,is_log_file_available,agent_policy_collect,policy_file_push
import time

# AUTOGENERATED Test Case 2064790
# @pytest.mark.skip(reason="PRBLOCKER")
@pytest.mark.regress_nightly
@pytest.mark.slow1020         # test takes 10 to 20 minutes
@pytest.mark.suite_id("2063316")
@pytest.mark.test_case("2064790")
def test_case(preinstalled_meter, logger, workdir):
    logger.trace("Executing Test Case 2064790 - Verify if requestingAgentID has full permission then application services check the access to the list of feature ID\'s for ItronPubSub Agent")

    logger.trace('Step 1')
    agent = P2P_AGENT
    Feature_id  = '50593756'
    install_agent_and_activate(preinstalled_meter,logger,agent)

    # Getting the Agent ID form the Agent Information Table
    query=f'select AgentUID from agentinformation where AgentName = "{agent.name}"'
    agent_id=preinstalled_meter.sql_query(query)[0]

    agent_policy_file = preinstalled_meter.sql_query(f'select PolicyFile from DIPolicyFile where agentid ={agent_id}')
    agent_policy_file = " ".join(agent_policy_file)
    lids=['<Permission name="Data:Subscription:Agent"/>','<Feature description="PubSubFeature" ID="50593756"/>']
    lids_data =  all(item in agent_policy_file for item in lids)
    logger.trace('Step 2')
    assert lids_data ,"Permission is not available in the Agent policy file"

    old_publish='parameter name="Publish" value="1#0#0#0#Itron#0#0#0#0#255#255#50593756#1#0"'
    new_publish='parameter name="Publish" value="1#10#10#100#Itron#1#0#0#0#255#255#50593756#1#0"'
    old_Subscribe='parameter name="Subscribe" value="0#0#50593756#1"'
    new_Subscribe='parameter name="Subscribe" value="1#0#50593756#1"'


    try:

        logger.trace('Step 3')

        # Get configuration file from the featureConfiguration table
        file = agent_Config_collect(preinstalled_meter,agent,Feature_id,base_dir=workdir)

        # Update the configuration file
        file_content_change(preinstalled_meter,file,old_publish,new_publish)
        file_content_change(preinstalled_meter,file,old_Subscribe,new_Subscribe)

        # Push configuration file to the featureConfiguration table
        Config_push(preinstalled_meter,Feature_id)

        logger.trace('Step 4')

        # It will check Agent log file is available
        log_file=is_log_file_available(preinstalled_meter,agent)
        logger.info(log_file)
        # For this it should check the log 5 time that checklist is available in the log ile
        # Got,1685965722413580169,50593756Publish Status : Success [system:0]
        # Got,1685965722413580169,50593756Publish Status : Success [system:0]
        checklist = ["Got,",Feature_id,'Publish Status : Success']

        stop = time.time() + (5*60)
        again = True
        count = 0
        while time.time()<=stop and again:
            code, stat = preinstalled_meter.command_with_code(f'cat {log_file}')
            if code ==0:
                for line in stat:
                    status = all([ch in line for ch in checklist])
                    if status:
                        count +=1
                        break

            if count > 5 :
                again = False

            time.sleep(10)


        assert status, "featureId is  not Subscribe in the policy file"

        logger.trace('Step 5')
        old_word='<Permission name="Data:Subscription:Agent"/>'
        new_word='<Permission name="Data:Subscription:Agent:Partial"/>'


        # Get the policy file
        file = agent_policy_collect(preinstalled_meter,agent,base_dir=workdir)

        # Adding the permission for the lids in the agent policy file table.
        file_content_change(preinstalled_meter,file,old_word,new_word)

        # Update the policy file
        policy_file_push(preinstalled_meter,agent)


       
        # It will check Agent log file is available
        log_file=is_log_file_available(preinstalled_meter,agent)

        logger.trace('Step 6')
        # For this it should check the log 5 time that checklist is not available in the log ile
        # Got,1685965722413580169,50593756Publish Status : Success [system:0]
        checklist = ["Got,",Feature_id,'Publish Status : Success']
        stop = time.time() + (5*60)

        again = True
        count = 0
        while time.time()<=stop and again:
            code, stat = preinstalled_meter.command_with_code(f'cat {log_file}')
            if code ==0:
                for line in stat:
                    status = all([ch in line for ch in checklist])
                    if status:
                        count +=1

                        break
                else:
                    count -=1

            if count == -5:
                again = False

            time.sleep(10)

        assert not status, "featureId is still Subscribe in the policy file"


    finally:
        # Update the policy file at the DIPolicyFile table at initial State
        agent_policy_collect(preinstalled_meter,agent,base_dir=workdir,force=True)
        policy_file_push(preinstalled_meter,agent)

        # Update the Data file at the FeatureConfiguration table at Initial State
        agent_Config_collect(preinstalled_meter,agent,Feature_id,base_dir=workdir,force=True)
        Config_push(preinstalled_meter,Feature_id)


        # It will check Agent log file is available
        log_file=is_log_file_available(preinstalled_meter,agent)
