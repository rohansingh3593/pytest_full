
"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase2
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2071831
===================================================================================================
Test Case      : 2071831
Description    : Verify GMR remove Agent ,DI Policy File and voilations Digest
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 - 
Prerequisite: Meter with Appserv and Agents installed.
Step 2 - 
Perform GMR
Step 3 - 
After reboot, check for the agents in the meter.
# ps | grep -i agent
Step 4 - 
check for the policyfile table.
#sqlite3 --header /usr/share/itron/database/muse01.db "select * from DIPolicyfile;"
Step 5 -
Check for the violation statistics table.
#sqlite3 --header /usr/share/itron/database/muse01.db "select * from Policyviolationstatistics;"

===================================================================================================


"""
import pytest
from tests.test_meters.utils import filter_ps, install_agent_and_activate, DI_TEST_AGENT, HAN_AGENT, agent_installed
#from itron.meter.Gen5Meter import get_table

# AUTOGENERATED Test Case 2071831

#@pytest.mark.skip(reason="TODO: unimplemented test case")
@pytest.mark.regress_nightly
#@pytest.mark.regress_smoke
@pytest.mark.suite_id("2063316")
@pytest.mark.test_case("2071831")
@pytest.mark.gmr_meter
@pytest.mark.parametrize("agent_info", [DI_TEST_AGENT])
def test_case(preinstalled_meter, logger, agent_info):
    try:
        logger.trace("Executing Test Case 2071831 - Verify GMR remove Agent ,DI Policy File and voilations Digest")
        logger.trace('Step 1')
        install_agent_and_activate(preinstalled_meter,logger,agent_info)
        agent_ = filter_ps(preinstalled_meter, "DITestAgent")
        assert "DITestAgent" in agent_[0][4]
        logger.trace('Step 2')
        preinstalled_meter.gmr()
        logger.trace('Checking Agent Information')
        agent = filter_ps(preinstalled_meter, "agent")
        assert len(agent) == 0
        logger.trace('Step 4')
        table = "DIPolicyfile;"
        policy_table=preinstalled_meter.get_table(table)
        assert len(policy_table)==0 
        logger.trace('Step 5')
        table1 = "Policyviolationstatistics;"
        policy_violation = preinstalled_meter.get_table(table1)
        assert len(policy_violation)==0 
    except Exception as e:  
        logger.error("%s",e)




