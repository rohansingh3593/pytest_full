"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase2
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2046648
===================================================================================================
Test Case      : 2046648
Description    : Verify if the upstream data sent from Agent to headend is being captured in the table
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 -
Check if the agent is up and running using the command ps | grep Agent

Step 2 -
Agent should be up with Agent name and Agent pid

Step 3 -
Push the config attached via FDM

Step 4 -


Step 5 -
Check the AgentFeatureDataCounter  using the command sqlite3 --header
/usr/share/itron/database/muse01.db \"select * from AgentFeatureDataCounter;\"

Step 6 -
Check  if the column is created with the name DailyUpstreamDataSent # sqlite3 --header
/usr/share/itron/database/muse01.db \"select * from AgentFeatureDataCounter;\"\nAgentId|FeatureId|Da
ilyUpstreamDataSent|P2PBroadcastDataSent|DailyP2PUnicastDataSent|DailyAlarmMessagesSent|TimeStamp\n5
0528128|50548608|1505|0|0|0|1602547200\n50528128|50593780|980|0|0|0|1602547200\n50528128|50593776|48
233|0|0|280|1602547200\n50528128|50536320|99|0|0|1|1602547200\n50528128|50593777|1900|0|0|0|16025472
00\n50528128|50593778|464|0|0|0|1602547200\n50528128|50528256|90|0|0|0|1602547200\n50528128|50540416
|94|0|0|0|1602547200


===================================================================================================


"""
import pytest
import time
from tests.test_meters.utils import install_agent_and_activate, refresh_container, DI_TEST_AGENT,Active_Containers
from tests.test_meters.rohan_utils import Config_push,agent_Config_collect,file_content_change,Container_stop,Dataserver_refresh,absolute_command

# AUTOGENERATED Test Case 2046648

#@pytest.mark.skip("Need to updated the log check loop condition check")
@pytest.mark.regress_nightly
@pytest.mark.regress_smoke
@pytest.mark.suite_id("2046635")
@pytest.mark.test_case("2046648")
def test_case(preinstalled_meter, logger, workdir):
    logger.trace("Executing Test Case 2046648 - Verify if the upstream data sent from Agent to headend is being captured in the table")

    logger.trace('Step 1')
    logger.trace('Step 2')
    agent = DI_TEST_AGENT
    featureId = "50593776"
    install_agent_and_activate(preinstalled_meter,logger,agent)

    # Getting the Agent ID form the Agent Information Table
    query=f'select AgentUID from agentinformation where AgentName = "{agent.name}";'
    agent_id=preinstalled_meter.sql_query(query)[0]

    try:

        logger.trace('Step 3')
        preinstalled_meter.sql_query(f"delete from AgentEvents where agentid ={agent_id} and featureid = {featureId} and data LIKE \"92#Event#%\"")
        query=f'update AgentFeatureDataCounter SET DailyAlarmMessagesSent=0 where agentid = {agent_id} and featureid = {featureId}'
        preinstalled_meter.sql_query(query)

        # Get configuration file from the featureConfiguration table
        file = agent_Config_collect(preinstalled_meter,agent,featureId,base_dir=workdir)

        file_content_change(preinstalled_meter,file,'<parameter name="EventActive" value="0"/>','<parameter name="EventActive" value="1"/>')
        file_content_change(preinstalled_meter,file,'<parameter name="PeriodicEndTime" value="21:00"/>','<parameter name="PeriodicEndTime" value="23:59"/>')
        file_content_change(preinstalled_meter,file,'<parameter name="PeriodicFrequency" value="00:05:00"/>','<parameter name="PeriodicFrequency" value="00:00:05"/>')
        file_content_change(preinstalled_meter,file,'<parameter name="EventFrequency" value="00:05:00"/>','<parameter name="EventFrequency" value="00:00:15"/>')

        # Push configuration file to the featureConfiguration table
        Config_push(preinstalled_meter,featureId)

        
        logger.trace('Step 5')
        stop = time.time() + (5*60)
        count = 0
        previous_value = 0
        while time.time()<=stop:
            AgentFeatureDataCounter_data = preinstalled_meter.sql_query(f"select DailyUpstreamDataSent from AgentFeatureDataCounter where agentid = {agent_id} and featureid = {featureId}")

            value1 = AgentFeatureDataCounter_data[0].isnumeric() if AgentFeatureDataCounter_data else False
            value2 = int(AgentFeatureDataCounter_data[0]) > previous_value if value1 else False
            status = value1 and value2
            if status:
                count = count+1
                previous_value = int(AgentFeatureDataCounter_data[0])
            if count>3:
                break
            time.sleep(10)


        logger.trace('Step 6')
        assert count>3, "Timeout for condition check"

    finally:

        # Update the Data file at the FeatureConfiguration table at Initial State
        agent_Config_collect(preinstalled_meter,agent,featureId,base_dir=workdir,force=True)
        Config_push(preinstalled_meter,featureId)

       
       