"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase2
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2050407
===================================================================================================
Test Case      : 2050407
Description    : Verify if DI-Agent ID and Feature ID specific counter value for  Number of AgentAlarm messages is retrievable.
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 -
Install DItest agent.  Do a SwitchDIInit Check if the agent is running using the command ps | grep
Agent

Step 2 -
Agent should be running

Step 3 -
Push the config for alarms to be sent through FDM (config attached).

Step 4 -
Check the AgentEvents table

Step 5 -
Using the command :# sqlite3 --header /usr/share/itron/database/muse01.db \"select count(*) from
AgentEvents where featureid=50593776 and Data like \'92#Alarm#%\';\"\nChange the featureid according
to the featureid\'s available and also the agentid .

Step 6 -
The command should return the value as an integer.

Step 7 -
Check the AgentfeatureDataCounter table.sqlite3 --header /usr/share/itron/database/muse01.db
\"select DailyAlarmMessagesSent from AgentFeatureDataCounter where featureid=50593776;\"

Step 8 -
The counter value obtained should match with the value found in the DailyAlarmMessageSent


===================================================================================================


"""
import pytest
import time
from tests.test_meters.utils import install_agent_and_activate, refresh_container, DI_TEST_AGENT,Active_Containers
from tests.test_meters.rohan_utils import Config_push,agent_Config_collect,file_content_change,Container_stop,Dataserver_refresh

# AUTOGENERATED Test Case 2050407

# @pytest.mark.skip(reason='reset AgentFeatureDataCounter table after agent installation')
@pytest.mark.regress_nightly
@pytest.mark.regress_smoke
@pytest.mark.suite_id("2046635")
@pytest.mark.test_case("2050407")
def test_case(preinstalled_meter, logger, workdir):
    logger.trace("Executing Test Case 2050407 - Verify if DI-Agent ID and Feature ID specific counter value for  Number of AgentAlarm messages is retrievable.")

    logger.trace('Step 1')
    agent = DI_TEST_AGENT
    featureId = '50593776'
    install_agent_and_activate(preinstalled_meter,logger,agent)


    # Getting the Agent ID form the Agent Information Table
    query=f'select AgentUID from agentinformation where AgentName = "{agent.name}";'
    agent_id=preinstalled_meter.sql_query(query)[0]

    logger.trace('step 2')
    logger.trace('step 3')

    try:


        preinstalled_meter.sql_query(f"delete from AgentEvents where agentid ={agent_id} and featureid = {featureId} and data LIKE \"92#Alarm#%\"")

        query=f'update AgentFeatureDataCounter SET DailyAlarmMessagesSent=0 where agentid = {agent_id} and featureid = {featureId}'
        preinstalled_meter.sql_query(query)

        # Get configuration file from the featureConfiguration table
        file = agent_Config_collect(preinstalled_meter,agent,featureId,base_dir=workdir)

        # Update the configuration file
        file_content_change(preinstalled_meter,file,'<parameter name="AlarmActive" value="0"/>','<parameter name="AlarmActive" value="1"/>')
        file_content_change(preinstalled_meter,file,'<parameter name="AlarmFrequency" value="00:05:00"/>','<parameter name="AlarmFrequency" value="00:00:15"/>')

        # Push configuration file to the featureConfiguration table
        Config_push(preinstalled_meter,featureId)

        logger.trace('Step 4')
        logger.trace('Step 5')

        stop = time.time() + (5*60)
        while time.time()<=stop:
            query = f"select count(*) from AgentEvents where agentid ={agent_id} and featureid = {featureId} and data LIKE \"92#Alarm#%\""
            AgentEvents_data = preinstalled_meter.sql_query(query)
            AgentFeatureDataCounter_data = preinstalled_meter.sql_query(f"select DailyAlarmMessagesSent from AgentFeatureDataCounter where agentid = {agent_id} and featureid = {featureId}")

            value1 = AgentEvents_data[0].isnumeric() if AgentEvents_data else False
            value2 = AgentFeatureDataCounter_data[0].isnumeric() if AgentFeatureDataCounter_data else False
            value3 = int(AgentEvents_data[0])==int(AgentFeatureDataCounter_data[0]) if value1 and value2 else False
            status = value1 and value2 and value3
            if status:
                break
            time.sleep(5)

        logger.trace('Step 6')
        value1, 'The AgentEvents Commmand is not return the value as an integer'

        logger.trace('step 7')
        logger.trace('step 8')
        value3,'The counter value obtained is not match with the value found in the DailyAlarmMessageSent'


    finally:

        # Update the Data file at the FeatureConfiguration table at Initial State
        agent_Config_collect(preinstalled_meter,agent,featureId,base_dir=workdir,force=True)
        Config_push(preinstalled_meter,featureId)

      