"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase2
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2047594
===================================================================================================
Test Case      : 2047594
Description    : Verify the counter table behavior after restarting the container manager.
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : Completing Pull Request 142869 and the associated work items.
Steps:
===================================================================================================
Step 1 - 
Check if the agent is running using the command ps | grep Agent

Step 2 - 
Agent should be up with Agent name and Agent pid

Step 3 - 
Restart the container manager using the command: dbus-send --system
--dest=com.itron.museplatform.ContainerManager /com/itron/museplatform/ContainerManager
com.itron.museplatform.ContainerManager.StopAllContainer\ndbus-send --system
--dest=com.itron.museplatform.ContainerManager /com/itron/museplatform/ContainerManager
com.itron.museplatform.ContainerManager.Refresh

Step 4 - 
Do a SwitchDIInit (this is not required)

Step 5 - 
As the lxc is refreshed , you need to do this for the agent to come up and work as expected.

Step 6 - 
Check if the agent is up

Step 7 - 
Agent should be up with Agent name and Agent pid

Step 8 - 
Check the AgentfeatureDataCounter table

Step 9 - 
The table should be present as expected.

AgentfeatureDataCounter should preserve atleast the previous entries.. ie., the number of feature ids , upstreamData, alarm (After the refresh)  should be greater than or equal to Before the refresh. 
1. No lines should be deleted. 
2. Upstream Data / Alarm values can be greater (shouldn't be decreased)
3. Addition of new entries is accepted.


===================================================================================================


"""
import pytest
import time
from tests.test_meters.utils import install_agent_and_activate,get_installed_agents,wait_for_agents,refresh_container,is_process_running,stop_container,HAN_AGENT

# AUTOGENERATED Test Case 2047594

# @pytest.mark.skip(reason="TODO: AgentfeatureDataCounter is not preserve at least the previous entries")
@pytest.mark.regress_nightly
@pytest.mark.regress_smoke
@pytest.mark.suite_id("2046635")
@pytest.mark.test_case("2047594")
def test_case(preinstalled_meter, logger):
    logger.trace("Executing Test Case 2047594 - Verify the counter table behavior after restarting the container manager.")
    logger.trace('Step 1')
    installed_agents = get_installed_agents(preinstalled_meter,logger)
    agent = HAN_AGENT
    install_agent_and_activate(preinstalled_meter, logger, agent)

    logger.trace('Step 2')
    assert is_process_running(preinstalled_meter,f'{HAN_AGENT.name}_Daemon'),"Agent is not running"

    AgentFeatureDataCountertable_before = preinstalled_meter.get_table("AgentFeatureDataCounter")
    logger.trace('Step 3')
    stop_container(preinstalled_meter)
    logger.trace('Step 4')
    logger.trace('Step 5')
    logger.trace('Step 6')
    refresh_container(preinstalled_meter,logger,20*60)
    logger.trace('Step 7')

    logger.trace('Step 8')
    logger.trace('Step 9')
    for parameter in AgentFeatureDataCountertable_before:
        # For DailyUpstreamDataSent in the AgentFeatureDataCounter table
        query = f"select DailyUpstreamDataSent from AgentFeatureDataCounter where AgentId = \"{parameter['AgentId']}\" and FeatureID = \"{parameter['FeatureID']}\""
        after_DailyUpstreamDataSent=preinstalled_meter.sql_query(query)
        assert after_DailyUpstreamDataSent and (int(after_DailyUpstreamDataSent[0]) >= int(parameter['DailyUpstreamDataSent'])) ,"AgentFeatureDataCounter Table is not exist or retain after container refresh"

        # For DailyAlarmMessagesSent in the AgentFeatureDataCounter table
        query = f"select DailyAlarmMessagesSent from AgentFeatureDataCounter where AgentId = \"{parameter['AgentId']}\" and FeatureID = \"{parameter['FeatureID']}\""
        after_DailyAlarmMessagesSent=preinstalled_meter.sql_query(query)
        assert after_DailyAlarmMessagesSent and (int(after_DailyAlarmMessagesSent[0]) >= int(parameter['DailyAlarmMessagesSent'])) ,"AgentFeatureDataCounter Table is not exist or retain after container refresh"