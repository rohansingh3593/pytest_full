"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase2
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2053523
===================================================================================================
Test Case      : 2053523
Description    : Verify the behavior of the counter service table after upgrading the AppService
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 - 
Upgrade the appservice in a meter via FDM/Improv with agent already running on the meter

Step 2 - 
Upgrade successful

Step 3 - 
Check if the container has come up using the command ps | grep lxc

Step 4 - 
Container should be up with lxc-start and it\'s pid

Step 5 - 
Check if the agent has come up

Step 6 - 
Agent should be up with Agent name and Agent pid

Step 7 - 
Check the AgentFeatureDataCounter table

Step 8 - 
The table should be present


===================================================================================================


"""
import pytest
import time
from tests.test_meters.utils import HAN_AGENT,is_process_running,wait_for_agents,get_installed_agents,install_agent_and_activate
from tests.test_meters.rohan_utils import absolute_command

# AUTOGENERATED Test Case 2053523

# @pytest.mark.skip(reason="TODO: unimplemented test case")
@pytest.mark.slow1020 # test takes 10 to 20 minutes
@pytest.mark.regress_nightly
# @pytest.mark.regress_smoke
@pytest.mark.suite_id("2046635")
@pytest.mark.test_case("2053523")
def test_case(preinstalled_meter, logger, di_package_2k):
    logger.trace("Executing Test Case 2053523 - Verify the behavior of the counter service table after upgrading the AppService")

    logger.trace('Step 1')
    installed_agents = get_installed_agents(preinstalled_meter,logger)
    if(not installed_agents):
        install_agent_and_activate(preinstalled_meter, logger, HAN_AGENT)
    else:
        wait_for_agents(preinstalled_meter, logger, installed_agents, 20*60)
    stdout = absolute_command(preinstalled_meter,'TransactionProcess --event="MUSE_V1;ReadLid;ILID_DATASERVER_APPSERV_FW_VERSION;"')
    pre_version = stdout[0].split('=')
    logger.trace(pre_version[1])
    preinstalled_meter.install(file=di_package_2k)
    stdout = absolute_command(preinstalled_meter,'TransactionProcess --event="MUSE_V1;ReadLid;ILID_DATASERVER_APPSERV_FW_VERSION;"')
    cur_version = stdout[0].split('=')
    logger.trace('Step 2')
    logger.trace(cur_version[1])
    assert pre_version[1] != cur_version[1],"Appserve not upgrade"
    logger.trace('Step 3')
    logger.trace('Step 4')
    stop = time.time() + (3*60)
    while time.time()<=stop:
        if is_process_running(preinstalled_meter,'lxc-start'):
            break
        time.sleep(10)
    assert is_process_running(preinstalled_meter,'lxc-start'), "timeout error waiting for conditions"
    logger.trace('Step 5')
    logger.trace('Step 6')
    if installed_agents:
        wait_for_agents(preinstalled_meter, logger, installed_agents, 20*60)
    else:
        wait_for_agents(preinstalled_meter, logger, [HAN_AGENT], 20*60)
    logger.trace('Step 7')
    while time.time()<=stop:
        stdout = preinstalled_meter.sql_query("select * from AgentFeatureDataCounter;")
        if len(stdout) !=0:
            break
    logger.trace('Step 8')
    assert len(stdout)!=0, 'AgentFeatureDataCounter Table not present'



