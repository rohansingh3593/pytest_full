"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase2
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2074363
===================================================================================================
Test Case      : 2074363
Description    : Verify the behavior of the ApplicationService when the requesting AgentID has permission to the said resource
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
=================================================================================================== 
Step 1 - prereqisite of tc 2074359
Add the permission back to the Policy table and restart DataServer and SwitchDIIint.sh

Prerequisite:  Ensure no permission before this validation and 1sec log shouldn't work,.

Step 2 - 
ApplicationServices proceeds with the request normally.  ie., 1sec log should be printing the Metrology

===================================================================================================
"""
import pytest,time
from tests.test_meters.utils import DI_TEST_AGENT, install_agent_and_activate,refresh_container
from tests.test_meters.rohan_utils import Config_push,agent_Config_collect,file_content_change,Container_stop,Dataserver_refresh,agent_policy_collect,policy_file_push,absolute_command,Active_Containers


# AUTOGENERATED Test Case 2074363
# @pytest.mark.skip(reason="TODO: unimplemented test case")
@pytest.mark.regress_nightly
#@pytest.mark.regress_smoke
@pytest.mark.suite_id("2062303")
@pytest.mark.test_case("2074363")
@pytest.mark.parametrize("agent_info", [DI_TEST_AGENT])
def test_case(preinstalled_meter, logger, agent_info,workdir):
    logger.trace("Executing Test Case 2074363 - Verify the behavior of the ApplicationService when the requesting AgentID has permission to the said resource")
    Feature_id="50593776"
    agent=DI_TEST_AGENT
    try:
        logger.trace('Step 1')
        install_agent_and_activate(preinstalled_meter,logger,agent_info)
        initial_max_timestamp = preinstalled_meter.sql_query("select max(timestamp) from PolicyViolationStatistics where AgentId=50528128;")
        logger.info('initial_max_timestamp %s',initial_max_timestamp)   
        
        logger.trace('Step 2')
        preinstalled_meter.command(f'rm -rf *')
        file = agent_policy_collect(preinstalled_meter,agent,base_dir=workdir)

        # Adding the some lids in the agent policy file table.
        file_content_change(preinstalled_meter,file,'<Permission name="Data:Subscription:Metrology:Partial"/>','<!-- <Permission name="Data:Subscription:Metrology:Partial"/> -->')
        file_content_change(preinstalled_meter,file,'<Permission name="Network:Upstream"/>','<!-- <Permission name="Network:Upstream"/> -->')

        # Update the policy file
        policy_file_push(preinstalled_meter,agent)

        logger.trace('Step 4')
        # Get configuration file from the featureConfiguration table
        file = agent_Config_collect(preinstalled_meter,DI_TEST_AGENT,Feature_id,base_dir=workdir)

        file_content_change(preinstalled_meter,file,'<parameter name="EventActive" value="0"/>','<parameter name="EventActive" value="1"/>')
        file_content_change(preinstalled_meter,file,'<parameter name="EventFrequency" value="00:05:00"/>','<parameter name="EventFrequency" value="00:00:15"/>')
        file_content_change(preinstalled_meter,file,'<parameter name="AlarmActive" value="0"/>','<parameter name="AlarmActive" value="1"/>')
        file_content_change(preinstalled_meter,file,'<parameter name="AlarmFrequency" value="00:05:00"/>','<parameter name="AlarmFrequency" value="00:00:15"/>')
        file_content_change(preinstalled_meter,file,'<parameter name="PeriodicActive" value="0"/>','<parameter name="PeriodicActive" value="1"/>')
    
        # Push configuration file to the featureConfiguration table
        Config_push(preinstalled_meter,Feature_id)

        Dataserver_refresh(preinstalled_meter)

        # Stop the Container
        Container_stop(preinstalled_meter,agent.container_id)
        # Start the container
        refresh_container(preinstalled_meter,logger,20*60)
        assert agent.container_id in Active_Containers(preinstalled_meter),f"Container {agent.container_id} is not start after the Container Start command"
        
        stop = time.time() + (5*60)
        count = 0
        while time.time()<=stop:
            one_log = preinstalled_meter.command('tail -s 1 /tmp/container/50593792/rootfs/tmp/agent/0302ff80/0302ff80_log')
            log_data = ''.join(one_log)
            logger.trace(one_log)
            if('Log:DBG:[TS,VA,VB,VC,IA,IB,IC,PA,PB,PC,QA,QB,QC,Temp,Freq]' not in log_data): 
                count = count + 1      
            if(count>3):
                break
            else:
                time.sleep(10)  

        assert count > 3,"Agent showing one sec logs"

        preinstalled_meter.command(f'rm -rf *')
        file = agent_policy_collect(preinstalled_meter,agent,base_dir=workdir)

        # Adding the some lids in the agent policy file table.
        file_content_change(preinstalled_meter,file,'<!-- <Permission name="Data:Subscription:Metrology:Partial"/> -->','<Permission name="Data:Subscription:Metrology:Partial"/>')
        file_content_change(preinstalled_meter,file,'<!-- <Permission name="Network:Upstream"/> -->','<Permission name="Network:Upstream"/>')

        # Update the policy file
        policy_file_push(preinstalled_meter,agent)

        Dataserver_refresh(preinstalled_meter)

        # Stop the Container
        Container_stop(preinstalled_meter,agent.container_id)
        # Start the container
        refresh_container(preinstalled_meter,logger,20*60)
        assert agent.container_id in Active_Containers(preinstalled_meter),f"Container {agent.container_id} is not start after the Container Start command"
        
        stop = time.time() + (5*60)

        prev_time = 0
        logger.trace("Time before checking for 1sec log"+str(prev_time))
        cur_time = 0
        while time.time()<=stop:
            one_log = preinstalled_meter.command('tail -s 1 /tmp/container/50593792/rootfs/tmp/agent/0302ff80/0302ff80_log')
            logger.trace('Step 10')
            log_data = ''.join(one_log)
            logger.trace(one_log)
            if('Log:DBG:[TS,VA,VB,VC,IA,IB,IC,PA,PB,PC,QA,QB,QC,Temp,Freq]' in log_data):
                for val in one_log:
                    try:
                        cur_time = (int(val))
                    except ValueError:
                        pass
                    if(cur_time > prev_time):
                        prev_time = cur_time
                        count = count + 1
                    
            if(count>3):
                break
            else:
                time.sleep(10)  

        assert count > 3,"Agent not showing one sec logs"

    finally:
         # Update the policy file at the DIPolicyFile table at initial State
        agent_policy_collect(preinstalled_meter,agent,base_dir=workdir,force=True)
        policy_file_push(preinstalled_meter,agent)

        # Update the Data file at the FeatureConfiguration table at Initial State
        agent_Config_collect(preinstalled_meter,DI_TEST_AGENT,Feature_id,base_dir=workdir,force=True)
        Config_push(preinstalled_meter,Feature_id)        

        # Restart the DataServer
        Dataserver_refresh(preinstalled_meter)

        # Stop the Container
        Container_stop(preinstalled_meter,agent.container_id)
        # Start the container
        refresh_container(preinstalled_meter,logger,20*60)
        assert agent.container_id in Active_Containers(preinstalled_meter),f"Container {agent.container_id} is not start after the Container Start command"
    
        absolute_command(preinstalled_meter,f'rm -rf *')
    
   