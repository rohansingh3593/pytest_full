"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase2
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2050716
===================================================================================================
Test Case      : 2050716
Description    : Verify ApplicationServices retrievesthe SHA256 hash value from the DI Policy file of the calling DI Agentapplication
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 - 
Verify hash value is available in DI policy file xml stored in agent package

Step 2 - 
<Agent ID=\"50528132\" Name=\"MetrologyDataAgent\" Version=\"1.1.4.3764676579\" Priority=\"1\"
Hash=\"64b5e3f34c34cf9ad5d965d4d1e07bdf0b509e94d12f25c946dcb5e754aac55a\">\n

Step 3 - 
Install the Agent

Step 4 - 
Calculate the sha256 sum of the Daemonsha256sum
/tmp/container/50593792/rootfs/usr/bin/0302ff84/MetrologyDataAgent_Daemon

Step 5 - 
Should get the HASH valueeg : 64b5e3f34c34cf9ad5d965d4d1e07bdf0b509e94d12f25c946dcb5e754aac55a
MetrologyDataAgent_Daemon\n

Step 6 - 
Ensure the same HASH is seen in the policy file available in DIPolicyFile table.

Step 7 - 
Hash should Match

Step 8 - 
Ensure Agent is running

Step 9 - 
Agent 1sec log should get the required data.


===================================================================================================


"""
import pytest
from tests.test_meters.utils import wait_for_agents,is_process_running,METROLOGY_DATA_AGENT,install_agent_and_activate
from tests.test_meters.rohan_utils import agent_file,agent_Config_collect,file_content_change,Container_stop,Dataserver_refresh,All_Agent_Table_Refresh,is_log_file_available,agent_policy_collect,policy_file_push,absolute_command
import time
import re

# AUTOGENERATED Test Case 2050716
#@pytest.mark.skip(reason="TODO: unimplemented test case")
@pytest.mark.regress_nightly
#@pytest.mark.regress_smoke
@pytest.mark.suite_id("2050697")
@pytest.mark.test_case("2050716")
@pytest.mark.parametrize("agent",[(METROLOGY_DATA_AGENT)])
def test_case(preinstalled_meter, logger,agent,workdir):
    logger.trace("Executing Test Case 2050716 - Verify ApplicationServices retrievesthe SHA256 hash value from the DI Policy file of the calling DI Agentapplication")
    logger.trace('Step 1')
    path="/root"
    agent_file(preinstalled_meter,agent,"PolicyFile.xml",base_dir=workdir,meter_dir=path)
    logger.trace('Step 2')
    logger.trace('Step 3')
    install_agent_and_activate(preinstalled_meter,logger,agent)
    logger.trace('Step 4')

    #hash_value=preinstalled_meter.command(f'sha256sum /tmp/container/50593792/rootfs/usr/bin/0302ff84/MetrologyDataAgent_Daemon')
    hash_value=absolute_command(preinstalled_meter,f'sha256sum /tmp/container/50593792/rootfs/usr/bin/0302ff84/MetrologyDataAgent_Daemon')
    logger.trace('Step 5')
    hash_value=hash_value[0].split()[0]
    logger.trace('Step 6')

    cmd=f'cat {path}/PolicyFile.xml'
    code, policy_file_content = preinstalled_meter.command_with_code(cmd)
    assert code == 0, "Policy file not downloaded from agent package"
    logger.info("policy file data is : %s",policy_file_content)
    policy_file_content = ' '.join(policy_file_content)

    logger.trace('Step 7')
    assert hash_value in policy_file_content, "verify the DI Policy file hash value of agent installed"

    logger.trace('Step 8')
    assert is_process_running(preinstalled_meter,"MetrologyDataAgent"),"MetrologyDataAgent_Daemon is not running"
    logger.trace('Step 9')

    # It will check Agent log file is available
    log_file=is_log_file_available(preinstalled_meter,agent)


    prev_time=int(absolute_command(preinstalled_meter,r"date +%s")[0])
    logger.trace("Time before checking for 1sec log"+str(prev_time))

    # It will check the Added lid is removed from the lids.
    # It will check the Default lid is available.
    default_lid=["18153520","18153515","18153640"]
    c=0
    stop = time.time() + 5*60
    while time.time()<=stop:
        check = "\n".join(absolute_command(preinstalled_meter,f'cat {log_file}')[-20:])
        value1 = all([f'LID_VALUE({lid})' in check for lid in default_lid])
        compare_timestamp=re.findall(r"\n(\d+)\n",check)
        logger.info("Available Timestamp for the Message : %s",", ".join(compare_timestamp[-3:]))
        value3 = int(compare_timestamp[-1]) > prev_time if compare_timestamp else False
        status = value1 and value3
        if status:
            break
        else:
            c+=1
        if c%5==0:
            # it will refresh the dataserver after 25 sec if not found
            # Restart the DataServer
            Dataserver_refresh(preinstalled_meter)                
        if c==19:
            # it will refresh all agent table 95 sec if not found
            All_Agent_Table_Refresh(preinstalled_meter,agent)                
            c=0
        time.sleep(5)
    assert status,"Agent not showing one sec logs"
    files = preinstalled_meter.ls('/root')
    if files:
        for file in files:
            preinstalled_meter.command(f'rm -rf /root/{file}')