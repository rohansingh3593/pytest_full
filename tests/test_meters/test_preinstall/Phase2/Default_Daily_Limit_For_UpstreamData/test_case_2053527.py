
"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase2
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2053527
===================================================================================================
Test Case      : 2053527
Description    : Verify if the default daily outcome data limit LID value is writable
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 - 
Use the command to write a Lid: TransactionProcess
--event=\"MUSE_V1;WriteLid;ILID_DATASERVER_AGENT_HEADEND_DATA_LIMIT;9999999\";\n

Step 2 - 
the lid value should be changed. This can be verified using the command: TransactionProcess
--event=\"MUSE_V1;ReadLid; ILID_DATASERVER_AGENT_HEADEND_DATA_LIMIT\";\n# TransactionProcess --event
=\"MUSE_V1;WriteLid;ILID_DATASERVER_AGENT_HEADEND_DATA_LIMIT;20000;\"\nRESULT:SUCCESS:ILID_DATASERVE
R_AGENT_HEADEND_DATA_LIMIT:20000


===================================================================================================


"""
import pytest
from tests.test_meters.rohan_utils import absolute_command

# AUTOGENERATED Test Case 2053527

# @pytest.mark.skip(reason="TODO: unimplemented test case")
@pytest.mark.regress_nightly
#@pytest.mark.regress_smoke
@pytest.mark.suite_id("2050497")
@pytest.mark.test_case("2053527")
def test_case(preinstalled_meter, logger):
    logger.trace("Executing Test Case 2053527 - Verify if the default daily outcome data limit LID value is writable")

    logger.trace('Step 1')
    default_LID = absolute_command(preinstalled_meter,'TransactionProcess --event="MUSE_V1;ReadLid; ILID_DATASERVER_AGENT_HEADEND_DATA_LIMIT";')
    default_LID = default_LID[0].split('=')[1]
    try:
        absolute_command(preinstalled_meter,'TransactionProcess --event="MUSE_V1;WriteLid; ILID_DATASERVER_AGENT_HEADEND_DATA_LIMIT;9999999";')
        logger.trace('Step 2')
        new_LID_1 = absolute_command(preinstalled_meter,'TransactionProcess --event="MUSE_V1;ReadLid; ILID_DATASERVER_AGENT_HEADEND_DATA_LIMIT";')
        new_LID_1 = new_LID_1[0].split('=')[1]
        logger.trace(new_LID_1)
        assert new_LID_1 == '9999999'
        absolute_command(preinstalled_meter,'TransactionProcess --event="MUSE_V1;WriteLid; ILID_DATASERVER_AGENT_HEADEND_DATA_LIMIT;20000";')
        new_LID_2 = absolute_command(preinstalled_meter,'TransactionProcess --event="MUSE_V1;ReadLid; ILID_DATASERVER_AGENT_HEADEND_DATA_LIMIT";')
        new_LID_2 = new_LID_2[0].split('=')[1]
        logger.trace(new_LID_2)
        assert new_LID_2 == '20000'
    finally:
        cmd = f'TransactionProcess --event="MUSE_V1;WriteLid; ILID_DATASERVER_AGENT_HEADEND_DATA_LIMIT;{default_LID}";'
        absolute_command(preinstalled_meter,cmd)
        reset_LID = absolute_command(preinstalled_meter,'TransactionProcess --event="MUSE_V1;ReadLid; ILID_DATASERVER_AGENT_HEADEND_DATA_LIMIT";')
        reset_LID = reset_LID[0].split('=')[1]
        logger.trace(reset_LID)
        assert reset_LID == default_LID



