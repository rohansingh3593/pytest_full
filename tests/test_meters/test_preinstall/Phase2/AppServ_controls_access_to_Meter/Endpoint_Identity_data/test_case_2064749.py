"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase2
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2064749
===================================================================================================
Test Case      : 2064749
Description    : Verify ApplicationServices shallcheck from the corresponding DI Policy file permission the requesting AgentID has to the said resource
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 - 
install  agent and ensure corresponding DI policy file in place

Step 2 - 
agent and Policy file installed in specified paths

sqlite3 /mnt/common/database/muse01.db "select PolicyFile from DIPolicyFile;"


Step 3 - 
Agent should be registered and functional.
tmp/logs/DataServer_Daemon/INFORMATION/DataServer_Daemon.txt

Note : if DataServer_Daemon.txt has no information about the Agent installation, please try the previous .gz files.
 
 
Step 4 - 
"{2022/11/28 19:54:49 [66168799.380]}","None","Agent hash retrieved and matches policy.","INFORMATION","DataServer_Daemon","","","10.5.735.1","","46","4157"
"{2022/11/28 19:54:49 [66168799.381]}","None","Hash key matches, Proceeding with Registration.","INFORMATION","DataServer_Daemon","","","10.5.735.1","","46","4157"
"{2022/11/28 19:54:49 [66168799.391]}","None","Registration successfully done !!!","INFORMATION","DataServer_Daemon","","","10.5.735.1","","46","4157"


Step 5 - 
Check to permissions from policy file by below command 
sqlite3 /mnt/common/database/muse01.db "select PolicyFile from DIPolicyFile;"

Step 6 - 
<Permission name="Data:Identity:Partial"/>

Step 7 - 
Check the AgentsEvents table that the Identity LIDS are accessed as the permission is available in the policy file

Step 8 - 
15|50528128|12|50536320|1669935866|98#0302ff80#0.2.18#10.5.660.1#1.7.374.8#3031f80 303fff0 303fff1 303fff2 303fff3 3032f80 3034f80 3033f80##2560#4#1024#2|0



===================================================================================================


"""
import pytest
import time
from tests.test_meters.utils import install_agent_and_activate, DI_TEST_AGENT,refresh_container,Active_Containers,is_process_running,filter_ps
from tests.test_meters.event_utils import wait_for_eventlog_entry,get_meter_system_time,wait_for_eventlog_entry_with_rotator
from tests.test_meters.rohan_utils import Container_stop,Dataserver_refresh
# AUTOGENERATED Test Case 2064749

#@pytest.mark.skip(reason="get_meter_time shouldn't be used for getting the current time")
@pytest.mark.regress_nightly
@pytest.mark.regress_smoke
@pytest.mark.suite_id("2063312")
@pytest.mark.test_case("2064749")
def test_case_2064749(preinstalled_meter, logger):
    logger.trace("Executing Test Case 2064749 - Verify ApplicationServices shallcheck from the corresponding DI Policy file permission the requesting AgentID has to the said resource")


    logger.trace('Step 1')
    agent = DI_TEST_AGENT
    start_time = get_meter_system_time(preinstalled_meter)
    install_agent_and_activate(preinstalled_meter, logger, agent)

    logger.trace('Step 2')
    # Getting the Agent ID form the Agent Information Table
    query=f'select AgentUID from agentinformation where AgentName = "{agent.name}";'
    agent_id=preinstalled_meter.sql_query(query)[0] 

    logger.trace('Step 3')
    cmd = f'sha256sum /tmp/container/{agent.container_id}/rootfs/usr/bin/0302ff80/{agent.name}_Daemon'
    hash_value=preinstalled_meter.command(cmd)
    hash_value=hash_value[0].split()[0]
    policy_file_content=preinstalled_meter.sql_query(f"select PolicyFile from DIPolicyFile where agentid = {agent_id}")
    assert policy_file_content, "Policy file not present"
    policy_file_content = ' '.join(policy_file_content)

    logger.trace('step 4')
    assert hash_value in policy_file_content, "verify the DI Policy file hash value of agent installed"


    logger.trace('Step 5')
    logger.trace('Step 6')
    assert '<Permission name="Data:Identity:Partial"/>' in policy_file_content, 'Permission not available in file'

    logger.trace('Step 7')
    logger.trace('Step 8')


    # Stop the Container
    Container_stop(preinstalled_meter,agent.container_id)

    assert not is_process_running(preinstalled_meter,f'{agent.name}_Daemon'),'agent is still running'

    # Start the container
    refresh_container(preinstalled_meter,logger,20*60)
    assert agent.container_id in Active_Containers(preinstalled_meter),f"Container {agent.container_id} is not start after the Container Start command"

    file_name = '/tmp/logs/DataServer_Daemon/INFORMATION/DataServer_Daemon.txt'

    found1 = wait_for_eventlog_entry(preinstalled_meter, logger, start_time,file_name,"Agent hash retrieved and matches",5*60,do_assert=False)
    found2 = wait_for_eventlog_entry(preinstalled_meter, logger, start_time,file_name,'Registration successfully done',5*60,do_assert=False)


    if not found1:
        found1 = wait_for_eventlog_entry_with_rotator(preinstalled_meter, logger, start_time,file_name,"Agent hash retrieved and matches",5*60,do_assert=False)


    if not found2:
        found2 = wait_for_eventlog_entry_with_rotator(preinstalled_meter, logger, start_time,file_name,'Registration successfully done',5*60,do_assert=False)

    assert found1 and found2, "Agent registration not notify in the log message"


    fw_version,appserve = preinstalled_meter.version_info()
    query = f'select data from AgentEvents where agentid ={agent_id} and data like "98#%" order by timestamp desc'

    agent_data=preinstalled_meter.sql_query(query) 
    data=agent_data[0].split("#")
    assert  '98' == data[0] and str(fw_version) == data[3] and str(appserve) == data[4],"Identity LIDS is not accessed in the AgentsEvents "
    logger.trace('Step 9')
    logger.trace('Step 10')