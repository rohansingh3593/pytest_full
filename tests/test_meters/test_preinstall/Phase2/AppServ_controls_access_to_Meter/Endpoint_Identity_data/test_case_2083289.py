
"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase2
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2083289
===================================================================================================
Test Case      : 2083289
Description    : Verify requesting AgentID has Partial permission and application service check the access to the LIDS requesting
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 - 
Verify from Policy file partial permission by below command sqlite3 /mnt/common/database/muse01.db
\"select PolicyFile from DIPolicyFile;\"

Step 2 - 
<Permission name=\"Data:Identity:Partial\"/>,

Step 3 - 
Verify the access to below LIDS <LIDS><LID description=\"ILID_SYSTEM_FW_VERSION\"
value=\"1083965465\"/><LID description=\"ILID_DATASERVER_APPSERV_FW_VERSION\"
value=\"44761103\"/></LIDS>

Step 4 - 
access to LIDS in agentevents table


===================================================================================================


"""
import pytest
from tests.test_meters.utils import install_agent_and_activate,DI_TEST_AGENT
from tests.test_meters.rohan_utils import absolute_command


import time


# AUTOGENERATED Test Case 2083289
# @pytest.mark.xfail(reason="need to fetch data like 98#")
@pytest.mark.skip(reason="TODO: unimplemented test case")
@pytest.mark.regress_nightly
#@pytest.mark.regress_smoke

@pytest.mark.suite_id("2063312")
@pytest.mark.test_case("2083289")
def test_case(preinstalled_meter, logger):
    logger.trace("Executing Test Case 2083289 - Verify requesting AgentID has Partial permission and application service check the access to the LIDS requesting")

    logger.trace('Step 1')
    agent = DI_TEST_AGENT
    install_agent_and_activate(preinstalled_meter, logger, agent)

    # Getting the Agent ID form the Agent Information Table
    query=f'select AgentUID from agentinformation where AgentName = "{agent.name}";'
    assert preinstalled_meter.sql_query(query),f"{agent.name} is not installed in the meter"

    Agent_id=preinstalled_meter.sql_query(query)[0]


    PolicyFile = preinstalled_meter.sql_query(f"select PolicyFile from DIPolicyFile where agentid = {Agent_id}")
    logger.trace('Step 2')
    lids=['<Permission name="Data:Identity:Partial"/>']
    assert all(item in PolicyFile for item in lids),"Policy file doesn't have a permission"
    logger.trace('Step 3')
    lids=['<LID description="ILID_SYSTEM_FW_VERSION" value="1083965465"/>','<LID description="ILID_DATASERVER_APPSERV_FW_VERSION" value="44761103"/>']
    assert all(item in PolicyFile for item in lids)
    logger.trace('Step 4')
    appserve_data=absolute_command(preinstalled_meter,'TransactionProcess --event="MUSE_V1;ReadLid;ILID_DATASERVER_APPSERV_FW_VERSION"')
    appserve=appserve_data[0].split('=')[1]
    fw_data=absolute_command(preinstalled_meter,'TransactionProcess --event="MUSE_V1;ReadLid;ILID_SYSTEM_FW_VERSION;"')
    fw_version=fw_data[0].split('=')[1]

    flag = 0
    time_out=time.time() + 5*60
    while time_out>time.time():
        agent_data=preinstalled_meter.sql_query(f"select Data from AgentEvents where agentid = {Agent_id} and data LIKE \"98#%\" order by timestamp desc ")
        if agent_data:
            for data in agent_data:
                data=data.split("#")
                if '98' == data[0] and str(fw_version) == data[3] and str(appserve) == data[4]:
                    flag=1
                    break
        if flag:
            break
        time.sleep(10)
    assert flag, 'timeout for condition check'
    assert  '98' == data[0] and str(fw_version) == data[3] and str(appserve) == data[4] 
    