"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase2
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2064750
===================================================================================================
Test Case      : 2064750
Description    : Verify ApplicationServices shall check fromthe DI Policy file if the requesting agent has access to the Identity LIDit is requesting to.
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 - 
Verify the LIDS Available  in Policy File under <Identity> Element

Step 2 - 
<LIDS><LID description=\"ILID_SYSTEM_FW_VERSION\" value=\"1083965465\"/><LID
description=\"ILID_DATASERVER_APPSERV_FW_VERSION\" value=\"44761103\"/></LIDS>

Step 3 - 
Verify the LIDS has Access by below methodInstall agent package with Policy file  sqlite3
/usr/share/itron/database/muse01.db \"select * from AgentEvents;\" Ex:TransactionProcess
--event=\"MUSE_V1;ReadLid;ILID_SYSTEM_FW_VERSION;\"


Step 4 - 
Agent Evnts table SyStem firmware version shows in Agent Start up messages.

Step 5 - 


Step 6 - 



===================================================================================================


"""
import pytest
import time
from tests.test_meters.utils import install_agent_and_activate,DI_TEST_AGENT

# AUTOGENERATED Test Case 2064750
@pytest.mark.skip(reason="TODO: unimplemented test case")
@pytest.mark.regress_nightly
@pytest.mark.regress_smoke
@pytest.mark.suite_id("2063312")
@pytest.mark.test_case("2064750")
def test_case(preinstalled_meter, logger):
    logger.trace("Executing Test Case 2064750 - Verify ApplicationServices shall check fromthe DI Policy file if the requesting agent has access to the Identity LIDit is requesting to.")
    logger.trace('Step 1')
    agent = DI_TEST_AGENT

    install_agent_and_activate(preinstalled_meter, logger, agent)

    # Getting the Agent ID form the Agent Information Table
    query=f'select AgentUID from agentinformation where AgentName = "{agent.name}";'
    agent_id=preinstalled_meter.sql_query(query)[0]

    # Getting the Policy file.
    agent_Policy_file = preinstalled_meter.sql_query(f"select PolicyFile from DIPolicyFile where agentid={agent_id}")
    agent_Policy_file = " ".join(agent_Policy_file)
    

    Identity_lids = ['<LID description="ILID_SYSTEM_FW_VERSION" value="1083965465"/>','<LID description="ILID_DATASERVER_APPSERV_FW_VERSION" value="44761103"/>']
    logger.trace('Step 2')

    for lids in Identity_lids:
        assert lids in agent_Policy_file,f'Identity lids {lids} are not available in the {agent} policy file '


    logger.trace('step 3')
    fw_version,appserve=preinstalled_meter.version_info()
    logger.trace('step 4')
    stop = time.time() + (5*60)
    while time.time()<=stop:
        agent_data=preinstalled_meter.sql_query(f"select Data from AgentEvents where agentid ={agent_id} and data LIKE \"98#%\" order by timestamp desc")
        if agent_data and '98' == data[0] and str(fw_version) == data[3] and str(appserve) == data[4]:
            break
        time.sleep(10)
    assert agent_data,'Agent is not running'

    data=agent_data[0].split("#")
    assert '98' == data[0] and str(fw_version) == data[3] and str(appserve) == data[4]