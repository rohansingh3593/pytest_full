"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase2
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2050437
===================================================================================================
Test Case      : 2050437
Description    : Verify if the data counter service table exists in the Database
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 - 
sqlite3 --header /usr/share/itron/database/muse01.db \"select * from AgentFeatureDataCounter;\"

Step 2 - 


Step 3 - 
  AgentId INTEGER NOT NULL,
  FeatureId INTEGER NOT NULL,

  DailyUpstreamDataSent INTEGER NOT NULL DEFAULT 0,

  P2PBroadcastDataSentPlc INTEGER NOT NULL DEFAULT 0,
  P2PBroadcastDataSentRf INTEGER NOT NULL DEFAULT 0,
  P2PUnicastDataSentRf INTEGER NOT NULL DEFAULT 0,

  DailyAlarmMessagesSent INTEGER NOT NULL DEFAULT 0,

  P2PBroadcastStaticDataSentPlc INTEGER NOT NULL DEFAULT 0,
  P2PBroadcastStaticDataSentRf INTEGER NOT NULL DEFAULT 0,
  P2PUnicastStaticDataSentRf INTEGER NOT NULL DEFAULT 0,

  P2PBroadcastIBDailyDataSentCounterPlc INTEGER NOT NULL DEFAULT 0,
  P2PBroadcastIBDailyDataSentCounterRf INTEGER NOT NULL DEFAULT 0,
  P2PUnicastDailyDataSentCounterRf INTEGER NOT NULL DEFAULT 0,

  P2PBroadcastIB1hrDataSentCounterPlc INTEGER NOT NULL DEFAULT 0,
  P2PBroadcastIB1hrDataSentCounterRf INTEGER NOT NULL DEFAULT 0,
  P2PUnicast1hrDataSentCounterRf INTEGER NOT NULL DEFAULT 0,

  TimeStamp INTEGER NOT NULL



Step 4 - 
The AgentFeatureDataCounter should be seen like this:  
sqlite3 --header /usr/share/itron/database/muse01.db "select * from Agentfeaturedatacounter"
AgentId|FeatureId|DailyUpstreamDataSent|P2PBroadcastDataSentPlc|P2PBroadcastDataSentRf|P2PUnicastDataSentRf|DailyAlarmMessagesSent|P2PBroadcastStaticDataSentPlc|P2PBroadcastStaticDataSentRf|P2PUnicastStaticDataSentRf|P2PBroadcastIBDailyDataSentCounterPlc|P2PBroadcastIBDailyDataSentCounterRf|P2PUnicastDailyDataSentCounterRf|P2PBroadcastIB1hrDataSentCounterPlc|P2PBroadcastIB1hrDataSentCounterRf|P2PUnicast1hrDataSentCounterRf|TimeStamp
50528119|50536311|396|0|0|0|0|0|0|0|0|0|0|0|0|0|1669641885
50528132|50548612|212|0|0|0|0|0|0|0|0|0|0|0|0|0|1669641513
50528128|50548608|516|0|0|0|0|0|0|0|0|0|0|0|0|0|1669641517
50528132|50536324|166|0|0|0|2|0|0|0|0|0|0|0|0|0|1669641514
50528128|50536320|236|0|0|0|2|0|0|0|0|0|0|0|0|0|1669641517
50528119|50548599|347|0|0|0|0|0|0|0|0|0|0|0|0|0|1669641889
50528119|50593756|0|2328|0|0|0|0|0|0|17|0|0|17|0|0|1669642001




===================================================================================================


"""
import pytest
from tests.test_meters.utils import install_agent_and_activate,DI_TEST_AGENT
import time
# AUTOGENERATED Test Case 2050437

# @pytest.mark.skip(reason="TODO: unimplemented test case")
@pytest.mark.regress_nightly
# @pytest.mark.regress_smoke
@pytest.mark.suite_id("2050431")
@pytest.mark.test_case("2050437")
def test_case(preinstalled_meter, logger):
    logger.trace("Executing Test Case 2050437 - Verify if the data counter service table exists in the Database")

    logger.trace('Step 1')
    install_agent_and_activate(preinstalled_meter, logger, DI_TEST_AGENT)
    logger.trace('Step 2')
    logger.trace('Step 3')
    fields =['AgentId','FeatureId','DailyUpstreamDataSent','P2PBroadcastDataSentPlc','P2PBroadcastDataSentRf','P2PUnicastDataSentRf','DailyAlarmMessagesSent','P2PBroadcastStaticDataSentPlc','P2PBroadcastStaticDataSentRf','P2PUnicastStaticDataSentRf','P2PBroadcastIBDailyDataSentCounterPlc','P2PBroadcastIBDailyDataSentCounterRf','P2PUnicastDailyDataSentCounterRf','P2PBroadcastIB1hrDataSentCounterPlc','P2PBroadcastIB1hrDataSentCounterRf','P2PUnicast1hrDataSentCounterRf','TimeStamp']
    logger.trace('Step 4')
    database_table = preinstalled_meter.sql_query(".tables")
    assert 'AgentFeatureDataCounter' in database_table,'AgentFeatureDataCounter table is not present in the database'

    query = "SELECT * FROM AgentFeatureDataCounter"
    time_out=time.time() + 5*60
    while time_out>time.time():
      stdout = preinstalled_meter.sql_query(query,headers=True)
      status = all(f in stdout[0] for f in fields) if stdout else False
      if status:
        break
      time.sleep(10)
    assert status,'All feild is available in the AgentFeatureDataCounter'
