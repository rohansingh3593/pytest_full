"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase2
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2053528
===================================================================================================
Test Case      : 2053528
Description    : Verify the default LID value of the Agent specific Agent Alarms is writable
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 - 
Use the command to write a Lid: TransactionProcess
--event=\"MUSE_V1;WriteLid;ILID_DATASERVER_AGENT_ALARM_LIMIT;9999999\";\n\n

Step 2 - 
the lid value should be changed. This can be verified using the command: TransactionProcess
--event=\"MUSE_V1;ReadLid; ILID_DATASERVER_AGENT_ALARM_LIMIT\";  # TransactionProcess --event=\"MUSE
_V1;WriteLid;ILID_DATASERVER_AGENT_ALARM_LIMIT;15\";\nRESULT:SUCCESS:ILID_DATASERVER_AGENT_ALARM_LIM
IT:15


===================================================================================================


"""
import pytest
from tests.test_meters.utils import HAN_AGENT,wait_for_agents,get_installed_agents,install_agent_and_activate
from tests.test_meters.rohan_utils import absolute_command

# AUTOGENERATED Test Case 2053528

# @pytest.mark.skip(reason="TODO: unimplemented test case")
@pytest.mark.regress_nightly
# @pytest.mark.regress_smoke
@pytest.mark.suite_id("2050431")
@pytest.mark.test_case("2053528")
def test_case(preinstalled_meter, logger):
    logger.trace("Executing Test Case 2053528 - Verify the default LID value of the Agent specific Agent Alarms is writable")

    logger.trace('Step 1')
    installed_agents = get_installed_agents(preinstalled_meter,logger)
    if(not installed_agents):
        install_agent_and_activate(preinstalled_meter, logger, HAN_AGENT)
    else:
        wait_for_agents(preinstalled_meter, logger, installed_agents, 20*60)
    default_lid = absolute_command(preinstalled_meter,'TransactionProcess --event="MUSE_V1;ReadLid; ILID_DATASERVER_AGENT_ALARM_LIMIT";')
    default_lid = default_lid[0].split('=')[1]
    try:
        absolute_command(preinstalled_meter,'TransactionProcess --event="MUSE_V1;WriteLid;ILID_DATASERVER_AGENT_ALARM_LIMIT;9999999";')
        stdout = absolute_command(preinstalled_meter,'TransactionProcess --event="MUSE_V1;ReadLid; ILID_DATASERVER_AGENT_ALARM_LIMIT";')
        logger.trace('Step 2')
        new_lid = stdout[0].split('=')[1]
        assert "9999999" in new_lid
        absolute_command(preinstalled_meter,'TransactionProcess --event="MUSE_V1;WriteLid;ILID_DATASERVER_AGENT_ALARM_LIMIT;15";')
        stdout = absolute_command(preinstalled_meter,'TransactionProcess --event="MUSE_V1;ReadLid; ILID_DATASERVER_AGENT_ALARM_LIMIT";')
        new_lid = stdout[0].split('=')[1]
        assert "15" in new_lid
    finally:
        absolute_command(preinstalled_meter,f'TransactionProcess --event="MUSE_V1;WriteLid;ILID_DATASERVER_AGENT_ALARM_LIMIT;{default_lid}";')
        stdout = absolute_command(preinstalled_meter,'TransactionProcess --event="MUSE_V1;ReadLid; ILID_DATASERVER_AGENT_ALARM_LIMIT";')
        new_lid = stdout[0].split('=')[1]
        assert default_lid in new_lid