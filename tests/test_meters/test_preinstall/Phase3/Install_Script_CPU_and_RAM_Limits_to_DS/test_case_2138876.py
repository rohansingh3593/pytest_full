
"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase3/Install Script CPU and RAM Limits to DS/Phase3 Sanity - Cgroups
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2138876
===================================================================================================
Test Case      : 2138876
Description    : Verify Installing script for CPU and RAM Limits to set up
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 - 
read below LIds to check default Limits TransactionProcess --event="MUSE_V1;ReadLid;ILID_DATASERVER_CGROUP_CPU_CFS_PERIOD_US;"

TransactionProcess --event="MUSE_V1;ReadLid;ILID_DATASERVER_CGROUP_CPU_CFS_QUOTA_US;"                                                                                                                                                                                                                                                                              


TransactionProcess --event="MUSE_V1;ReadLid;ILID_DATASERVER_CGROUP_MEMORY_LIMIT_IN_BYTES;"                                                                             

Step 2 - 
 --> 1000000, 50000 , 12000000	( new values)




===================================================================================================


"""
import pytest
from tests.test_meters.rohan_utils import absolute_command

# AUTOGENERATED Test Case 2138876

#@pytest.mark.skip(reason="TODO: unimplemented test case")
@pytest.mark.regress_nightly
#@pytest.mark.regress_smoke
@pytest.mark.suite_id("2385935")
@pytest.mark.test_case("2138876")
def test_case(preinstalled_meter, logger, di_version):
    logger.trace("Executing Test Case 2138876 - Verify Installing script for CPU and RAM Limits to set up")
    logger.trace('Step 1')

    CPU_CFS_PERIOD_US       = absolute_command(preinstalled_meter,'TransactionProcess --event="MUSE_V1;ReadLid;ILID_DATASERVER_CGROUP_CPU_CFS_PERIOD_US;"')
    CPU_CFS_PERIOD_US       = CPU_CFS_PERIOD_US[0].split('=')
    CPU_CFS_QUOTA_US        = absolute_command(preinstalled_meter,'TransactionProcess --event="MUSE_V1;ReadLid;ILID_DATASERVER_CGROUP_CPU_CFS_QUOTA_US;"')
    CPU_CFS_QUOTA_US        = CPU_CFS_QUOTA_US[0].split('=')
    MEMORY_LIMIT_IN_BYTES   = absolute_command(preinstalled_meter,'TransactionProcess --event="MUSE_V1;ReadLid;ILID_DATASERVER_CGROUP_MEMORY_LIMIT_IN_BYTES;"')
    MEMORY_LIMIT_IN_BYTES   = MEMORY_LIMIT_IN_BYTES[0].split('=')
    
    #logge.trace('Step 2',CPU_CFS_PERIOD_US,CPU_CFS_QUOTA_US,MEMORY_LIMIT_IN_BYTES)

    assert 1000000 == int(CPU_CFS_PERIOD_US[1]), 'Cgroup values are not default'
    assert 50000 == int(CPU_CFS_QUOTA_US[1]), 'Cgroup values are not default'
    assert 12000000 == int(MEMORY_LIMIT_IN_BYTES[1]), 'Cgroup values are not default'
    
    

