
"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/R3.1/Diff FW Packages
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2951273
===================================================================================================
Test Case      : 2951273
Description    : Diff upgrade from previous FW versions
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 - 
10.2 to 10.5 ColdStart 10.2 FW with Agents running.upgrade using the diff package for the 10_5_770
UpgradeFromSR_10-2/

Step 2 - 
Installation should be success and FW, AS should be upgraded to 10_5_770

Step 3 - 
10.3 to 10.5GMR the Metera. Downgrade the FW to 10.3 DowngradePackage/ (using Downgrade package)b.
Install AS using Improv and Agent.c. upgrade using the diff package UpgradeFromSR_10-3/

Step 4 - 
a. Installation should be success and FW should be downgraded to 10.3. b. AS should installed and
Agent should functional.c. Installation should be success and FW, AS should be upgraded to 10_5_770

Step 5 - 
Repeat for  UpgradeFromSR_10-4/ and  UpgradeWithinSR_10-5/

Step 6 - 
should be success in upgrade from these previous package.


===================================================================================================


"""
import pytest
import time
import re
from tests.test_meters.utils import read_lid,HAN_AGENT,is_process_running,wait_for_agents,install_all_from_preinstall
from itron.meter.Gen5Meter import ParallelMeter
import itron.meter.FwMan as FwMan

# AUTOGENERATED Test Case 2951273
# @pytest.mark.skip(reason="TODO: unimplemented test case")

@pytest.mark.regress_weekly
@pytest.mark.regress_smoke
@pytest.mark.slow1020
@pytest.mark.gmr_meter
@pytest.mark.suite_id("2951188")
@pytest.mark.test_case("2951273")
def test_case(meter, logger,fw_ver):
    logger.trace("Executing Test Case 2951273 - Diff upgrade from previous FW versions")

    file_info = FwMan.get_build_ex(version=fw_ver)

    try:
        logger.trace('Step 1')
        downgrade_2 = 'UpgradeFromSR_10-2'
        downgrade_file_2 = file_info[downgrade_2]

        logger.trace('Step 2')
        fermware_update(meter,logger,fw_ver,downgrade_file_2)

        logger.trace('Step 3')
        downgrade_3 = 'UpgradeFromSR_10-3'
        downgrade_file_3 = file_info[downgrade_3]

        logger.trace('Step 4')
        fermware_update(meter,logger,fw_ver,downgrade_file_3)

        logger.trace('Step 5')
        downgrade_4 = 'UpgradeFromSR_10-4'
        downgrade_file_4 = file_info[downgrade_4]

        logger.trace('Step 6')
        fermware_update(meter,logger,fw_ver,downgrade_file_4)
    

    finally:
        with ParallelMeter(meter,logger) as remote_meter:
            fwver, asver = remote_meter.version_info()
            logger.info("FW Version: %s", fwver)
            if fw_ver != fwver:
                remote_meter.coldstart(version=fw_ver)


def fermware_update(meter,logger,fw_ver,file1o1):

    agent = HAN_AGENT

    fw_ver_down=re.findall(r'\d+.\d.\d+.\d',file1o1.split('/')[-1])[0]
    fw_ver_upgrade=re.findall(r'\d+.\d.\d+.\d',file1o1.split('/')[-1])[1]
    logger.info("FW Version Down: %s", fw_ver_down)
    logger.info("FW Version Upgrade: %s", fw_ver_upgrade)

    with ParallelMeter(meter,logger) as remote_meter:
        fwver, asver = remote_meter.version_info()
        logger.info("FW Version: %s", fwver)
        logger.info("AS Version: %s", asver)
        
        code = remote_meter.coldstart(version=fw_ver_down)
        assert code == 0 
        fwver, asver = remote_meter.version_info()
        logger.info("FW Version: %s", fwver)
        logger.info("AS Version: %s", asver)

        install_all_from_preinstall(logger,remote_meter)
        assert is_process_running(remote_meter,f'{agent.name}_Daemon'),f"{agent.name} is not up "
        assert fw_ver_down == fwver,f'FW Version {fw_ver_down} is not installed'
        app_installed = read_lid(remote_meter,logger,"ILID_APP_SERVICE_PKG_INSTALLED")
        assert app_installed, 'Appseve is not installed'
        code = 1
        retry = 3
        while retry !=0 :
            try:
                _,code = remote_meter.mm.install_with_reboot(remote_meter.connection,file1o1)
            except ValueError as e:
                # There is problem to install Future-Package in meter so we just installed again 
                logger.error("%s",e)
                logger.error('There is problem to install Future-Package in meter so we just installed again')
   

            remote_meter.connect()
            fwver, asver = remote_meter.version_info()
            logger.info("FW Version: %s", fwver)
            logger.info("AS Version: %s", asver)


            if (fw_ver_upgrade == fwver):
                logger.info(f'Installation is succesfull after {4-retry} try')
                break
            time.sleep(60)
            retry -= 1
        assert fw_ver == fwver,f'FW Version {fw_ver} is not installed'
        
        wait_for_agents(remote_meter, logger, [agent], 20*60)
        assert is_process_running(remote_meter,f'{agent.name}_Daemon'),f"{agent.name} is not up "
        app_installed = read_lid(remote_meter,logger,"ILID_APP_SERVICE_PKG_INSTALLED")
        assert app_installed, 'Appseve is not installed'