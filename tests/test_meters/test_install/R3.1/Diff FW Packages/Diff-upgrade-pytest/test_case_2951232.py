
"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/R3.1/Diff FW Packages
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2951232
===================================================================================================
Test Case      : 2951232
Description    : Diff upgrade on a Higher AppServ version running
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 - 
GMR the Meter\nColdstart current FW \"N\"

Step 2 - 


Step 3 - 
Install the latest AppServ version compatible to the FW (eg: 1.7.403.0) which is higher than the AS2k
version that is bundled in diff package (1.7.2450)

Step 4 - 
Ensure AS version

Step 5 - 
Diff upgrade the FW 2k package

Step 6 - 
Diff upgrade should be success and AS (1.7.403.0) should be retained as it is higher.


===================================================================================================


"""
import tempfile
import requests
import pytest
import time
import re , os
from tests.test_meters.utils import read_lid,download_file,install_all_from_preinstall
from itron.meter.Gen5Meter import ParallelMeter
import itron.meter.FwMan as FwMan
import itron.meter.AsMan as AsMan
import zipfile
import xml.etree.ElementTree as ET
from tests.test_meters.rohan_utils import to2k,agent_file
from itron.meter.Walker import OWI_URL,OWI_MOUNT,glob

# AUTOGENERATED Test Case 2951232

# @pytest.mark.skip(reason="TODO: unimplemented test case")
@pytest.mark.regress_weekly
@pytest.mark.regress_smoke
@pytest.mark.slow1020
@pytest.mark.gmr_meter
@pytest.mark.suite_id("2951188")
@pytest.mark.test_case("2951232")
def test_case(meter, logger, fw_ver,di_package_2k,di_version_2k,di_package,di_version,workdir,decrypted_di_package):
    logger.trace("Executing Test Case 2951232 - Diff upgrade on a Higher AppServ version running")

    info = FwMan.get_build_ex(version=fw_ver)
    # logger.info(info)

    fw_package_url = info['ColdStartPackage']
    logger.info(fw_package_url)

    full = download_file(fw_package_url, workdir)


    try:
        with ParallelMeter(meter,logger) as remote_meter:
            logger.trace('Step 1')
            fwver, asver = remote_meter.version_info()
            # remote_meter.gmr()
            di_scripts = os.path.join( os.path.dirname(di_package_2k), 'Diff_Scripts_' + os.path.basename(di_package_2k))
            logger.info(di_scripts)
            repacked_diff = remote_meter.repack_diff_package(logger, full, di_package_2k, di_scripts, workdir)
            logger.info(repacked_diff)

            # args,_ = remote_meter.mm.parse_args(["mm", "install","--file", repacked_diff])
            # remote_meter.logger.info("Args: %s",args)
            # retry = 3
            # while retry != 0 :                    
            #     try:
            #         code = remote_meter.mm.cmd_install(args)                
            #     except ValueError as e:
            #         # There is problem to install Future-Package in meter so we just installed again 
            #         logger.error("%s",e)
            #         logger.error('There is problem to install Future-Package in meter so we just installed again')

            #     remote_meter.connect()
            #     install_all_from_preinstall(logger,remote_meter,agent = False)

            #     fwver, asver = remote_meter.version_info()
            #     logger.info("AS Version: %s", asver)
            #     if (di_version_2k == asver) :
            #         logger.info(f'Installation is succesfull after {4-retry} try')
            #         logger.info(f"AS version is upgraded to {di_version_2k}")
            #         break
            #     time.sleep(60)
            #     retry -=1

            # assert di_version_2k == asver,f'AS version {di_version_2k} is not installed'

            # logger.info("FW Version: %s", fwver)
            # logger.trace('Step 2')
            # assert fw_ver == fwver,f'FW Version {fw_ver} is not installed' 

            # logger.trace('Step 3')
            # logger.trace('Step 4')
            # fwver, initial_asver = remote_meter.version_info()
            # app_installed = read_lid(remote_meter,logger,"ILID_APP_SERVICE_PKG_INSTALLED")
            # assert app_installed, 'Appseve is not installed'
            # logger.info("Preinstall DI installed with version %s", initial_asver)

            # logger.trace('Step 5')

            # for i in range(1,4):
            #     file1o1 = info[f'FutureDiff{i}']
            #     fw_ver_down=re.findall(r'\d+.\d.\d+.\d',file1o1.split('/')[-1])[0]
            #     fw_ver_upgrade=re.findall(r'\d+.\d.\d+.\d',file1o1.split('/')[-1])[1]
            #     logger.info(f"Fw version is going to upgrade from {fw_ver_down} to {fw_ver_upgrade} ")
            #     retry = 3
            #     while retry != 0 :                    
            #         try:
            #             _,code = remote_meter.mm.install_with_reboot(remote_meter.connection,file1o1)
            #         except ValueError as e:
            #             # There is problem to install Future-Package in meter so we just installed again 
            #             logger.error("%s",e)
            #             logger.error('There is problem to install Future-Package in meter so we just installed again')

            #         remote_meter.connect()
            #         fwver, asver = remote_meter.version_info()
            #         logger.info("FW Version: %s", fwver)
            #         logger.info("AS Version: %s", asver)
            #         if (fw_ver_upgrade == fwver) :
            #             logger.info(f'Installation is succesfull after {4-retry} try')
            #             logger.info(f"Fw version is upgraded from {fw_ver_down} to {fw_ver_upgrade}")
            #             break
            #         time.sleep(60)
            #         retry -=1

            #     assert fw_ver_upgrade == fwver,f'Fw version {fw_ver_upgrade} is not installed'

            # logger.trace('Step 6')
            # assert asver == di_version, f'AS version {di_version} is not retained'


    finally:
        
        with ParallelMeter(meter,logger) as remote_meter:
            fwver, asver = remote_meter.version_info()
            logger.info("FW Version: %s", fwver)
            if fw_ver != fwver:
                remote_meter.coldstart(version=fw_ver)


 