
"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase2
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/2040177
===================================================================================================
Test Case      : 2040177
Description    : Check the two iLIDs were created with default values and configurable
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : Completing Pull Request 159508 and the associated work items.
Steps:
===================================================================================================
Step 1 - 
Take a fresh Meter (with GMR meter)

Step 2 - 
Try reading the first LID value using the following command
TransactionProcess --event="MUSE_V1;ReadLid;ILID_DATASERVER_V7_MESSAGE_READ_LIMIT;"
Expected output
It should not return below output
RESULT:ERROR:LID DOES NOT EXIST
Step 3 - 
Try reading another LID value using the following command
TransactionProcess --event="MUSE_V1;ReadLid;ILID_DATASERVER_V7_MESSAGE_POLL_PERIOD_SECS;"
Expected Output:
It should not return below output
RESULT:ERROR:LID DOES NOT EXIST

Step 4 - 
Install AppServ

Step 5 - 
Check the default value configured on the LID
 Helper-CmdList.sh -r  ILID_DATASERVER_V7_MESSAGE_READ_LIMIT
 Expected Output:
 900

Step 6 - 
Check the default value configured on another LID
Helper-CmdList.sh -r  ILID_DATASERVER_V7_MESSAGE_POLL_PERIOD_SECS
Expected Output:
1/s

Step 7 - 
Check the default value configured on another LIDHelper-CmdList.sh -r
ILID_DATASERVER_V7_MESSAGE_POLL_PERIOD_SECS

Step 8 - 
1/s

Step 9 - 
Check those LID are configurable using WriteLid command
 TransactionProcess --event="MUSE_V1;WriteLid;ILID_DATASERVER_V7_MESSAGE_READ_LIMIT;500";
TransactionProcess --event="MUSE_V1;WriteLid;ILID_DATASERVER_V7_MESSAGE_POLL_PERIOD_SECS;2";

Step 10 - 
Changes should be reflecting on the repective LIDs


===================================================================================================


"""
import pytest
from itron.meter.Gen5Meter import ParallelMeter
from tests.test_meters.lids import read_lid

# AUTOGENERATED Test Case 2040177

@pytest.mark.skip(reason="https://dev.azure.com/itron/RnD/_workitems/edit/2954938")
@pytest.mark.regress_nightly
#@pytest.mark.regress_smoke
@pytest.mark.slow1020
@pytest.mark.suite_id("2040169")
@pytest.mark.test_case("2040177")
@pytest.mark.gmr_meter
def test_case(meter, logger, di_package,di_version):
    with ParallelMeter(meter,logger) as remote_meter:
        try:
            logger.trace("Executing Test Case 2040177 - Check the two iLIDs were created with default values and configurable")
            logger.trace('Step 1')
            remote_meter.gmr()
            MESSAGE_READ_LIMIT = remote_meter.command('TransactionProcess --event="MUSE_V1;ReadLid;ILID_DATASERVER_V7_MESSAGE_READ_LIMIT;"')
            logger.trace('Step 2')
            if MESSAGE_READ_LIMIT:
                str_Msg_read_limit = " ".join(MESSAGE_READ_LIMIT)
                limit = str_Msg_read_limit.split("RESULT:ERROR:")[1]
            assert "LID DOES NOT EXIST" in limit
            logger.trace('Step 3')
            MESSAGE_POLL_PERIOD_SECS = remote_meter.command('TransactionProcess --event="MUSE_V1;ReadLid;ILID_DATASERVER_V7_MESSAGE_POLL_PERIOD_SECS;"')
            if MESSAGE_POLL_PERIOD_SECS:
                str_msg_poll_sec = " ".join(MESSAGE_POLL_PERIOD_SECS)
                time_limit = str_msg_poll_sec.split("RESULT:ERROR:")[1]
            assert "LID DOES NOT EXIST" in time_limit
            logger.trace('Step 4')
            remote_meter.install(file = di_package)
            logger.trace('Step 5')
            limit = remote_meter.command("Helper-CmdList.sh -r  ILID_DATASERVER_V7_MESSAGE_READ_LIMIT")
            logger.trace('Step 6')
            assert "900" in limit
            logger.trace('Step 7')
            MESSAGE_POLL_PERIOD_SECS = remote_meter.command('Helper-CmdList.sh -r ILID_DATASERVER_V7_MESSAGE_POLL_PERIOD_SECS')
            logger.trace('Step 8')
            assert "1" in MESSAGE_POLL_PERIOD_SECS
            logger.trace('Step 9')
            V7_MESSAGE_WRITE_LIMIT = remote_meter.command('TransactionProcess --event="MUSE_V1;WriteLid;ILID_DATASERVER_V7_MESSAGE_READ_LIMIT;500";')
            V7_MESSAGE_POLL_PERIOD_SECS_WRITE = remote_meter.command('TransactionProcess --event="MUSE_V1;WriteLid;ILID_DATASERVER_V7_MESSAGE_POLL_PERIOD_SECS;2";')
            logger.trace('Step 10')
            if V7_MESSAGE_WRITE_LIMIT:
                str_V7_MESSAGE_WRITE_LIMIT = " ".join(V7_MESSAGE_WRITE_LIMIT)
                data1 = str_V7_MESSAGE_WRITE_LIMIT.split("ILID_DATASERVER_V7_MESSAGE_READ_LIMIT:")[1]
            if V7_MESSAGE_POLL_PERIOD_SECS_WRITE:
                str_V7_MESSAGE_POLL_PERIOD_SECS_WRITE = " ".join(V7_MESSAGE_POLL_PERIOD_SECS_WRITE)
                data2 = str_V7_MESSAGE_POLL_PERIOD_SECS_WRITE.split(":ILID_DATASERVER_V7_MESSAGE_POLL_PERIOD_SECS:")[1]
            assert "500" in data1
            assert "2" in data2
        finally:
            logger.trace('Step 11')
            default_limit = "900"
            default_time_limit ="1"
            remote_meter.command(f'TransactionProcess --event="MUSE_V1;WriteLid;ILID_DATASERVER_V7_MESSAGE_READ_LIMIT;{default_limit}";')
            updated_read_limit = remote_meter.command('TransactionProcess --event="MUSE_V1;ReadLid; ILID_DATASERVER_V7_MESSAGE_READ_LIMIT;"')
            if updated_read_limit:
                str_updated_read_limit = " ".join(updated_read_limit)
                logger.info("%s",str_updated_read_limit)
                data = str_updated_read_limit.split("ILID_DATASERVER_V7_MESSAGE_READ_LIMIT:U32=")[1]
            assert "900" in data
            remote_meter.command(f'TransactionProcess --event="MUSE_V1;WriteLid;ILID_DATASERVER_V7_MESSAGE_POLL_PERIOD_SECS;{default_time_limit}";')
            updated_msg_poll_period_sec = remote_meter.command('TransactionProcess --event="MUSE_V1;ReadLid; ILID_DATASERVER_V7_MESSAGE_POLL_PERIOD_SECS;"')
            if updated_msg_poll_period_sec:
                str_updated_msg_poll_period_sec = " ".join(updated_msg_poll_period_sec)
                logger.info("%s",str_updated_msg_poll_period_sec)
                data1 = str_updated_msg_poll_period_sec.split("ILID_DATASERVER_V7_MESSAGE_POLL_PERIOD_SECS:U32=")[1]
            assert "1" in data1



