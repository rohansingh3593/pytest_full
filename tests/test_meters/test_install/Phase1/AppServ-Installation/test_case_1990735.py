"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase1
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/1990735
===================================================================================================
Test Case      : 1990735
Description    : ApplicationService components should be accessible with minimum downtime after the installation (6 hours).
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 -
Install latest Coldstart package

Step 2 -

Step 3 -
There is a Factory timer running on the meter usually for 7 days. Check the below LIDHelper-
CmdList.sh -r ILID_FACTORY_MODE_DURATION_SECS or TransactionProcess
--event=\"MUSE_V1;ReadLid;ILID_FACTORY_MODE_DURATION_SECS
Helper-CmdList.sh -r
ILID_INITIAL_FACTORY_CONFIGURATION_TIME_GMT_SECS or TransactionProcess
--event=\"MUSE_V1;ReadLid;ILID_INITIAL_FACTORY_CONFIGURATION_TIME_GMT_SECS



Step 4 -
ApplicationServices package cannot be installed during this period. # Helper-CmdList.sh -r
ILID_FACTORY_MODE_DURATION_SECS \n604800

Step 5 -
Check the iLID using the below command TransactionProcess
--event=\"MUSE_V1;ReadLid;ILID_APP_SERVICE_PKG_INSTALLED;\"(or)Helper-CmdList.sh -r
ILID_APP_SERVICE_PKG_INSTALLED

Step 6 -
LID should set to \"False\"RESULT:SUCCESS:ILID_APP_SERVICE_PKG_INSTALLED:Bool=false(or)false

Step 7 -
After the factory time elapsed, there is another iLID for maintenance delay timer(6hrs by default)
for autoinstall of emancipated AppServices package which comes along with the A7 Riva build. Check
the using below command:TransactionProcess
--event=\"MUSE_V1;ReadLid;ILID_PKG_MAINTENANCE_DELAY_SECS;\"

Step 8 -
ApplicationServices package will be auto installed on the  meter after 6hrs by default.The timer
should show 21600 (value in sec)

Step 9 -
Leave the meter idle for 6hrs. This can be checked using the linux command called \"uptime\"

Step 10 -
Meter should be stable and should not go reboot during this period.

Step 11 -
Check the iLID using the below command after  6hrs is elapsed using the \"uptime\" command
TransactionProcess --event=\"MUSE_V1;ReadLid;ILID_APP_SERVICE_PKG_INSTALLED;\"(or)Helper-CmdList.sh
-r ILID_APP_SERVICE_PKG_INSTALLED

Step 12 -
LID should set to \"True\"RESULT:SUCCESS:ILID_APP_SERVICE_PKG_INSTALLED:Bool=true(or)true


===================================================================================================


"""
import pytest
import time
import re
import os
import tarfile
from bs4 import BeautifulSoup
from itron.meter.FwMan import decrypt
from tests.test_meters.utils import read_lid, write_lid
from itron.meter.Gen5Meter import ParallelMeter
from tempfile import TemporaryDirectory

# AUTOGENERATED Test Case 1990735

@pytest.mark.skip(reason="increase the time")
@pytest.mark.regress_weekly
@pytest.mark.disable_changed
# @pytest.mark.regress_smoke
# @pytest.mark.crosslynx_test
@pytest.mark.suite_id("1990123")
@pytest.mark.test_case("1990735")
def test_case(meter, logger, fw_ver):
    with ParallelMeter(meter,logger) as remote_meter:
        logger.trace("Executing Test Case 1990735 - ApplicationService components should be accessible with minimum downtime after the installation (6 hours).")
        logger.trace('Step 1')

        remote_meter.coldstart(version=fw_ver)
        fwver, asver = remote_meter.version_info()
        logger.trace("Current versions: fw:%s as:%s", fwver, asver)
        logger.trace('Step 2')

        logger.trace('Step 3')
        dir = remote_meter.ls('/usr/share/itron/PreInstall')
        logger.trace(dir)
        for file in dir:
            if('DI-AppServices-Package' in file):
                encrypted_file =file
        logger.trace(encrypted_file)
        with TemporaryDirectory() as dir_path:
            remote_meter.get_file(f'/usr/share/itron/PreInstall/{encrypted_file}',dir_path)
            file_path = dir_path+'/'+encrypted_file
            decrypted_dir = os.path.join(dir_path, "decrypted")
            os.makedirs(decrypted_dir, exist_ok=True)
            decrypted_file = decrypt(file_path, os.path.join(decrypted_dir, "decrypted.tar.gz"))
            with tarfile.open(name=decrypted_file,mode="r:gz") as t:
                t.extractall(decrypted_dir)
            os.remove(decrypted_file)

            xml_file_path = (os.path.join(decrypted_dir,"ReleaseManifest.xml"))
            with open(xml_file_path, 'r') as f:
                    file_data = f.read()
            bs_data = BeautifulSoup(file_data, 'xml')
            elements = bs_data.find('agentConfig')
            logger.trace(elements)
            logger.trace(elements['version'])
            ReleaseManifest_as_ver = elements['version']


        lid="ILID_FACTORY_MODE_DURATION_SECS"
        Factory_duration_time=read_lid(remote_meter,logger,lid)
        logger.trace('Step 4')
        lid="ILID_INITIAL_FACTORY_CONFIGURATION_TIME_GMT_SECS"
        Factory_epoch_time=read_lid(remote_meter,logger,lid)
        meter_time = int(remote_meter.command("date '+%s'")[0])
        assert meter_time > (Factory_epoch_time + Factory_duration_time), "meter is not seven days old, can't test this feature"
        assert Factory_duration_time==604800,"ApplicationServices package may get installed after 6 hour"
        logger.trace('Step 5')
        lid="ILID_APP_SERVICE_PKG_INSTALLED"
        logger.trace('Step 6')
        assert not read_lid(remote_meter,logger,lid), "lid value is not set to false"
        logger.trace('Step 7')
        lid="ILID_PKG_MAINTENANCE_DELAY_SECS"
        pkg_delay_sec=read_lid(remote_meter,logger,lid)
        logger.trace('Step 8')
        assert pkg_delay_sec==21600
        logger.trace('Step 9')
        while read_lid(remote_meter,logger,"ILID_APP_SERVICE_PKG_INSTALLED") == False:
            try:
                uptime=remote_meter.command("uptime")
            except BaseException as e:
                remote_meter.disconnect()
                remote_meter.connect()
            logger.trace(uptime)
            logger.trace('Step 10')
            if not "min" in uptime[0]:
                hour = re.findall(r'up +([0-9]+)+:+([0-9]+)', uptime[0])
                logger.trace(hour)
                logger.trace("after")
                logger.trace(hour)
                if int(hour[0][0]) > (pkg_delay_sec+60/60):
                    break
            else:
                pass
            as_ver = remote_meter.command('TransactionProcess --event="MUSE_V1;ReadLid;ILID_DATASERVER_APPSERV_FW_VERSION;"')
            logger.trace(as_ver)
            assert 'LID DOES NOT EXIST' in as_ver[0]
            time.sleep(8*60)
        logger.trace('Step 11')
        lid="ILID_APP_SERVICE_PKG_INSTALLED"
        logger.trace('Step 12')
        assert read_lid(remote_meter,logger,lid),f"LID '{lid}' is not set to True"

        as_ver_from_meter = remote_meter.command('TransactionProcess --event="MUSE_V1;ReadLid;ILID_DATASERVER_APPSERV_FW_VERSION;"')
        as_ver_from_meter = as_ver_from_meter[0].split('=')
        assert as_ver_from_meter[1] == ReleaseManifest_as_ver,'version not matching'

        stop = time.time() + ((12*60*60)+(15*60))
        wait_time = time.time()
        while time.time()<=stop:
            dir = remote_meter.ls('/usr/share/itron/PreInstall')
            logger.trace(dir)
            as_file = any('DI-AppServices-Package' in file for file in dir)
            if not as_file:
                break
            time.sleep(9*60)
        uptime=remote_meter.command("uptime")
        logger.trace(uptime)
        logger.trace("Total wait time")
        logger.trace(int(time.time())-int(wait_time))
        assert not as_file,'DI-AppServices-Package present in preinstalled directory after installation'

