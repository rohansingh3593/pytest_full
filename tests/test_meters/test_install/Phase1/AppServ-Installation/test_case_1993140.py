"""
REGENRATE: True
Set REGENERATE to False if you modify this comment
section to inhibit re-writing this section
===================================================================================================
Test Plan Path : templates/AppServ-TestRepository/Phase1
Test Case Link : https://dev.azure.com/itron/SoftwareProducts/_workitems/edit/1993140
===================================================================================================
Test Case      : 1993140
Description    : Verify AppServe FW Download Image Removed
Area Path      : RnD/GFW-IVV/DI Outcomes/APP-Serve
Iteration Path : RnD/3 Week
System.History : None
Steps:
===================================================================================================
Step 1 - 
Transfer Appserv image to /mnt/common/  dir of meter.

Step 2 - 


Step 3 - 
Run  ImProvHelper.sh --image <image_name.tar.gz>

Step 4 - 


Step 5 - 
After  download successful. Check for the AppServ tar in /mnt/common/ dir

Step 6 - 
Appserv image should removed from /mnt/common/ after meter update.


===================================================================================================


"""
import pytest
import os
import time
from itron.meter.Gen5Meter import ParallelMeter

# AUTOGENERATED Test Case 1993140

# @pytest.mark.skip(reason="remote_meter.ls to be used")
@pytest.mark.regress_nightly
@pytest.mark.slow1020 # test takes 10 to 20 minutes
#@pytest.mark.regress_smoke
@pytest.mark.suite_id("1990123")
@pytest.mark.test_case("1993140")
def test_case(meter, logger,di_version, decrypted_di_package):
    with ParallelMeter(meter,logger) as remote_meter:
        logger.trace("Executing Test Case 1993140 - Verify AppServe FW Download Image Removed")

        logger.trace('Step 1')
        di_package_image_file = os.path.join(decrypted_di_package, f"encrypted/DI-AppServices-Package-{di_version}.tar.gz")
        dir="/mnt/common"
        remote_meter.put_file(di_package_image_file,dir)
        time.sleep(10)
        logger.trace('Step 2')
        file_name=di_package_image_file.split("/")[-1]
        di_file=f"{dir}/{file_name}"
        remote_meter.install(file=di_file,remote_file=True)
        logger.trace('Step 3')
        stdout = remote_meter.command('TransactionProcess --event="MUSE_V1;ReadLid;ILID_DATASERVER_APPSERV_FW_VERSION;"')
        version = stdout[0].split('=')
        logger.trace('Step 4')
        assert di_version == version[1]
        logger.trace('Step 5')
        files = remote_meter.ls(dir)
        logger.trace('Step 6')
        assert file_name not in files



